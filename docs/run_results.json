{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-07-09T18:40:59.111614Z", "invocation_id": "580e48be-4ad1-4c92-87b0-805b8059d810", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:48.646834Z", "completed_at": "2024-07-09T18:40:48.991463Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:48.994346Z", "completed_at": "2024-07-09T18:40:48.994424Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.385883092880249, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`klaviyo`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:48.652317Z", "completed_at": "2024-07-09T18:40:49.045137Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.046285Z", "completed_at": "2024-07-09T18:40:49.046301Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.43456006050109863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`klaviyo`.`metric`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:48.616566Z", "completed_at": "2024-07-09T18:40:49.049827Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.066454Z", "completed_at": "2024-07-09T18:40:49.066461Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.45735907554626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`klaviyo`.`campaign`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:48.647903Z", "completed_at": "2024-07-09T18:40:49.073401Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.073868Z", "completed_at": "2024-07-09T18:40:49.073873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.46200013160705566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`klaviyo`.`flow`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.075396Z", "completed_at": "2024-07-09T18:40:49.364834Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.368009Z", "completed_at": "2024-07-09T18:40:49.368044Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29607295989990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`abandoned_checkout_shipping_line`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.069514Z", "completed_at": "2024-07-09T18:40:49.399468Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.400806Z", "completed_at": "2024-07-09T18:40:49.400816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.33298802375793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`abandoned_checkout_discount_code`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.003186Z", "completed_at": "2024-07-09T18:40:49.555891Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.556761Z", "completed_at": "2024-07-09T18:40:49.556772Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5573129653930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`klaviyo`.`person`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.403545Z", "completed_at": "2024-07-09T18:40:49.673412Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.674321Z", "completed_at": "2024-07-09T18:40:49.674341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27274608612060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`collection_product`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.376171Z", "completed_at": "2024-07-09T18:40:49.709409Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.710231Z", "completed_at": "2024-07-09T18:40:49.710241Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3372771739959717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`abandoned_checkout`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.560116Z", "completed_at": "2024-07-09T18:40:49.911148Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:49.912473Z", "completed_at": "2024-07-09T18:40:49.912489Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3555121421813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`collection`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.712961Z", "completed_at": "2024-07-09T18:40:50.001860Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.002896Z", "completed_at": "2024-07-09T18:40:50.002909Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29183387756347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`customer`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.678094Z", "completed_at": "2024-07-09T18:40:50.108144Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.108980Z", "completed_at": "2024-07-09T18:40:50.108989Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43340015411376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`customer_tag`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.921174Z", "completed_at": "2024-07-09T18:40:50.257115Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.258394Z", "completed_at": "2024-07-09T18:40:50.258413Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3416721820831299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`discount_code`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.006115Z", "completed_at": "2024-07-09T18:40:50.297737Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.298575Z", "completed_at": "2024-07-09T18:40:50.298585Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2943871021270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`fulfillment`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:49.050899Z", "completed_at": "2024-07-09T18:40:50.347751Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.348178Z", "completed_at": "2024-07-09T18:40:50.348183Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2993979454040527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2016\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2019-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.112006Z", "completed_at": "2024-07-09T18:40:50.425156Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.425613Z", "completed_at": "2024-07-09T18:40:50.425618Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31513214111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`inventory_item`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.262778Z", "completed_at": "2024-07-09T18:40:50.587037Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.588265Z", "completed_at": "2024-07-09T18:40:50.588291Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.328157901763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`inventory_level`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.301268Z", "completed_at": "2024-07-09T18:40:50.611138Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.612321Z", "completed_at": "2024-07-09T18:40:50.612334Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3130791187286377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`location`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.349573Z", "completed_at": "2024-07-09T18:40:50.657218Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.657673Z", "completed_at": "2024-07-09T18:40:50.657679Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30904483795166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`metafield`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__metafield_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.427194Z", "completed_at": "2024-07-09T18:40:50.719797Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.720221Z", "completed_at": "2024-07-09T18:40:50.720225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2939908504486084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_adjustment`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_adjustment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.592418Z", "completed_at": "2024-07-09T18:40:50.875527Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.876423Z", "completed_at": "2024-07-09T18:40:50.876433Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.28621697425842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_discount_code`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.615999Z", "completed_at": "2024-07-09T18:40:50.908204Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:50.908789Z", "completed_at": "2024-07-09T18:40:50.908795Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29456377029418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_line_refund`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.659138Z", "completed_at": "2024-07-09T18:40:51.010275Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.011061Z", "completed_at": "2024-07-09T18:40:51.011069Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3531508445739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_line`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.721692Z", "completed_at": "2024-07-09T18:40:51.078195Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.078782Z", "completed_at": "2024-07-09T18:40:51.078788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3581528663635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_note_attribute`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.910780Z", "completed_at": "2024-07-09T18:40:51.179119Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.179789Z", "completed_at": "2024-07-09T18:40:51.179796Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2703547477722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_shipping_tax_line`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:50.879750Z", "completed_at": "2024-07-09T18:40:51.261914Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.262267Z", "completed_at": "2024-07-09T18:40:51.262272Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3841829299926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_shipping_line`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.013726Z", "completed_at": "2024-07-09T18:40:51.319050Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.319461Z", "completed_at": "2024-07-09T18:40:51.319465Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3071298599243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_tag`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.080715Z", "completed_at": "2024-07-09T18:40:51.367972Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.368380Z", "completed_at": "2024-07-09T18:40:51.368384Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2887258529663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.182222Z", "completed_at": "2024-07-09T18:40:51.430413Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.430820Z", "completed_at": "2024-07-09T18:40:51.430824Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.24996209144592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`order_url_tag`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.263529Z", "completed_at": "2024-07-09T18:40:51.506626Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.507097Z", "completed_at": "2024-07-09T18:40:51.507102Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.24451589584350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`price_rule`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.320811Z", "completed_at": "2024-07-09T18:40:51.623185Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.623969Z", "completed_at": "2024-07-09T18:40:51.623978Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3043861389160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`product_image`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.369791Z", "completed_at": "2024-07-09T18:40:51.653430Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.654050Z", "completed_at": "2024-07-09T18:40:51.654058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2853882312774658, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`product_tag`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.432251Z", "completed_at": "2024-07-09T18:40:51.681271Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.681664Z", "completed_at": "2024-07-09T18:40:51.681668Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.25035810470581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`product`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.508814Z", "completed_at": "2024-07-09T18:40:51.792559Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.793163Z", "completed_at": "2024-07-09T18:40:51.793170Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2855868339538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`product_variant`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.683052Z", "completed_at": "2024-07-09T18:40:51.884652Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.885309Z", "completed_at": "2024-07-09T18:40:51.885316Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.20342111587524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`tax_line`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.656191Z", "completed_at": "2024-07-09T18:40:51.970846Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:51.971525Z", "completed_at": "2024-07-09T18:40:51.971532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31673216819763184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`shop`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.626804Z", "completed_at": "2024-07-09T18:40:52.003548Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.004062Z", "completed_at": "2024-07-09T18:40:52.004067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3788180351257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`refund`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.795190Z", "completed_at": "2024-07-09T18:40:52.124235Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.125042Z", "completed_at": "2024-07-09T18:40:52.125051Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.33130502700805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`tender_transaction`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.887657Z", "completed_at": "2024-07-09T18:40:52.213184Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.213859Z", "completed_at": "2024-07-09T18:40:52.213866Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3277778625488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `fivetran-data-culture-big-vv9p`.`shopify`.`transaction`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.005845Z", "completed_at": "2024-07-09T18:40:52.299653Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.300152Z", "completed_at": "2024-07-09T18:40:52.300156Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2954111099243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    integration_id\n    \n as \n    \n    integration_id\n    \n, \n    cast(null as string) as \n    \n    integration_category\n    \n , \n    cast(null as string) as \n    \n    integration_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as string ) as metric_id,\n        cast(integration_id as string ) as integration_id,\n        integration_name,\n        integration_category,\n        name as metric_name,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:51.973765Z", "completed_at": "2024-07-09T18:40:52.326153Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.326511Z", "completed_at": "2024-07-09T18:40:52.326515Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3538641929626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _variation\n    \n as \n    \n    _variation\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    datetime\n    \n as \n    \n    datetime\n    \n, \n    \n    \n    flow_id\n    \n as \n    \n    flow_id\n    \n, \n    \n    \n    flow_message_id\n    \n as \n    \n    flow_message_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metric_id\n    \n as \n    \n    metric_id\n    \n, \n    \n    \n    person_id\n    \n as \n    \n    person_id\n    \n, \n    \n    \n    timestamp\n    \n as \n    \n    timestamp\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    property_value\n    \n as \n    \n    property_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nrename as (\n    \n    select \n        _variation as variation_id,\n        cast(campaign_id as string ) as campaign_id,\n        cast(timestamp as timestamp ) as occurred_at,\n        cast(flow_id as string ) as flow_id,\n        flow_message_id,\n        cast(id as string ) as event_id,\n        cast(metric_id as string ) as metric_id,\n        cast(person_id as string ) as person_id,\n        type,\n        uuid,\n        \n\n    cast(regexp_replace(cast(property_value as string), r'[^0-9.]*', '') as numeric)\n\n as numeric_value,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        source_relation\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfinal as (\n    \n    select \n        *,\n        cast( timestamp_trunc(\n        cast(occurred_at as timestamp),\n        day\n    ) as date) as occurred_on,\n        to_hex(md5(cast(coalesce(cast(event_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id\n\n    from rename\n\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.127868Z", "completed_at": "2024-07-09T18:40:52.486791Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.487358Z", "completed_at": "2024-07-09T18:40:52.487364Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36114978790283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_type\n    \n as \n    \n    campaign_type\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email_template_id\n    \n as \n    \n    email_template_id\n    \n, \n    \n    \n    from_email\n    \n as \n    \n    from_email\n    \n, \n    \n    \n    from_name\n    \n as \n    \n    from_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    send_time\n    \n as \n    \n    send_time\n    \n, \n    \n    \n    sent_at\n    \n as \n    \n    sent_at\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_id\n    \n as \n    \n    status_id\n    \n, \n    \n    \n    status_label\n    \n as \n    \n    status_label\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    cast(null as boolean) as \n    \n    archived\n    \n , \n    cast(null as timestamp) as \n    \n    scheduled\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        campaign_type,\n        created as created_at,\n        email_template_id,\n        from_email,\n        from_name,\n        cast(id as string ) as campaign_id,\n        name as campaign_name,\n        send_time as scheduled_to_send_at,\n        sent_at,\n        coalesce(status, lower(status_label)) as status,\n        status_id,\n        subject,\n        updated as updated_at,\n        archived as is_archived,\n        scheduled as scheduled_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.327768Z", "completed_at": "2024-07-09T18:40:52.583662Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.584694Z", "completed_at": "2024-07-09T18:40:52.584701Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2581288814544678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null and index is null\n            then row_number() over(partition by source_relation order by source_relation)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.216146Z", "completed_at": "2024-07-09T18:40:52.583955Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.584952Z", "completed_at": "2024-07-09T18:40:52.584956Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3706319332122803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    cast(null as boolean) as \n    \n    archived\n    \n , \n    cast(null as string) as \n    \n    trigger_type\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as string ) as flow_id,\n        name as flow_name,\n        status,\n        updated as updated_at,\n        archived as is_archived,\n        trigger_type,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.301850Z", "completed_at": "2024-07-09T18:40:52.685113Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.685519Z", "completed_at": "2024-07-09T18:40:52.685524Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3846869468688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    delivery_expectation_range\n    \n as \n    \n    delivery_expectation_range\n    \n, \n    \n    \n    delivery_expectation_range_max\n    \n as \n    \n    delivery_expectation_range_max\n    \n, \n    \n    \n    delivery_expectation_range_min\n    \n as \n    \n    delivery_expectation_range_min\n    \n, \n    \n    \n    delivery_expectation_type\n    \n as \n    \n    delivery_expectation_type\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.489460Z", "completed_at": "2024-07-09T18:40:52.834334Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.834830Z", "completed_at": "2024-07-09T18:40:52.834836Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3467397689819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    organization\n    \n as \n    \n    organization\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    cast(null as timestamp) as \n    \n    last_event_date\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as person_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        zip,\n        created as created_at,\n        email,\n        first_name || ' ' || last_name as full_name,\n        latitude,\n        longitude,\n        organization,\n        phone_number,\n        region, -- state in USA\n        timezone,\n        title,\n        updated as updated_at,\n        last_event_date,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.590841Z", "completed_at": "2024-07-09T18:40:52.946706Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.947474Z", "completed_at": "2024-07-09T18:40:52.947480Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.36071181297302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abandoned_checkout_url\n    \n as \n    \n    abandoned_checkout_url\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_duties\n    \n as \n    \n    total_duties\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(closed_at as timestamp), 'UTC')) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        user_id,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.588078Z", "completed_at": "2024-07-09T18:40:52.946919Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:52.947669Z", "completed_at": "2024-07-09T18:40:52.947672Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.36150670051574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    collection_id\n    \n as \n    \n    collection_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.686723Z", "completed_at": "2024-07-09T18:40:53.001788Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.002123Z", "completed_at": "2024-07-09T18:40:53.002128Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.31612181663513184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    disjunctive\n    \n as \n    \n    disjunctive\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    rules\n    \n as \n    \n    rules\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        timestamp(datetime(cast(published_at as timestamp), 'UTC')) as published_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.836667Z", "completed_at": "2024-07-09T18:40:53.158762Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.159279Z", "completed_at": "2024-07-09T18:40:53.159285Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.32384276390075684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as \n    \n    accepts_marketing\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    verified_email\n    \n as \n    \n    verified_email\n    \n, \n    \n    \n    email_marketing_consent_consent_updated_at\n    \n as \n    \n    email_marketing_consent_consent_updated_at\n    \n, \n    \n    \n    email_marketing_consent_opt_in_level\n    \n as \n    \n    email_marketing_consent_opt_in_level\n    \n, \n    \n    \n    email_marketing_consent_state\n    \n as \n    \n    email_marketing_consent_state\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    accepts_marketing_updated_at\n    \n as \n    \n    accepts_marketing_updated_at\n    \n, \n    \n    \n    marketing_opt_in_level\n    \n as \n    \n    marketing_opt_in_level\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        timestamp(datetime(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp), 'UTC')) as marketing_consent_updated_at,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.950006Z", "completed_at": "2024-07-09T18:40:53.263264Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.263902Z", "completed_at": "2024-07-09T18:40:53.263909Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.31537604331970215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:52.952375Z", "completed_at": "2024-07-09T18:40:53.307195Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.307638Z", "completed_at": "2024-07-09T18:40:53.307643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35860395431518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    price_rule_id\n    \n as \n    \n    price_rule_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_count\n    \n as \n    \n    usage_count\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.003278Z", "completed_at": "2024-07-09T18:40:53.331885Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.332313Z", "completed_at": "2024-07-09T18:40:53.332318Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3298459053039551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    service\n    \n as \n    \n    service\n    \n, \n    \n    \n    shipment_status\n    \n as \n    \n    shipment_status\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tracking_company\n    \n as \n    \n    tracking_company\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    tracking_numbers\n    \n as \n    \n    tracking_numbers\n    \n, \n    \n    \n    tracking_urls\n    \n as \n    \n    tracking_urls\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.161151Z", "completed_at": "2024-07-09T18:40:53.461746Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.462314Z", "completed_at": "2024-07-09T18:40:53.462321Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.30245184898376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    country_code_of_origin\n    \n as \n    \n    country_code_of_origin\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    province_code_of_origin\n    \n as \n    \n    province_code_of_origin\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    tracked\n    \n as \n    \n    tracked\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.266259Z", "completed_at": "2024-07-09T18:40:53.557354Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.557898Z", "completed_at": "2024-07-09T18:40:53.557903Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29314088821411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    available\n    \n as \n    \n    available\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.309114Z", "completed_at": "2024-07-09T18:40:53.589911Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.590325Z", "completed_at": "2024-07-09T18:40:53.590330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28212594985961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    legacy\n    \n as \n    \n    legacy\n    \n, \n    \n    \n    localized_country_name\n    \n as \n    \n    localized_country_name\n    \n, \n    \n    \n    localized_province_name\n    \n as \n    \n    localized_province_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.333752Z", "completed_at": "2024-07-09T18:40:53.645381Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.645832Z", "completed_at": "2024-07-09T18:40:53.645838Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3130021095275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__metafield_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    namespace\n    \n as \n    \n    namespace\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    owner_resource\n    \n as \n    \n    owner_resource\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null and updated_at is null\n            then row_number() over(partition by source_relation order by source_relation) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__metafield`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.464285Z", "completed_at": "2024-07-09T18:40:53.771010Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.771593Z", "completed_at": "2024-07-09T18:40:53.771600Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.30858898162841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_adjustment_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set\n    \n as \n    \n    amount_set\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_set\n    \n as \n    \n    tax_amount_set\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_adjustment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.560046Z", "completed_at": "2024-07-09T18:40:53.862854Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.863572Z", "completed_at": "2024-07-09T18:40:53.863579Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3050649166107178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.647168Z", "completed_at": "2024-07-09T18:40:53.937799Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.938265Z", "completed_at": "2024-07-09T18:40:53.938270Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2919728755950928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as \n    \n    gift_card\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    pre_tax_price\n    \n as \n    \n    pre_tax_price\n    \n, \n    \n    \n    pre_tax_price_set\n    \n as \n    \n    pre_tax_price_set\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    \n    \n    total_discount_set\n    \n as \n    \n    total_discount_set\n    \n, \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    variant_inventory_management\n    \n as \n    \n    variant_inventory_management\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    properties\n    \n as \n    \n    properties\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.591867Z", "completed_at": "2024-07-09T18:40:53.959879Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:53.960308Z", "completed_at": "2024-07-09T18:40:53.960313Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3694472312927246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    subtotal_set\n    \n as \n    \n    subtotal_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.773619Z", "completed_at": "2024-07-09T18:40:54.023959Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.024332Z", "completed_at": "2024-07-09T18:40:54.024337Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2518439292907715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.865712Z", "completed_at": "2024-07-09T18:40:54.113808Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.114246Z", "completed_at": "2024-07-09T18:40:54.114251Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.24972295761108398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_shipping_line_id\n    \n as \n    \n    order_shipping_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.961702Z", "completed_at": "2024-07-09T18:40:54.239692Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.240361Z", "completed_at": "2024-07-09T18:40:54.240368Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2797811031341553, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:53.939848Z", "completed_at": "2024-07-09T18:40:54.290078Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.290490Z", "completed_at": "2024-07-09T18:40:54.290494Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3516552448272705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    discounted_price_set\n    \n as \n    \n    discounted_price_set\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.025581Z", "completed_at": "2024-07-09T18:40:54.394188Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.394508Z", "completed_at": "2024-07-09T18:40:54.394511Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3696458339691162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_discounts_set\n    \n as \n    \n    total_discounts_set\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_line_items_price_set\n    \n as \n    \n    total_line_items_price_set\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_price_set\n    \n as \n    \n    total_price_set\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    total_tip_received\n    \n as \n    \n    total_tip_received\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    checkout_token\n    \n as \n    \n    checkout_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    total_shipping_price_set\n    \n as \n    \n    total_shipping_price_set\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    client_details_user_agent\n    \n as \n    \n    client_details_user_agent\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    order_status_url\n    \n as \n    \n    order_status_url\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    confirmed\n    \n as \n    \n    confirmed\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(cancelled_at as timestamp), 'UTC')) as cancelled_timestamp,\n        timestamp(datetime(cast(closed_at as timestamp), 'UTC')) as closed_timestamp,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.115684Z", "completed_at": "2024-07-09T18:40:54.443184Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.443550Z", "completed_at": "2024-07-09T18:40:54.443554Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.32875490188598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.242679Z", "completed_at": "2024-07-09T18:40:54.545773Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.546163Z", "completed_at": "2024-07-09T18:40:54.546167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30471205711364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allocation_limit\n    \n as \n    \n    allocation_limit\n    \n, \n    \n    \n    allocation_method\n    \n as \n    \n    allocation_method\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    customer_selection\n    \n as \n    \n    customer_selection\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    once_per_customer\n    \n as \n    \n    once_per_customer\n    \n, \n    \n    \n    prerequisite_quantity_range\n    \n as \n    \n    prerequisite_quantity_range\n    \n, \n    \n    \n    prerequisite_shipping_price_range\n    \n as \n    \n    prerequisite_shipping_price_range\n    \n, \n    \n    \n    prerequisite_subtotal_range\n    \n as \n    \n    prerequisite_subtotal_range\n    \n, \n    \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n, \n    \n    \n    quantity_ratio_entitled_quantity\n    \n as \n    \n    quantity_ratio_entitled_quantity\n    \n, \n    \n    \n    quantity_ratio_prerequisite_quantity\n    \n as \n    \n    quantity_ratio_prerequisite_quantity\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    target_selection\n    \n as \n    \n    target_selection\n    \n, \n    \n    \n    target_type\n    \n as \n    \n    target_type\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        timestamp(datetime(cast(starts_at as timestamp), 'UTC')) as starts_at,\n        timestamp(datetime(cast(ends_at as timestamp), 'UTC')) as ends_at,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.291967Z", "completed_at": "2024-07-09T18:40:54.657476Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.657973Z", "completed_at": "2024-07-09T18:40:54.657978Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36724400520324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    height\n    \n as \n    \n    height\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    src\n    \n as \n    \n    src\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    variant_ids\n    \n as \n    \n    variant_ids\n    \n, \n    \n    \n    width\n    \n as \n    \n    width\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.395673Z", "completed_at": "2024-07-09T18:40:54.666088Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.666667Z", "completed_at": "2024-07-09T18:40:54.666671Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2718677520751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.547437Z", "completed_at": "2024-07-09T18:40:54.776036Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.776438Z", "completed_at": "2024-07-09T18:40:54.776443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22983980178833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    inventory_management\n    \n as \n    \n    inventory_management\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    old_inventory_quantity\n    \n as \n    \n    old_inventory_quantity\n    \n, \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    weight\n    \n as \n    \n    weight\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    option_1\n    \n as \n    \n    option_1\n    \n, \n    \n    \n    option_2\n    \n as \n    \n    option_2\n    \n, \n    \n    \n    option_3\n    \n as \n    \n    option_3\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.444759Z", "completed_at": "2024-07-09T18:40:54.831649Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.832050Z", "completed_at": "2024-07-09T18:40:54.832054Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.38811707496643066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(published_at as timestamp), 'UTC')) as published_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.663090Z", "completed_at": "2024-07-09T18:40:54.971670Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:54.972328Z", "completed_at": "2024-07-09T18:40:54.972335Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3103930950164795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.668213Z", "completed_at": "2024-07-09T18:40:55.051102Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.051507Z", "completed_at": "2024-07-09T18:40:55.051511Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.38417506217956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    checkout_api_supported\n    \n as \n    \n    checkout_api_supported\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cookie_consent_level\n    \n as \n    \n    cookie_consent_level\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    county_taxes\n    \n as \n    \n    county_taxes\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_email\n    \n as \n    \n    customer_email\n    \n, \n    \n    \n    domain\n    \n as \n    \n    domain\n    \n, \n    \n    \n    eligible_for_card_reader_giveaway\n    \n as \n    \n    eligible_for_card_reader_giveaway\n    \n, \n    \n    \n    eligible_for_payments\n    \n as \n    \n    eligible_for_payments\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    enabled_presentment_currencies\n    \n as \n    \n    enabled_presentment_currencies\n    \n, \n    \n    \n    google_apps_domain\n    \n as \n    \n    google_apps_domain\n    \n, \n    \n    \n    google_apps_login_enabled\n    \n as \n    \n    google_apps_login_enabled\n    \n, \n    \n    \n    has_discounts\n    \n as \n    \n    has_discounts\n    \n, \n    \n    \n    has_gift_cards\n    \n as \n    \n    has_gift_cards\n    \n, \n    \n    \n    has_storefront\n    \n as \n    \n    has_storefront\n    \n, \n    \n    \n    iana_timezone\n    \n as \n    \n    iana_timezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    money_format\n    \n as \n    \n    money_format\n    \n, \n    \n    \n    money_in_emails_format\n    \n as \n    \n    money_in_emails_format\n    \n, \n    \n    \n    money_with_currency_format\n    \n as \n    \n    money_with_currency_format\n    \n, \n    \n    \n    money_with_currency_in_emails_format\n    \n as \n    \n    money_with_currency_in_emails_format\n    \n, \n    \n    \n    myshopify_domain\n    \n as \n    \n    myshopify_domain\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    password_enabled\n    \n as \n    \n    password_enabled\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    plan_display_name\n    \n as \n    \n    plan_display_name\n    \n, \n    \n    \n    plan_name\n    \n as \n    \n    plan_name\n    \n, \n    \n    \n    pre_launch_enabled\n    \n as \n    \n    pre_launch_enabled\n    \n, \n    \n    \n    primary_locale\n    \n as \n    \n    primary_locale\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    requires_extra_payments_agreement\n    \n as \n    \n    requires_extra_payments_agreement\n    \n, \n    \n    \n    setup_required\n    \n as \n    \n    setup_required\n    \n, \n    \n    \n    shop_owner\n    \n as \n    \n    shop_owner\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    tax_shipping\n    \n as \n    \n    tax_shipping\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.052885Z", "completed_at": "2024-07-09T18:40:55.059829Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.060203Z", "completed_at": "2024-07-09T18:40:55.060207Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008213043212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metric_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\n    group by metric_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.061414Z", "completed_at": "2024-07-09T18:40:55.065337Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.065666Z", "completed_at": "2024-07-09T18:40:55.065669Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005026102066040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\nwhere metric_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.066775Z", "completed_at": "2024-07-09T18:40:55.076746Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.077084Z", "completed_at": "2024-07-09T18:40:55.077087Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011022806167602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__event_attribution", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select \n        *,\n        -- no event will be attributed to both a campaign and flow\n        coalesce(campaign_id, flow_id) as touch_id,\n        case \n            when campaign_id is not null then 'campaign' \n            when flow_id is not null then 'flow' \n        else null end as touch_type -- defintion: touch = interaction with campaign/flow\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n\n    \n    -- grab **ALL** events for users who have any events in this new increment\n    where person_id in (\n\n        select distinct person_id\n        from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n\n        -- most events (from all kinds of integrations) at least once every hour\n        -- https://help.klaviyo.com/hc/en-us/articles/115005253208\n        where _fivetran_synced >= cast(coalesce( \n            (\n                select \n\n        datetime_add(\n            cast( max(_fivetran_synced) as datetime),\n        interval -1 hour\n        )\n\n  \n                from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n            ), '2012-01-01') as timestamp ) -- klaviyo was founded in 2012, so let's default the min date to then\n    )\n    \n),\n\n-- sessionize events based on attribution eligibility -- is it the right kind of event, and does it have a campaign or flow?\ncreate_sessions as (\n    select\n        *,\n        -- default klaviyo__event_attribution_filter limits attribution-eligible events to to email opens, email clicks, and sms opens\n        -- https://help.klaviyo.com/hc/en-us/articles/115005248128\n\n        -- events that come with flow/campaign attributions (and are eligible event types) will create new sessions.\n        -- non-attributed events that come in afterward will be batched into the same attribution-session\n        sum(case when touch_id is not null\n        \n            and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n        \n            then 1 else 0 end) over (\n                partition by person_id, source_relation order by occurred_at asc rows between unbounded preceding and current row) as touch_session \n\n    from events\n\n),\n\n-- \"session start\" refers to the event in a \"touch session\" that is already attributed with a campaign or flow by Klaviyo\n-- a new event that is attributed with a campaign/flow will trigger a new session, so there will only be one already-attributed event per each session \n-- events that are missing attributions will borrow data from the event that triggered the session, if they are in the lookback window (see `attribute` CTE)\nlast_touches as (\n\n    select \n        *,\n        -- when did the touch session begin?\n        min(occurred_at) over(partition by person_id, source_relation, touch_session) as session_start_at,\n\n        -- get the kind of metric/event that triggered the attribution session, in order to decide \n        -- to use the sms or email lookback value. \n        first_value(type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row) as session_event_type\n\n    from create_sessions\n),\n\nattribute as (\n\n    select \n        *,\n        -- klaviyo uses different lookback windows for email and sms events\n        -- default email lookback = 5 days (120 hours) -> https://help.klaviyo.com/hc/en-us/articles/115005248128#conversion-tracking1\n        -- default sms lookback: 1 day (24 hours -> https://help.klaviyo.com/hc/en-us/articles/115005248128#sms-conversion-tracking7\n\n        coalesce(touch_id, -- use pre-attributed flow/campaign if provided\n            case \n            when \n\n    datetime_diff(\n        cast(occurred_at as datetime),\n        cast(session_start_at as datetime),\n        hour\n    )\n\n   <= (\n                case \n                when lower(session_event_type) like '%sms%' then 24\n                else 120 end\n            ) -- if the events fall within the lookback window, attribute\n            then first_value(touch_id) over (\n                partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)\n            else null end) as last_touch_id -- session qualified for attribution -> we will call this \"last touch\"\n\n    from last_touches \n),\n\nfinal as (\n\n    select\n        *,\n\n        -- get whether the event is attributed to a flow or campaign\n        coalesce(touch_type, first_value(touch_type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)) \n\n            as session_touch_type -- if the session events qualified for attribution, extract the type of touch they are attributed to\n\n    from attribute \n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.777860Z", "completed_at": "2024-07-09T18:40:55.077607Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.078413Z", "completed_at": "2024-07-09T18:40:55.078417Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30155110359191895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    total_duties_set\n    \n as \n    \n    total_duties_set\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.079054Z", "completed_at": "2024-07-09T18:40:55.083345Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.083687Z", "completed_at": "2024-07-09T18:40:55.083689Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0058329105377197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.081720Z", "completed_at": "2024-07-09T18:40:55.084194Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.084944Z", "completed_at": "2024-07-09T18:40:55.084947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004034996032714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.085560Z", "completed_at": "2024-07-09T18:40:55.090042Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.090436Z", "completed_at": "2024-07-09T18:40:55.090439Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006047964096069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n    group by campaign_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.087965Z", "completed_at": "2024-07-09T18:40:55.090943Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.091701Z", "completed_at": "2024-07-09T18:40:55.091703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004549264907836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.092314Z", "completed_at": "2024-07-09T18:40:55.096793Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.097144Z", "completed_at": "2024-07-09T18:40:55.097147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005983114242553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.095154Z", "completed_at": "2024-07-09T18:40:55.097639Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.098405Z", "completed_at": "2024-07-09T18:40:55.098407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004123210906982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.099144Z", "completed_at": "2024-07-09T18:40:55.103208Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.103564Z", "completed_at": "2024-07-09T18:40:55.103567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0058629512786865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n    group by flow_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.101602Z", "completed_at": "2024-07-09T18:40:55.103746Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.104549Z", "completed_at": "2024-07-09T18:40:55.104552Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0039348602294921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\nwhere flow_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.105640Z", "completed_at": "2024-07-09T18:40:55.109814Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.110349Z", "completed_at": "2024-07-09T18:40:55.110351Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006032228469848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.108026Z", "completed_at": "2024-07-09T18:40:55.110188Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.110972Z", "completed_at": "2024-07-09T18:40:55.110975Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00391077995300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.112510Z", "completed_at": "2024-07-09T18:40:55.116572Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.117145Z", "completed_at": "2024-07-09T18:40:55.117148Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0060939788818359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.121326Z", "completed_at": "2024-07-09T18:40:55.123881Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.124678Z", "completed_at": "2024-07-09T18:40:55.124681Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00849604606628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.124881Z", "completed_at": "2024-07-09T18:40:55.128077Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.130735Z", "completed_at": "2024-07-09T18:40:55.130740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006972789764404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.128283Z", "completed_at": "2024-07-09T18:40:55.131270Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.132101Z", "completed_at": "2024-07-09T18:40:55.132103Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004934787750244141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.132777Z", "completed_at": "2024-07-09T18:40:55.137642Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.137989Z", "completed_at": "2024-07-09T18:40:55.137992Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006634950637817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.135197Z", "completed_at": "2024-07-09T18:40:55.138163Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.139005Z", "completed_at": "2024-07-09T18:40:55.139007Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004761934280395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.140120Z", "completed_at": "2024-07-09T18:40:55.144005Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.144360Z", "completed_at": "2024-07-09T18:40:55.144363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005632638931274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection`\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.142362Z", "completed_at": "2024-07-09T18:40:55.144528Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.145360Z", "completed_at": "2024-07-09T18:40:55.145363Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003993034362792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection`\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.146459Z", "completed_at": "2024-07-09T18:40:55.155928Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.156633Z", "completed_at": "2024-07-09T18:40:55.156639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01151895523071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.157970Z", "completed_at": "2024-07-09T18:40:55.160343Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.164969Z", "completed_at": "2024-07-09T18:40:55.164973Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007774829864501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.833345Z", "completed_at": "2024-07-09T18:40:55.165554Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.166339Z", "completed_at": "2024-07-09T18:40:55.166343Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33395814895629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    remote_reference\n    \n as \n    \n    remote_reference\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.166973Z", "completed_at": "2024-07-09T18:40:55.171919Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.172297Z", "completed_at": "2024-07-09T18:40:55.172300Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0066759586334228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.170263Z", "completed_at": "2024-07-09T18:40:55.172466Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.173333Z", "completed_at": "2024-07-09T18:40:55.173336Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0040738582611083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.174468Z", "completed_at": "2024-07-09T18:40:55.178697Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.179217Z", "completed_at": "2024-07-09T18:40:55.179220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006162881851196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code`\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.177002Z", "completed_at": "2024-07-09T18:40:55.179041Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.179884Z", "completed_at": "2024-07-09T18:40:55.179887Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003818988800048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code`\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.181438Z", "completed_at": "2024-07-09T18:40:55.187671Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.188027Z", "completed_at": "2024-07-09T18:40:55.188030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007912874221801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.185808Z", "completed_at": "2024-07-09T18:40:55.188201Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.189048Z", "completed_at": "2024-07-09T18:40:55.189050Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008414983749389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.190127Z", "completed_at": "2024-07-09T18:40:55.194936Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.195316Z", "completed_at": "2024-07-09T18:40:55.195319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00638890266418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.192267Z", "completed_at": "2024-07-09T18:40:55.195803Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.196544Z", "completed_at": "2024-07-09T18:40:55.196547Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0051610469818115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item`\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.197157Z", "completed_at": "2024-07-09T18:40:55.201275Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.201657Z", "completed_at": "2024-07-09T18:40:55.201660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00563812255859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.199427Z", "completed_at": "2024-07-09T18:40:55.202147Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.202904Z", "completed_at": "2024-07-09T18:40:55.202907Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004355907440185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level`\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.203538Z", "completed_at": "2024-07-09T18:40:55.205802Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.207838Z", "completed_at": "2024-07-09T18:40:55.207842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005552053451538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.205987Z", "completed_at": "2024-07-09T18:40:55.208547Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.209367Z", "completed_at": "2024-07-09T18:40:55.209371Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004444122314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.210021Z", "completed_at": "2024-07-09T18:40:55.214232Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.214615Z", "completed_at": "2024-07-09T18:40:55.214618Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058100223541259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location`\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.212520Z", "completed_at": "2024-07-09T18:40:55.215119Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.215884Z", "completed_at": "2024-07-09T18:40:55.215887Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00421595573425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.216521Z", "completed_at": "2024-07-09T18:40:55.221386Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.221767Z", "completed_at": "2024-07-09T18:40:55.221769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006598234176635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__metafield`\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.219835Z", "completed_at": "2024-07-09T18:40:55.221947Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.222762Z", "completed_at": "2024-07-09T18:40:55.222765Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004754781723022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__metafield`\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.223895Z", "completed_at": "2024-07-09T18:40:55.228203Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.228566Z", "completed_at": "2024-07-09T18:40:55.228569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006105184555053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_adjustment`\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.226333Z", "completed_at": "2024-07-09T18:40:55.228738Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.229592Z", "completed_at": "2024-07-09T18:40:55.229595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004252910614013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.230673Z", "completed_at": "2024-07-09T18:40:55.234395Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.234736Z", "completed_at": "2024-07-09T18:40:55.234739Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00540614128112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.232713Z", "completed_at": "2024-07-09T18:40:55.234908Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.235715Z", "completed_at": "2024-07-09T18:40:55.235717Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0039942264556884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.236819Z", "completed_at": "2024-07-09T18:40:55.241367Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.241937Z", "completed_at": "2024-07-09T18:40:55.241940Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0065038204193115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.239555Z", "completed_at": "2024-07-09T18:40:55.241744Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.242596Z", "completed_at": "2024-07-09T18:40:55.242599Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004026889801025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.244149Z", "completed_at": "2024-07-09T18:40:55.248848Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.249185Z", "completed_at": "2024-07-09T18:40:55.249188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061800479888916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute`\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.247153Z", "completed_at": "2024-07-09T18:40:55.249680Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.250415Z", "completed_at": "2024-07-09T18:40:55.250418Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006947040557861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute`\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.251039Z", "completed_at": "2024-07-09T18:40:55.255123Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.255465Z", "completed_at": "2024-07-09T18:40:55.255468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005751132965087891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_note_attribute`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.253240Z", "completed_at": "2024-07-09T18:40:55.255634Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.256447Z", "completed_at": "2024-07-09T18:40:55.256449Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004135847091674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.257529Z", "completed_at": "2024-07-09T18:40:55.261269Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.261611Z", "completed_at": "2024-07-09T18:40:55.261614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005419015884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.259622Z", "completed_at": "2024-07-09T18:40:55.261772Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.262578Z", "completed_at": "2024-07-09T18:40:55.262581Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0039179325103759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.263626Z", "completed_at": "2024-07-09T18:40:55.268153Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.268472Z", "completed_at": "2024-07-09T18:40:55.268475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060307979583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag`\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.265768Z", "completed_at": "2024-07-09T18:40:55.269142Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.269832Z", "completed_at": "2024-07-09T18:40:55.269835Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006396055221557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.270009Z", "completed_at": "2024-07-09T18:40:55.272526Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.274591Z", "completed_at": "2024-07-09T18:40:55.274594Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005568027496337891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.276671Z", "completed_at": "2024-07-09T18:40:55.280187Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.280526Z", "completed_at": "2024-07-09T18:40:55.280528Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052149295806884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.278564Z", "completed_at": "2024-07-09T18:40:55.280702Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.281516Z", "completed_at": "2024-07-09T18:40:55.281519Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005621910095214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line`\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.282582Z", "completed_at": "2024-07-09T18:40:55.286676Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.287037Z", "completed_at": "2024-07-09T18:40:55.287040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058040618896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.284789Z", "completed_at": "2024-07-09T18:40:55.287206Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.288049Z", "completed_at": "2024-07-09T18:40:55.288051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0042841434478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag`\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.289151Z", "completed_at": "2024-07-09T18:40:55.293545Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.293887Z", "completed_at": "2024-07-09T18:40:55.293889Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061190128326416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag`\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.291905Z", "completed_at": "2024-07-09T18:40:55.294049Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.294870Z", "completed_at": "2024-07-09T18:40:55.294873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003968000411987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.295978Z", "completed_at": "2024-07-09T18:40:55.300523Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.300862Z", "completed_at": "2024-07-09T18:40:55.300864Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006276130676269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.298572Z", "completed_at": "2024-07-09T18:40:55.301027Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.301857Z", "completed_at": "2024-07-09T18:40:55.301859Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0042798519134521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.302952Z", "completed_at": "2024-07-09T18:40:55.306900Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.307428Z", "completed_at": "2024-07-09T18:40:55.307431Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005819082260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.305267Z", "completed_at": "2024-07-09T18:40:55.307253Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.308071Z", "completed_at": "2024-07-09T18:40:55.308073Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0037577152252197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.309624Z", "completed_at": "2024-07-09T18:40:55.314089Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.314448Z", "completed_at": "2024-07-09T18:40:55.314450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006165742874145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__product_id__source_relation.ab95cde6f9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image`\n    group by product_image_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.311730Z", "completed_at": "2024-07-09T18:40:55.314631Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.315487Z", "completed_at": "2024-07-09T18:40:55.315490Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00669097900390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image`\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.316620Z", "completed_at": "2024-07-09T18:40:55.320363Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.320716Z", "completed_at": "2024-07-09T18:40:55.320719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00534820556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.318771Z", "completed_at": "2024-07-09T18:40:55.321236Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.321956Z", "completed_at": "2024-07-09T18:40:55.321959Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004090785980224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.322609Z", "completed_at": "2024-07-09T18:40:55.326733Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.327078Z", "completed_at": "2024-07-09T18:40:55.327080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056438446044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.324853Z", "completed_at": "2024-07-09T18:40:55.327714Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.328463Z", "completed_at": "2024-07-09T18:40:55.328465Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007875680923461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.333319Z", "completed_at": "2024-07-09T18:40:55.338383Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.338732Z", "completed_at": "2024-07-09T18:40:55.338735Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0062999725341796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.335986Z", "completed_at": "2024-07-09T18:40:55.339245Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.339980Z", "completed_at": "2024-07-09T18:40:55.339983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004879951477050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line`\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.340609Z", "completed_at": "2024-07-09T18:40:55.344708Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.345065Z", "completed_at": "2024-07-09T18:40:55.345067Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0056149959564208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop`\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.343128Z", "completed_at": "2024-07-09T18:40:55.345554Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.346297Z", "completed_at": "2024-07-09T18:40:55.346299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003981113433837891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop`\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.358071Z", "completed_at": "2024-07-09T18:40:55.360234Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.360537Z", "completed_at": "2024-07-09T18:40:55.360540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003294229507446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.361601Z", "completed_at": "2024-07-09T18:40:55.363318Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.363607Z", "completed_at": "2024-07-09T18:40:55.363610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0026962757110595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.367338Z", "completed_at": "2024-07-09T18:40:55.370066Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.370384Z", "completed_at": "2024-07-09T18:40:55.370388Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003731966018676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.371483Z", "completed_at": "2024-07-09T18:40:55.374518Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.374877Z", "completed_at": "2024-07-09T18:40:55.374880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004086017608642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.375955Z", "completed_at": "2024-07-09T18:40:55.378015Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.378427Z", "completed_at": "2024-07-09T18:40:55.378429Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003161907196044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.379492Z", "completed_at": "2024-07-09T18:40:55.381138Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.381452Z", "completed_at": "2024-07-09T18:40:55.381455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002624988555908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction`\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.382477Z", "completed_at": "2024-07-09T18:40:55.400581Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.401198Z", "completed_at": "2024-07-09T18:40:55.401202Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019565105438232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n\n), tax as (\n\n    select\n        *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line`\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:54.974425Z", "completed_at": "2024-07-09T18:40:55.400750Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.401363Z", "completed_at": "2024-07-09T18:40:55.401366Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.42833828926086426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction_tmp`\n\n),\n\nfields as (\n\n    select\n\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    authorization_expires_at\n    \n as \n    \n    authorization_expires_at\n    \n, \n    \n    \n    authorization\n    \n as authorization_code \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_timestamp,\n        timestamp(datetime(cast(authorization_expires_at as timestamp), 'UTC')) as authorization_expires_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.403379Z", "completed_at": "2024-07-09T18:40:55.408240Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.408774Z", "completed_at": "2024-07-09T18:40:55.408777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006620883941650391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.405826Z", "completed_at": "2024-07-09T18:40:55.408586Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.409454Z", "completed_at": "2024-07-09T18:40:55.409458Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007101774215698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`\n), \n\ncollection_product as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`\n),\n\ncollection as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection`\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct_image as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image`\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.423892Z", "completed_at": "2024-07-09T18:40:55.437769Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.438651Z", "completed_at": "2024-07-09T18:40:55.438655Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028431177139282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as string), '_dbt_utils_surrogate_key_null_') as string))) as order_lines_unique_key\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n\n    \n\n), product_variants as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    string_agg(distinct cast(refunds.restock_type as string), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tax_line`\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.439739Z", "completed_at": "2024-07-09T18:40:55.466607Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.466950Z", "completed_at": "2024-07-09T18:40:55.466953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02839970588684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as string), '_dbt_utils_surrogate_key_null_') as string))) as orders_unique_key\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n\n    \n\n), order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n\n), order_adjustments as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_adjustment`\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as order_tags\n    \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_tag`\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as order_url_tags\n    \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_url_tag`\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    string_agg(distinct cast(service as string), ', ')\n\n as fulfillment_services,\n        \n    string_agg(distinct cast(tracking_company as string), ', ')\n\n as tracking_companies,\n        \n    string_agg(distinct cast(tracking_number as string), ', ')\n\n as tracking_numbers\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n \n  json_extract_scalar(total_shipping_price_set, '$.shop_money.amount')\n\n as FLOAT64) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.464791Z", "completed_at": "2024-07-09T18:40:55.467423Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.468260Z", "completed_at": "2024-07-09T18:40:55.468263Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010111808776855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.468884Z", "completed_at": "2024-07-09T18:40:55.480371Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.480710Z", "completed_at": "2024-07-09T18:40:55.480712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013014078140258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__line_item_enhanced", "compiled": true, "compiled_code": "with line_items as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n\n), orders as ( \n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n\n), product as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction`\n    where kind = 'capture'\n\n), refund_transactions as (\n\n    select\n        order_id,\n        sum(amount) as total_order_refund_amount\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction`\n    where kind = 'refund' \n    group by 1\n\n), order_line_refund as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n\n), enhanced as (\n\n    select\n        li.order_id as header_id,\n        li.order_line_id as line_item_id,\n        li.index as line_item_index,\n        o.created_timestamp as created_at,\n        o.currency as currency,\n        li.fulfillment_status as header_status,\n        li.product_id as product_id,\n        p.title as product_name,\n        t.kind as transaction_type,\n        null as billing_type,\n        p.product_type as product_type,\n        li.quantity as quantity,\n        li.price as unit_amount,\n        o.total_discounts as discount_amount,\n        o.total_tax as tax_amount,\n        (li.quantity*li.price) as total_amount,\n        t.transaction_id as payment_id,\n        null as payment_method_id,\n        t.gateway as payment_method, -- payment_method in tender_transaction would be like 'apply_pay', where gateway is like 'gift card' or 'shopify payments' which i think is more relevant here\n        t.processed_timestamp as payment_at,\n        null as fee_amount,\n        rt.total_order_refund_amount as refund_amount,\n        null as subscription_id,\n        null as subscription_period_started_at,\n        null as subscription_period_ended_at,\n        null as subscription_status,\n        o.customer_id,\n        'customer' as customer_level,\n        c.first_name || '' || c.last_name as customer_name,\n        o.shipping_address_company as customer_company,\n        o.email as customer_email,\n        o.shipping_address_city as customer_city,\n        o.shipping_address_country as customer_country\n    from line_items li\n    left join orders o\n        on li.order_id = o.order_id\n    left join transactions t\n        on o.order_id = t.order_id\n    left join refund_transactions rt\n        on o.order_id = rt.order_id\n    left join order_line_refund olr\n        on li.order_line_id = olr.order_line_id\n    left join product p \n        on li.product_id = p.product_id\n    left join customer c\n        on o.customer_id = c.customer_id\n        \n), final as (\n\n    select \n        header_id,\n        cast(line_item_id as numeric) as line_item_id,\n        cast(line_item_index as numeric) as line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        billing_type,\n        cast(product_id as numeric) as product_id,\n        product_name,\n        product_type,\n        cast(quantity as numeric) as quantity,\n        cast(unit_amount as numeric) as unit_amount,\n        cast(null as numeric) as discount_amount,\n        cast(null as numeric) as tax_amount,\n        cast(total_amount as numeric) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        cast(null as numeric) as refund_amount,\n        subscription_id,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    select \n        header_id,\n        cast(null as numeric) as line_item_id,\n        cast(0 as numeric) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        billing_type,\n        cast(null as numeric) as product_id,\n        cast(null as string) as product_name,\n        cast(null as string) as product_type,\n        cast(null as numeric) as quantity,\n        cast(null as numeric) as unit_amount,\n        discount_amount,\n        tax_amount,\n        cast(null as numeric) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where line_item_index = 1 -- filter to just one arbitrary record\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__line_item_enhanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.476352Z", "completed_at": "2024-07-09T18:40:55.481206Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.482110Z", "completed_at": "2024-07-09T18:40:55.482113Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006887197494506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as string), '_dbt_utils_surrogate_key_null_') as string))) as transactions_unique_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction`\n\n    \n\n), tender_transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__tender_transaction`\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as numeric ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as numeric ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.483333Z", "completed_at": "2024-07-09T18:40:55.491545Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.503032Z", "completed_at": "2024-07-09T18:40:55.503037Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021832942962646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__transaction`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.149038Z", "completed_at": "2024-07-09T18:40:55.491748Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.503233Z", "completed_at": "2024-07-09T18:40:55.503236Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3555130958557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    string_agg(distinct cast(customers.customer_id as string), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(customers.phone as string), ', ')\n\n as phone_numbers,\n        \n    string_agg(distinct cast(customer_tags.value as string), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    max( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    max( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`int_shopify__customer_email_rollup`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.485725Z", "completed_at": "2024-07-09T18:40:55.503790Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.505087Z", "completed_at": "2024-07-09T18:40:55.505091Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020533084869384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n),\n\nfulfillment as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_level`\n), \n\ninventory_item as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__inventory_item`\n),\n\nlocation as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__location`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__inventory_levels`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.506156Z", "completed_at": "2024-07-09T18:40:55.514100Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.514996Z", "completed_at": "2024-07-09T18:40:55.514999Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01080775260925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_line`\n),\n\nfulfillment as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__fulfillment`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.509457Z", "completed_at": "2024-07-09T18:40:55.514317Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.515179Z", "completed_at": "2024-07-09T18:40:55.515182Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010747909545898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\nwhere order_lines_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.511667Z", "completed_at": "2024-07-09T18:40:55.514810Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.516218Z", "completed_at": "2024-07-09T18:40:55.516220Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005686044692993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_lines_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\n  where order_lines_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.526139Z", "completed_at": "2024-07-09T18:40:55.567117Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.568701Z", "completed_at": "2024-07-09T18:40:55.568706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04539799690246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\nwhere orders_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.527967Z", "completed_at": "2024-07-09T18:40:55.569403Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.575498Z", "completed_at": "2024-07-09T18:40:55.575502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.053275108337402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select orders_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n  where orders_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.583322Z", "completed_at": "2024-07-09T18:40:55.593343Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.601705Z", "completed_at": "2024-07-09T18:40:55.601710Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02514815330505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\nwhere transactions_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.590730Z", "completed_at": "2024-07-09T18:40:55.602239Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.603174Z", "completed_at": "2024-07-09T18:40:55.603177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017209768295288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select transactions_unique_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\n  where transactions_unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.530293Z", "completed_at": "2024-07-09T18:40:55.602763Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.603901Z", "completed_at": "2024-07-09T18:40:55.603904Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08099007606506348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id.e7b0276085", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__line_item_enhanced`\n    group by header_id, line_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.611545Z", "completed_at": "2024-07-09T18:40:55.614567Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.617116Z", "completed_at": "2024-07-09T18:40:55.617119Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010010242462158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`int_shopify__customer_email_rollup`\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.614748Z", "completed_at": "2024-07-09T18:40:55.617444Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.619874Z", "completed_at": "2024-07-09T18:40:55.619877Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0070362091064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__inventory_levels`\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.617962Z", "completed_at": "2024-07-09T18:40:55.620343Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.622969Z", "completed_at": "2024-07-09T18:40:55.622972Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0067179203033447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__inventory_levels`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.621322Z", "completed_at": "2024-07-09T18:40:55.624079Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.638335Z", "completed_at": "2024-07-09T18:40:55.638339Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02116703987121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__inventory_levels`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.624264Z", "completed_at": "2024-07-09T18:40:55.638513Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.641829Z", "completed_at": "2024-07-09T18:40:55.641832Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019411087036132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as string), '_dbt_utils_surrogate_key_null_') as string))) as discounts_unique_key\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__discount_code`\n\n    \n),\n\nprice_rule as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__price_rule`\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__discounts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.638696Z", "completed_at": "2024-07-09T18:40:55.641998Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.643288Z", "completed_at": "2024-07-09T18:40:55.643291Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02119302749633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order_discount_code`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.643589Z", "completed_at": "2024-07-09T18:40:55.664296Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.665246Z", "completed_at": "2024-07-09T18:40:55.665249Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025888919830322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(timestamp_trunc(\n        cast(orders.created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n), shop as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__shop`\n),\n\ncalendar as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\n\nshop_calendar as (\n\n    select\n        cast(timestamp_trunc(\n        cast(calendar.date_day as timestamp),\n        day\n    ) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__daily_shop`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.659435Z", "completed_at": "2024-07-09T18:40:55.665074Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.668300Z", "completed_at": "2024-07-09T18:40:55.668304Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010524988174438477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product`\n), \n\ncollection_product as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection_product`\n),\n\ncollection as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__collection`\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_tag`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct_image as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__product_image`\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__products`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.665422Z", "completed_at": "2024-07-09T18:40:55.668667Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.670059Z", "completed_at": "2024-07-09T18:40:55.670062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008099079132080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.673393Z", "completed_at": "2024-07-09T18:40:55.678474Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.678929Z", "completed_at": "2024-07-09T18:40:55.678933Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009076833724975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.680085Z", "completed_at": "2024-07-09T18:40:55.682596Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.682914Z", "completed_at": "2024-07-09T18:40:55.682917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0034749507904052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.683892Z", "completed_at": "2024-07-09T18:40:55.686461Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.686756Z", "completed_at": "2024-07-09T18:40:55.686758Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0034949779510498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__discounts`\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.687722Z", "completed_at": "2024-07-09T18:40:55.689369Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.689655Z", "completed_at": "2024-07-09T18:40:55.689657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025479793548583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__discounts`\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.690758Z", "completed_at": "2024-07-09T18:40:55.692411Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.692720Z", "completed_at": "2024-07-09T18:40:55.692722Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0026187896728515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__discounts`\nwhere discounts_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.693708Z", "completed_at": "2024-07-09T18:40:55.695371Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.695745Z", "completed_at": "2024-07-09T18:40:55.695747Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00269317626953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select discounts_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__discounts`\n  where discounts_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.696792Z", "completed_at": "2024-07-09T18:40:55.698519Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.698822Z", "completed_at": "2024-07-09T18:40:55.698825Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002701997756958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__daily_shop`\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.699951Z", "completed_at": "2024-07-09T18:40:55.701751Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.702077Z", "completed_at": "2024-07-09T18:40:55.702080Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0029060840606689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__products`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.346894Z", "completed_at": "2024-07-09T18:40:55.825279Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.825884Z", "completed_at": "2024-07-09T18:40:55.825890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4803900718688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__events", "compiled": true, "compiled_code": "\n-- ^ the incremental strategy is split into delete+insert for snowflake since there is a bit of\n-- overlap in transformed data blocks for incremental runs (we look back an extra hour, see lines 23 - 30)\n-- this configuration solution was taken from https://docs.getdbt.com/reference/resource-configs/snowflake-configs#merge-behavior-incremental-models\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n\n    \n\n    -- most events (from all kinds of integrations) at least once every hour\n    where _fivetran_synced >= cast(coalesce( \n            (\n                select \n\n        datetime_add(\n            cast( max(_fivetran_synced) as datetime),\n        interval -1 hour\n        )\n\n  \n                from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n            ), '2012-01-01') as timestamp ) -- klaviyo was founded in 2012, so let's default the min date to then\n    \n),\n\nevent_fields as (\n\n    -- excluding some fields to rename them and/or make them null if needed\n    \n    -- as of the patch release of dbt-utils v0.7.3, the snowflake uppercasing is not needed anymore so we have deleted the snowflake conditional in the exclusion\n\n    select \n        `variation_id`,\n  `campaign_id`,\n  `occurred_at`,\n  `flow_id`,\n  `flow_message_id`,\n  `event_id`,\n  `metric_id`,\n  `person_id`,\n  `uuid`,\n  `numeric_value`,\n  `_fivetran_synced`,\n  `source_relation`,\n  `occurred_on`,\n  `unique_event_id`,\n  `touch_id`,\n  `touch_type`,\n\n        type, -- need to pull this out because it gets removed by dbt_utils.star, due to being a substring of 'session_event_type' and 'session_touch_type'\n\n        -- split out campaign and flow IDs\n        case \n            when session_touch_type = 'campaign' then last_touch_id \n        else null end as last_touch_campaign_id,\n        case \n            when session_touch_type = 'flow' then last_touch_id \n        else null end as last_touch_flow_id,\n\n        -- only make these non-null if the event indeed qualified for attribution\n        case \n            when last_touch_id is not null then session_start_at \n        else null end as last_touch_at,\n        case \n            when last_touch_id is not null then session_event_type \n        else null end as last_touch_event_type,\n        case \n            when last_touch_id is not null then session_touch_type \n        else null end as last_touch_type -- flow vs campaign\n\n    \n    from events\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\nflow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nperson as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n),\n\n-- just pulling this to join with INTEGRATION\nmetric as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\n),\n\njoin_fields as (\n\n    select\n        event_fields.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.subject as campaign_subject_line,\n        flow.flow_name, \n        person.city as person_city,\n        person.country as person_country,\n        person.region as person_region,\n        person.email as person_email,\n        person.timezone as person_timezone,\n        metric.integration_id,\n        metric.integration_name,\n        metric.integration_category\n\n    from event_fields\n    left join campaign on (\n      event_fields.last_touch_campaign_id = campaign.campaign_id\n      and\n      event_fields.source_relation = campaign.source_relation\n    )\n    left join flow on (\n      event_fields.last_touch_flow_id = flow.flow_id\n      and\n      event_fields.source_relation = flow.source_relation  \n    )\n    left join person on (\n      event_fields.person_id = person.person_id\n      and\n      event_fields.source_relation = person.source_relation\n    )\n    left join metric on (\n      event_fields.metric_id = metric.metric_id\n      and\n      event_fields.source_relation = metric.source_relation\n    )\n)\n\nselect * from join_fields", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.829225Z", "completed_at": "2024-07-09T18:40:55.842735Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.843499Z", "completed_at": "2024-07-09T18:40:55.843503Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01648426055908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__person_campaign_flow", "compiled": true, "compiled_code": "with events as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n),\n\npivot_out_events as (\n    \n    select \n        person_id,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom pivot_out_events", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.836184Z", "completed_at": "2024-07-09T18:40:55.843245Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.844422Z", "completed_at": "2024-07-09T18:40:55.844426Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016932010650634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "compiled": true, "compiled_code": "with events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n\n), pivot_out_events as (\n    \n    select \n        cast( timestamp_trunc(\n        cast(occurred_at as timestamp),\n        day\n    ) as date) as date_day,\n        person_email as email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        campaign_subject_line,\n        campaign_type,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\n-- the grain will be person-flow-campaign-variation-day\nselect *\nfrom pivot_out_events", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__daily_klaviyo_user_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.846565Z", "completed_at": "2024-07-09T18:40:55.851562Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.852044Z", "completed_at": "2024-07-09T18:40:55.852048Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007244110107421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.849408Z", "completed_at": "2024-07-09T18:40:55.852257Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.853358Z", "completed_at": "2024-07-09T18:40:55.853361Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0077779293060302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.670504Z", "completed_at": "2024-07-09T18:40:55.931317Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.931662Z", "completed_at": "2024-07-09T18:40:55.931666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.26276087760925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        `email`,\n  `source_relation`,\n  `customer_ids`,\n  `phone_numbers`,\n  `customer_tags`,\n  `first_account_created_at`,\n  `last_account_created_at`,\n  `last_updated_at`,\n  `marketing_consent_updated_at`,\n  `last_fivetran_synced`,\n  `is_tax_exempt`,\n  `is_verified_email`,\n  `first_name`,\n  `last_name`,\n  `default_address_id`,\n  `account_state`,\n  `note`,\n  `currency`,\n  `marketing_consent_state`,\n  `marketing_opt_in_level`\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`int_shopify__customer_email_rollup`\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_emails`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.676407Z", "completed_at": "2024-07-09T18:40:55.981630Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.981986Z", "completed_at": "2024-07-09T18:40:55.981989Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30634427070617676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__order`\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer_tag`\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        `customer_id`,\n  `email`,\n  `first_name`,\n  `last_name`,\n  `default_address_id`,\n  `phone`,\n  `account_state`,\n  `is_tax_exempt`,\n  `is_verified_email`,\n  `note`,\n  `currency`,\n  `marketing_consent_state`,\n  `marketing_opt_in_level`,\n  `marketing_consent_updated_at`,\n  `created_timestamp`,\n  `updated_timestamp`,\n  `_fivetran_synced`,\n  `source_relation`\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__customer`\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from `dbt-package-testing`.`zz_dbt_renee_stg_shopify`.`stg_shopify__abandoned_checkout`\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customers`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.983224Z", "completed_at": "2024-07-09T18:40:55.985809Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:55.986124Z", "completed_at": "2024-07-09T18:40:55.986127Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003648042678833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n    group by person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.854637Z", "completed_at": "2024-07-09T18:40:56.167667Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.168618Z", "completed_at": "2024-07-09T18:40:56.168627Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3158857822418213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "compiled": true, "compiled_code": "\n\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n    -- just grab new + newly updated orders\n    \n        where updated_timestamp >= (select max(updated_timestamp) from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`)\n    \n\n), events as (\n\n    select \n        *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n\n    where \n        coalesce(last_touch_campaign_id, last_touch_flow_id) is not null\n    \n        and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n    \n\n    -- only grab the events for users who are in the new increment of orders\n    \n        and lower(person_email) in (select distinct lower(email) from orders)\n    \n\n), join_orders_w_events as (\n\n    select \n        orders.*,\n        events.last_touch_campaign_id,\n        events.last_touch_flow_id,\n        events.variation_id as last_touch_variation_id,\n        events.campaign_name as last_touch_campaign_name,\n        events.campaign_subject_line as last_touch_campaign_subject_line,\n        events.flow_name as last_touch_flow_name,\n        events.campaign_type as last_touch_campaign_type,\n        events.event_id as last_touch_event_id,\n        events.occurred_at as last_touch_event_occurred_at,\n        events.type as last_touch_event_type,\n        events.integration_id as last_touch_integration_id,\n        events.integration_name as last_touch_integration_name,\n        events.integration_category as last_touch_integration_category,\n        events.source_relation as klaviyo_source_relation\n\n    from orders \n    left join events on \n        lower(orders.email) = lower(events.person_email)\n        and \n\n    datetime_diff(\n        cast(orders.created_timestamp as datetime),\n        cast(events.occurred_at as datetime),\n        hour\n    )\n\n   <= (\n            case when events.type like '%sms%' then 24\n            else 120 end)\n        and orders.created_timestamp > events.occurred_at\n\n), order_events as (\n\n    select\n        *,\n        row_number() over (partition by order_id order by last_touch_event_occurred_at desc) as event_index,\n\n        -- the order was made after X interactions with campaign/flow\n        count(last_touch_event_id) over (partition by order_id, last_touch_campaign_id) as count_interactions_with_campaign,\n        count(last_touch_event_id) over (partition by order_id, last_touch_flow_id) as count_interactions_with_flow\n\n\n    from join_orders_w_events\n\n), last_touches as (\n\n    select \n        `order_id`,\n  `user_id`,\n  `total_discounts`,\n  `total_discounts_set`,\n  `total_line_items_price`,\n  `total_line_items_price_set`,\n  `total_price`,\n  `total_price_set`,\n  `total_tax_set`,\n  `total_tax`,\n  `source_name`,\n  `subtotal_price`,\n  `has_taxes_included`,\n  `total_weight`,\n  `total_tip_received`,\n  `landing_site_base_url`,\n  `location_id`,\n  `name`,\n  `note`,\n  `number`,\n  `order_number`,\n  `cancel_reason`,\n  `cart_token`,\n  `checkout_token`,\n  `created_timestamp`,\n  `cancelled_timestamp`,\n  `closed_timestamp`,\n  `processed_timestamp`,\n  `updated_timestamp`,\n  `currency`,\n  `customer_id`,\n  `email`,\n  `financial_status`,\n  `fulfillment_status`,\n  `referring_site`,\n  `billing_address_address_1`,\n  `billing_address_address_2`,\n  `billing_address_city`,\n  `billing_address_company`,\n  `billing_address_country`,\n  `billing_address_country_code`,\n  `billing_address_first_name`,\n  `billing_address_last_name`,\n  `billing_address_latitude`,\n  `billing_address_longitude`,\n  `billing_address_name`,\n  `billing_address_phone`,\n  `billing_address_province`,\n  `billing_address_province_code`,\n  `billing_address_zip`,\n  `browser_ip`,\n  `total_shipping_price_set`,\n  `shipping_address_address_1`,\n  `shipping_address_address_2`,\n  `shipping_address_city`,\n  `shipping_address_company`,\n  `shipping_address_country`,\n  `shipping_address_country_code`,\n  `shipping_address_first_name`,\n  `shipping_address_last_name`,\n  `shipping_address_latitude`,\n  `shipping_address_longitude`,\n  `shipping_address_name`,\n  `shipping_address_phone`,\n  `shipping_address_province`,\n  `shipping_address_province_code`,\n  `shipping_address_zip`,\n  `token`,\n  `app_id`,\n  `checkout_id`,\n  `client_details_user_agent`,\n  `customer_locale`,\n  `order_status_url`,\n  `presentment_currency`,\n  `is_test_order`,\n  `is_deleted`,\n  `has_buyer_accepted_marketing`,\n  `is_confirmed`,\n  `_fivetran_synced`,\n  `orders_unique_key`,\n  `shipping_cost`,\n  `order_adjustment_amount`,\n  `order_adjustment_tax_amount`,\n  `refund_subtotal`,\n  `refund_total_tax`,\n  `order_adjusted_total`,\n  `line_item_count`,\n  `shipping_discount_amount`,\n  `percentage_calc_discount_amount`,\n  `fixed_amount_discount_amount`,\n  `count_discount_codes_applied`,\n  `order_total_shipping_tax`,\n  `order_tags`,\n  `order_url_tags`,\n  `number_of_fulfillments`,\n  `fulfillment_services`,\n  `tracking_companies`,\n  `tracking_numbers`,\n  `customer_order_seq_number`,\n  `new_vs_repeat`,\n        last_touch_campaign_id is not null or last_touch_flow_id is not null as is_attributed,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_variation_id,\n        last_touch_campaign_name,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        last_touch_flow_name,\n        case when last_touch_campaign_id is not null then count_interactions_with_campaign else null end as count_interactions_with_campaign, -- will be null if it's associated with a flow\n        count_interactions_with_flow, -- will be null if it's associated with a campaign\n        last_touch_event_id,\n        last_touch_event_occurred_at,\n        last_touch_event_type,\n        last_touch_integration_name,\n        last_touch_integration_category,\n        source_relation as shopify_source_relation,\n        klaviyo_source_relation,\n        to_hex(md5(cast(coalesce(cast(order_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_order_key\n\n    from order_events\n    where event_index = 1\n)\n\nselect *\nfrom last_touches", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.171561Z", "completed_at": "2024-07-09T18:40:56.176067Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.176723Z", "completed_at": "2024-07-09T18:40:56.176729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006908893585205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_emails`\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.860015Z", "completed_at": "2024-07-09T18:40:56.188696Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.189567Z", "completed_at": "2024-07-09T18:40:56.189572Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3307967185974121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__campaign_flow_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\n-- aggregating to the campaign/flow - variation level. so a flow with A/B versions will have 2 rows\nagg_metrics as (\n\n    select\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        variation_id,\n        source_relation,\n        count(distinct person_id) as total_count_unique_people,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_refunded_order ) as sum_revenue_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_placed_order ) as sum_revenue_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_ordered_product ) as sum_revenue_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_checkout_started ) as sum_revenue_checkout_started\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_cancelled_order ) as sum_revenue_cancelled_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_active_on_site ) as count_active_on_site\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_active_on_site > 0 then 1 else 0 end) as unique_count_active_on_site\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_viewed_product ) as count_viewed_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_viewed_product > 0 then 1 else 0 end) as unique_count_viewed_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_ordered_product ) as count_ordered_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_ordered_product > 0 then 1 else 0 end) as unique_count_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_placed_order ) as count_placed_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_placed_order > 0 then 1 else 0 end) as unique_count_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_refunded_order ) as count_refunded_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_refunded_order > 0 then 1 else 0 end) as unique_count_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_email ) as count_received_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_email > 0 then 1 else 0 end) as unique_count_received_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_email ) as count_clicked_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_email > 0 then 1 else 0 end) as unique_count_clicked_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_opened_email ) as count_opened_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_opened_email > 0 then 1 else 0 end) as unique_count_opened_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_marked_email_as_spam ) as count_marked_email_as_spam\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_marked_email_as_spam > 0 then 1 else 0 end) as unique_count_marked_email_as_spam\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed ) as count_unsubscribed\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed > 0 then 1 else 0 end) as unique_count_unsubscribed\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_sms ) as count_received_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_sms > 0 then 1 else 0 end) as unique_count_received_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_sms ) as count_clicked_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_sms > 0 then 1 else 0 end) as unique_count_clicked_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_sent_sms ) as count_sent_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_sent_sms > 0 then 1 else 0 end) as unique_count_sent_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed_from_sms ) as count_unsubscribed_from_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed_from_sms > 0 then 1 else 0 end) as unique_count_unsubscribed_from_sms\n\n        \n        from person_campaign_flow\n    group by 1,2,3,4\n)\n\nselect * from agg_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.191289Z", "completed_at": "2024-07-09T18:40:56.195397Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.195908Z", "completed_at": "2024-07-09T18:40:56.195912Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00569605827331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customers`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.197641Z", "completed_at": "2024-07-09T18:40:56.201770Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.202296Z", "completed_at": "2024-07-09T18:40:56.202300Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005607128143310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "compiled": true, "compiled_code": "with orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`\n\n), order_lines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__order_lines`\n\n), order_line_metrics as (\n\n    select \n        order_id,\n        source_relation,\n        count(distinct product_id) as count_products,\n        count(distinct product_id || '-' || variant_id) as count_product_variants,\n        sum(quantity) as sum_quantity\n        \n    from order_lines\n    group by 1,2\n\n), join_orders as (\n\n    select \n        orders.*,\n        order_line_metrics.count_products,\n        order_line_metrics.count_product_variants,\n        order_line_metrics.sum_quantity\n\n    from orders \n    left join order_line_metrics\n        on orders.order_id = order_line_metrics.order_id\n        and orders.shopify_source_relation = order_line_metrics.source_relation\n\n), daily_order_metrics as (\n\n    select\n        cast( timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_campaign_name,\n        last_touch_flow_name,\n        last_touch_variation_id,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        shopify_source_relation as source_relation,\n\n        count(distinct order_id) as total_orders,\n        sum(order_adjusted_total) as total_price,\n\n        sum(line_item_count) as count_line_items,\n        sum(total_line_items_price) as total_line_items_price,\n        \n\n        sum(total_discounts) as total_discounts,\n        sum(total_tax) as total_tax,\n        sum(shipping_cost) as total_shipping_cost,\n\n        \n        sum(refund_subtotal) as total_refund_subtotal,\n        sum(refund_total_tax) as total_refund_tax,\n        \n\n        sum(case when cancelled_timestamp is not null then 1 else 0 end) as count_cancelled_orders,\n        sum(count_products) as count_products,\n        sum(count_product_variants) as count_product_variants,\n        sum(sum_quantity) as sum_quantity\n\n        \n        , sum(order_adjustment_amount) as total_order_adjustment_amount\n        , sum(order_adjustment_tax_amount) as total_order_adjustment_tax_amount\n        \n        \n\n    from join_orders\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect *\nfrom daily_order_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__daily_shopify_customer_orders`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.203762Z", "completed_at": "2024-07-09T18:40:56.206476Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.206882Z", "completed_at": "2024-07-09T18:40:56.206886Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004023075103759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, shopify_source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`\n    group by order_id, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.932805Z", "completed_at": "2024-07-09T18:40:56.431365Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.434542Z", "completed_at": "2024-07-09T18:40:56.434574Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5042619705200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__person_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\nagg_metrics as (\n\n    select\n        person_id,\n        source_relation,\n        count(distinct last_touch_campaign_id) as count_total_campaigns,\n        count(distinct last_touch_flow_id) as count_total_flows,\n        min(first_event_at) as first_event_at, -- first ever event occurred at\n        max(last_event_at) as last_event_at, -- last ever event occurred at\n        min(distinct case when last_touch_campaign_id is not null then first_event_at end) as first_campaign_touch_at,\n        max(distinct case when last_touch_campaign_id is not null then last_event_at end) as last_campaign_touch_at,\n        min(distinct case when last_touch_flow_id is not null then first_event_at end) as first_flow_touch_at,\n        max(distinct case when last_touch_flow_id is not null then last_event_at end) as last_flow_touch_at\n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_refunded_order ) as total_sum_revenue_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_refunded_order else 0 end ) as organic_sum_revenue_refunded_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_placed_order ) as total_sum_revenue_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_placed_order else 0 end ) as organic_sum_revenue_placed_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_ordered_product ) as total_sum_revenue_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_ordered_product else 0 end ) as organic_sum_revenue_ordered_product\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_checkout_started ) as total_sum_revenue_checkout_started\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_checkout_started else 0 end ) as organic_sum_revenue_checkout_started\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_cancelled_order ) as total_sum_revenue_cancelled_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_cancelled_order else 0 end ) as organic_sum_revenue_cancelled_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_active_on_site ) as total_count_active_on_site\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_viewed_product ) as total_count_viewed_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_ordered_product ) as total_count_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_placed_order ) as total_count_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_refunded_order ) as total_count_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_email ) as total_count_received_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_email ) as total_count_clicked_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_opened_email ) as total_count_opened_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_marked_email_as_spam ) as total_count_marked_email_as_spam\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed ) as total_count_unsubscribed\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_sms ) as total_count_received_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_sms ) as total_count_clicked_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_sent_sms ) as total_count_sent_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed_from_sms ) as total_count_unsubscribed_from_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        from person_campaign_flow\n    group by 1,2\n\n)\n\nselect * from agg_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.208190Z", "completed_at": "2024-07-09T18:40:56.620909Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.622378Z", "completed_at": "2024-07-09T18:40:56.622398Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41616010665893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__campaigns", "compiled": true, "compiled_code": "with campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\ncampaign_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\ncampaign_join as (\n    \n    \n\n    select\n        campaign.*, -- has campaign_id and source_relation\n        `variation_id`,\n  `total_count_unique_people`,\n  `first_event_at`,\n  `last_event_at`,\n  `sum_revenue_refunded_order`,\n  `sum_revenue_placed_order`,\n  `sum_revenue_ordered_product`,\n  `sum_revenue_checkout_started`,\n  `sum_revenue_cancelled_order`,\n  `count_active_on_site`,\n  `unique_count_active_on_site`,\n  `count_viewed_product`,\n  `unique_count_viewed_product`,\n  `count_ordered_product`,\n  `unique_count_ordered_product`,\n  `count_placed_order`,\n  `unique_count_placed_order`,\n  `count_refunded_order`,\n  `unique_count_refunded_order`,\n  `count_received_email`,\n  `unique_count_received_email`,\n  `count_clicked_email`,\n  `unique_count_clicked_email`,\n  `count_opened_email`,\n  `unique_count_opened_email`,\n  `count_marked_email_as_spam`,\n  `unique_count_marked_email_as_spam`,\n  `count_unsubscribed`,\n  `unique_count_unsubscribed`,\n  `count_received_sms`,\n  `unique_count_received_sms`,\n  `count_clicked_sms`,\n  `unique_count_clicked_sms`,\n  `count_sent_sms`,\n  `unique_count_sent_sms`,\n  `count_unsubscribed_from_sms`,\n  `unique_count_unsubscribed_from_sms`\n\n    from campaign\n    left join campaign_metrics on (\n      campaign.campaign_id = campaign_metrics.last_touch_campaign_id\n      and\n      campaign.source_relation = campaign_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as string), '_dbt_utils_surrogate_key_null_') as string))) as campaign_variation_key\n\n    from campaign_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.629139Z", "completed_at": "2024-07-09T18:40:56.638943Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.640388Z", "completed_at": "2024-07-09T18:40:56.640402Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01507711410522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n    group by variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.441238Z", "completed_at": "2024-07-09T18:40:56.873269Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:56.875092Z", "completed_at": "2024-07-09T18:40:56.875116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.43744397163391113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__flows", "compiled": true, "compiled_code": "with flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nflow_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\nflow_join as (\n    \n    \n\n    select\n        flow.*, -- has flow_id and source_relation\n        `variation_id`,\n  `total_count_unique_people`,\n  `first_event_at`,\n  `last_event_at`,\n  `sum_revenue_refunded_order`,\n  `sum_revenue_placed_order`,\n  `sum_revenue_ordered_product`,\n  `sum_revenue_checkout_started`,\n  `sum_revenue_cancelled_order`,\n  `count_active_on_site`,\n  `unique_count_active_on_site`,\n  `count_viewed_product`,\n  `unique_count_viewed_product`,\n  `count_ordered_product`,\n  `unique_count_ordered_product`,\n  `count_placed_order`,\n  `unique_count_placed_order`,\n  `count_refunded_order`,\n  `unique_count_refunded_order`,\n  `count_received_email`,\n  `unique_count_received_email`,\n  `count_clicked_email`,\n  `unique_count_clicked_email`,\n  `count_opened_email`,\n  `unique_count_opened_email`,\n  `count_marked_email_as_spam`,\n  `unique_count_marked_email_as_spam`,\n  `count_unsubscribed`,\n  `unique_count_unsubscribed`,\n  `count_received_sms`,\n  `unique_count_received_sms`,\n  `count_clicked_sms`,\n  `unique_count_clicked_sms`,\n  `count_sent_sms`,\n  `unique_count_sent_sms`,\n  `count_unsubscribed_from_sms`,\n  `unique_count_unsubscribed_from_sms`\n\n    from flow\n    left join flow_metrics on (\n      flow.flow_id = flow_metrics.last_touch_flow_id\n      and\n      flow.source_relation = flow_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(flow_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as string), '_dbt_utils_surrogate_key_null_') as string))) as flow_variation_key\n\n    from flow_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.880437Z", "completed_at": "2024-07-09T18:40:57.266846Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.270968Z", "completed_at": "2024-07-09T18:40:57.270997Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.39435482025146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__persons", "compiled": true, "compiled_code": "with person as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n),\n\nperson_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`\n),\n\nperson_join as (\n\n    select\n        person.*,\n        `count_total_campaigns`,\n  `count_total_flows`,\n  `first_event_at`,\n  `last_event_at`,\n  `first_campaign_touch_at`,\n  `last_campaign_touch_at`,\n  `first_flow_touch_at`,\n  `last_flow_touch_at`,\n  `total_sum_revenue_refunded_order`,\n  `organic_sum_revenue_refunded_order`,\n  `total_sum_revenue_placed_order`,\n  `organic_sum_revenue_placed_order`,\n  `total_sum_revenue_ordered_product`,\n  `organic_sum_revenue_ordered_product`,\n  `total_sum_revenue_checkout_started`,\n  `organic_sum_revenue_checkout_started`,\n  `total_sum_revenue_cancelled_order`,\n  `organic_sum_revenue_cancelled_order`,\n  `total_count_active_on_site`,\n  `total_count_viewed_product`,\n  `total_count_ordered_product`,\n  `total_count_placed_order`,\n  `total_count_refunded_order`,\n  `total_count_received_email`,\n  `total_count_clicked_email`,\n  `total_count_opened_email`,\n  `total_count_marked_email_as_spam`,\n  `total_count_unsubscribed`,\n  `total_count_received_sms`,\n  `total_count_clicked_sms`,\n  `total_count_sent_sms`,\n  `total_count_unsubscribed_from_sms`\n\n    from person\n    left join person_metrics on (\n        person.person_id = person_metrics.person_id\n        and person.source_relation = person_metrics.source_relation\n    )\n\n)\n\nselect *\nfrom person_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.279091Z", "completed_at": "2024-07-09T18:40:57.288891Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.290177Z", "completed_at": "2024-07-09T18:40:57.290192Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015505075454711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.294176Z", "completed_at": "2024-07-09T18:40:57.301899Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.303575Z", "completed_at": "2024-07-09T18:40:57.303583Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012192010879516602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_variation_key, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`\n    group by campaign_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.644162Z", "completed_at": "2024-07-09T18:40:57.302355Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.304060Z", "completed_at": "2024-07-09T18:40:57.304070Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6629571914672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics", "compiled": true, "compiled_code": "with shopify_daily as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__daily_shopify_customer_orders`\n\n), klaviyo_daily as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__daily_klaviyo_user_metrics`\n\n), combine_histories as (\n\n    select \n        coalesce(shopify_daily.date_day, klaviyo_daily.date_day) as date_day,\n        coalesce(shopify_daily.email, klaviyo_daily.email) as email,\n\n        -- when the below is null, these are unattributed actions\n        coalesce(shopify_daily.last_touch_campaign_id, klaviyo_daily.last_touch_campaign_id) as campaign_id,\n        coalesce(shopify_daily.last_touch_flow_id, klaviyo_daily.last_touch_flow_id) as flow_id,\n        coalesce(shopify_daily.last_touch_campaign_name, klaviyo_daily.campaign_name) as campaign_name,\n        coalesce(shopify_daily.last_touch_flow_name, klaviyo_daily.flow_name) as flow_name,\n        coalesce(shopify_daily.last_touch_variation_id, klaviyo_daily.variation_id) as variation_id,\n        coalesce(shopify_daily.last_touch_campaign_subject_line, klaviyo_daily.campaign_subject_line) as campaign_subject_line,\n        coalesce(shopify_daily.last_touch_campaign_type, klaviyo_daily.campaign_type) as campaign_type,\n        \n        shopify_daily.`total_orders` as `shopify_total_orders`,\n  shopify_daily.`total_price` as `shopify_total_price`,\n  shopify_daily.`count_line_items` as `shopify_count_line_items`,\n  shopify_daily.`total_line_items_price` as `shopify_total_line_items_price`,\n  shopify_daily.`total_discounts` as `shopify_total_discounts`,\n  shopify_daily.`total_tax` as `shopify_total_tax`,\n  shopify_daily.`total_shipping_cost` as `shopify_total_shipping_cost`,\n  shopify_daily.`total_refund_subtotal` as `shopify_total_refund_subtotal`,\n  shopify_daily.`total_refund_tax` as `shopify_total_refund_tax`,\n  shopify_daily.`count_cancelled_orders` as `shopify_count_cancelled_orders`,\n  shopify_daily.`count_products` as `shopify_count_products`,\n  shopify_daily.`count_product_variants` as `shopify_count_product_variants`,\n  shopify_daily.`sum_quantity` as `shopify_sum_quantity`,\n  shopify_daily.`total_order_adjustment_amount` as `shopify_total_order_adjustment_amount`,\n  shopify_daily.`total_order_adjustment_tax_amount` as `shopify_total_order_adjustment_tax_amount`,\n        shopify_daily.source_relation as shopify_source_relation,\n\n        klaviyo_daily.`first_event_at` as `klaviyo_first_event_at`,\n  klaviyo_daily.`last_event_at` as `klaviyo_last_event_at`,\n  klaviyo_daily.`sum_revenue_refunded_order` as `klaviyo_sum_revenue_refunded_order`,\n  klaviyo_daily.`sum_revenue_placed_order` as `klaviyo_sum_revenue_placed_order`,\n  klaviyo_daily.`sum_revenue_ordered_product` as `klaviyo_sum_revenue_ordered_product`,\n  klaviyo_daily.`sum_revenue_checkout_started` as `klaviyo_sum_revenue_checkout_started`,\n  klaviyo_daily.`sum_revenue_cancelled_order` as `klaviyo_sum_revenue_cancelled_order`,\n  klaviyo_daily.`count_active_on_site` as `klaviyo_count_active_on_site`,\n  klaviyo_daily.`count_viewed_product` as `klaviyo_count_viewed_product`,\n  klaviyo_daily.`count_ordered_product` as `klaviyo_count_ordered_product`,\n  klaviyo_daily.`count_placed_order` as `klaviyo_count_placed_order`,\n  klaviyo_daily.`count_refunded_order` as `klaviyo_count_refunded_order`,\n  klaviyo_daily.`count_received_email` as `klaviyo_count_received_email`,\n  klaviyo_daily.`count_clicked_email` as `klaviyo_count_clicked_email`,\n  klaviyo_daily.`count_opened_email` as `klaviyo_count_opened_email`,\n  klaviyo_daily.`count_marked_email_as_spam` as `klaviyo_count_marked_email_as_spam`,\n  klaviyo_daily.`count_unsubscribed` as `klaviyo_count_unsubscribed`,\n  klaviyo_daily.`count_received_sms` as `klaviyo_count_received_sms`,\n  klaviyo_daily.`count_clicked_sms` as `klaviyo_count_clicked_sms`,\n  klaviyo_daily.`count_sent_sms` as `klaviyo_count_sent_sms`,\n  klaviyo_daily.`count_unsubscribed_from_sms` as `klaviyo_count_unsubscribed_from_sms`,\n        klaviyo_daily.source_relation as klaviyo_source_relation\n\n    from shopify_daily\n    full outer join klaviyo_daily\n        on lower(shopify_daily.email) = lower(klaviyo_daily.email)\n        and shopify_daily.date_day = klaviyo_daily.date_day\n        and coalesce(shopify_daily.last_touch_campaign_id, '') = coalesce(klaviyo_daily.last_touch_campaign_id, '')\n        and coalesce(shopify_daily.last_touch_flow_id, '') = coalesce(klaviyo_daily.last_touch_flow_id, '')\n        and coalesce(shopify_daily.last_touch_variation_id, '') = coalesce(klaviyo_daily.variation_id, '')\n)\n\nselect *\nfrom combine_histories", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__daily_customer_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.308789Z", "completed_at": "2024-07-09T18:40:57.318151Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.318800Z", "completed_at": "2024-07-09T18:40:57.318806Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012139081954956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_variation_key\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`\nwhere campaign_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.312696Z", "completed_at": "2024-07-09T18:40:57.320143Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.321407Z", "completed_at": "2024-07-09T18:40:57.321412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01551675796508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_variation_key, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`\n    group by flow_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.321696Z", "completed_at": "2024-07-09T18:40:57.333212Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.333776Z", "completed_at": "2024-07-09T18:40:57.333780Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013666152954101562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_variation_key\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`\nwhere flow_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.335197Z", "completed_at": "2024-07-09T18:40:57.337688Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.338071Z", "completed_at": "2024-07-09T18:40:57.338074Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0036940574645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.339299Z", "completed_at": "2024-07-09T18:40:57.341348Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.341721Z", "completed_at": "2024-07-09T18:40:57.341724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0031900405883789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.342921Z", "completed_at": "2024-07-09T18:40:57.345539Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.345988Z", "completed_at": "2024-07-09T18:40:57.345991Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003846883773803711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__daily_customer_metrics`\n    group by date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.329089Z", "completed_at": "2024-07-09T18:40:57.574749Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:57.576338Z", "completed_at": "2024-07-09T18:40:57.576357Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.24917101860046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "compiled": true, "compiled_code": "with persons as (\n\n    select\n        *,\n        row_number() over (partition by email order by created_at desc) as person_index\n    \n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`\n    where email is not null -- should never be the case but just in case\n\n), aggregate_persons as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        \n    string_agg(person_id, ', ')\n\n as person_ids,\n        \n    string_agg(distinct cast(phone_number as string), ', ')\n\n as phone_numbers,\n        max( case when person_index = 1 then full_name else null end) as full_name,\n        \n        min(created_at) as first_klaviyo_account_made_at,\n        max(created_at) as last_klaviyo_account_made_at,\n        max(updated_at) as last_updated_at,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at,\n        min(first_campaign_touch_at) as first_campaign_touch_at,\n        max(last_campaign_touch_at) as last_campaign_touch_at,\n        min(first_flow_touch_at) as first_flow_touch_at,\n        max(last_flow_touch_at) as last_flow_touch_at,\n\n        sum(count_total_campaigns) as count_total_campaigns,\n        sum(count_total_flows) as count_total_flows\n\n\n        \n        \n        \n            \n        \n            \n            , max(case when person_index = 1 then address_1 else null end) as address_1\n            \n        \n            \n            , max(case when person_index = 1 then address_2 else null end) as address_2\n            \n        \n            \n            , max(case when person_index = 1 then city else null end) as city\n            \n        \n            \n            , max(case when person_index = 1 then country else null end) as country\n            \n        \n            \n            , max(case when person_index = 1 then zip else null end) as zip\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then latitude else null end) as latitude\n            \n        \n            \n            , max(case when person_index = 1 then longitude else null end) as longitude\n            \n        \n            \n            , max(case when person_index = 1 then organization else null end) as organization\n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then region else null end) as region\n            \n        \n            \n            , max(case when person_index = 1 then timezone else null end) as timezone\n            \n        \n            \n            , max(case when person_index = 1 then title else null end) as title\n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then last_event_date else null end) as last_event_date\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_refunded_order else null end) as total_sum_revenue_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_refunded_order else null end) as organic_sum_revenue_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_placed_order else null end) as total_sum_revenue_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_placed_order else null end) as organic_sum_revenue_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_ordered_product else null end) as total_sum_revenue_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_ordered_product else null end) as organic_sum_revenue_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_checkout_started else null end) as total_sum_revenue_checkout_started\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_checkout_started else null end) as organic_sum_revenue_checkout_started\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_cancelled_order else null end) as total_sum_revenue_cancelled_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_cancelled_order else null end) as organic_sum_revenue_cancelled_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_active_on_site else null end) as total_count_active_on_site\n            \n        \n            \n            , max(case when person_index = 1 then total_count_viewed_product else null end) as total_count_viewed_product\n            \n        \n            \n            , max(case when person_index = 1 then total_count_ordered_product else null end) as total_count_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then total_count_placed_order else null end) as total_count_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_refunded_order else null end) as total_count_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_received_email else null end) as total_count_received_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_clicked_email else null end) as total_count_clicked_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_opened_email else null end) as total_count_opened_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_marked_email_as_spam else null end) as total_count_marked_email_as_spam\n            \n        \n            \n            , max(case when person_index = 1 then total_count_unsubscribed else null end) as total_count_unsubscribed\n            \n        \n            \n            , max(case when person_index = 1 then total_count_received_sms else null end) as total_count_received_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_clicked_sms else null end) as total_count_clicked_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_sent_sms else null end) as total_count_sent_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_unsubscribed_from_sms else null end) as total_count_unsubscribed_from_sms\n            \n        \n\n    from persons\n    group by 1,2\n)\n\nselect *\nfrom aggregate_persons", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__klaviyo_person_rollup`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:57.580715Z", "completed_at": "2024-07-09T18:40:58.233587Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:58.235452Z", "completed_at": "2024-07-09T18:40:58.235476Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6579179763793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced", "compiled": true, "compiled_code": "with shopify_customers as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_emails`\n\n), klaviyo_persons as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`int__klaviyo_person_rollup`\n\n), combine_customer_info as (\n\n    select\n        coalesce(shopify_customers.email, klaviyo_persons.email) as email,\n        coalesce(klaviyo_persons.full_name, shopify_customers.first_name || ' ' || shopify_customers.last_name) as full_name,\n        shopify_customers.customer_ids as shopify_customer_ids,\n        klaviyo_persons.person_ids as klaviyo_person_ids,\n        coalesce(shopify_customers.phone_numbers, klaviyo_persons.phone_numbers) as phone_number,\n        shopify_customers.first_account_created_at as shopify_customer_first_created_at,\n        shopify_customers.last_account_created_at as shopify_customer_last_created_at,\n        klaviyo_persons.first_klaviyo_account_made_at as klaviyo_person_first_created_at,\n        klaviyo_persons.last_klaviyo_account_made_at as klaviyo_person_last_created_at,\n        shopify_customers.last_updated_at as shopify_customer_last_updated_at,\n        klaviyo_persons.last_updated_at as klaviyo_person_last_updated_at,\n        shopify_customers.is_verified_email as is_shopify_email_verified,\n        shopify_customers.first_order_timestamp as shopify_first_order_at,\n        shopify_customers.most_recent_order_timestamp as shopify_last_order_at,\n\n        shopify_customers.customer_tags as shopify_customer_tags,\n  shopify_customers.marketing_consent_updated_at as shopify_marketing_consent_updated_at,\n  shopify_customers.last_fivetran_synced as shopify_last_fivetran_synced,\n  shopify_customers.is_tax_exempt as shopify_is_tax_exempt,\n  shopify_customers.default_address_id as shopify_default_address_id,\n  shopify_customers.account_state as shopify_account_state,\n  shopify_customers.note as shopify_note,\n  shopify_customers.currency as shopify_currency,\n  shopify_customers.marketing_consent_state as shopify_marketing_consent_state,\n  shopify_customers.marketing_opt_in_level as shopify_marketing_opt_in_level,\n  shopify_customers.lifetime_abandoned_checkouts as shopify_lifetime_abandoned_checkouts,\n  shopify_customers.first_order_timestamp as shopify_first_order_timestamp,\n  shopify_customers.most_recent_order_timestamp as shopify_most_recent_order_timestamp,\n  shopify_customers.avg_order_value as shopify_avg_order_value,\n  shopify_customers.lifetime_total_spent as shopify_lifetime_total_spent,\n  shopify_customers.lifetime_total_refunded as shopify_lifetime_total_refunded,\n  shopify_customers.lifetime_total_net as shopify_lifetime_total_net,\n  shopify_customers.lifetime_count_orders as shopify_lifetime_count_orders,\n  shopify_customers.avg_quantity_per_order as shopify_avg_quantity_per_order,\n  shopify_customers.lifetime_total_tax as shopify_lifetime_total_tax,\n  shopify_customers.avg_tax_per_order as shopify_avg_tax_per_order,\n  shopify_customers.lifetime_total_discount as shopify_lifetime_total_discount,\n  shopify_customers.avg_discount_per_order as shopify_avg_discount_per_order,\n  shopify_customers.lifetime_total_shipping as shopify_lifetime_total_shipping,\n  shopify_customers.avg_shipping_per_order as shopify_avg_shipping_per_order,\n  shopify_customers.lifetime_total_shipping_with_discounts as shopify_lifetime_total_shipping_with_discounts,\n  shopify_customers.avg_shipping_with_discounts_per_order as shopify_avg_shipping_with_discounts_per_order,\n  shopify_customers.lifetime_total_shipping_tax as shopify_lifetime_total_shipping_tax,\n  shopify_customers.avg_shipping_tax_per_order as shopify_avg_shipping_tax_per_order,\n        shopify_customers.source_relation as shopify_source_relation,\n\n        klaviyo_persons.first_event_at as klaviyo_first_event_at,\n  klaviyo_persons.last_event_at as klaviyo_last_event_at,\n  klaviyo_persons.first_campaign_touch_at as klaviyo_first_campaign_touch_at,\n  klaviyo_persons.last_campaign_touch_at as klaviyo_last_campaign_touch_at,\n  klaviyo_persons.first_flow_touch_at as klaviyo_first_flow_touch_at,\n  klaviyo_persons.last_flow_touch_at as klaviyo_last_flow_touch_at,\n  klaviyo_persons.count_total_campaigns as klaviyo_count_total_campaigns,\n  klaviyo_persons.count_total_flows as klaviyo_count_total_flows,\n  klaviyo_persons.address_1 as klaviyo_address_1,\n  klaviyo_persons.address_2 as klaviyo_address_2,\n  klaviyo_persons.city as klaviyo_city,\n  klaviyo_persons.country as klaviyo_country,\n  klaviyo_persons.zip as klaviyo_zip,\n  klaviyo_persons.latitude as klaviyo_latitude,\n  klaviyo_persons.longitude as klaviyo_longitude,\n  klaviyo_persons.organization as klaviyo_organization,\n  klaviyo_persons.region as klaviyo_region,\n  klaviyo_persons.timezone as klaviyo_timezone,\n  klaviyo_persons.title as klaviyo_title,\n  klaviyo_persons.last_event_date as klaviyo_last_event_date,\n  klaviyo_persons.total_sum_revenue_refunded_order as klaviyo_total_sum_revenue_refunded_order,\n  klaviyo_persons.organic_sum_revenue_refunded_order as klaviyo_organic_sum_revenue_refunded_order,\n  klaviyo_persons.total_sum_revenue_placed_order as klaviyo_total_sum_revenue_placed_order,\n  klaviyo_persons.organic_sum_revenue_placed_order as klaviyo_organic_sum_revenue_placed_order,\n  klaviyo_persons.total_sum_revenue_ordered_product as klaviyo_total_sum_revenue_ordered_product,\n  klaviyo_persons.organic_sum_revenue_ordered_product as klaviyo_organic_sum_revenue_ordered_product,\n  klaviyo_persons.total_sum_revenue_checkout_started as klaviyo_total_sum_revenue_checkout_started,\n  klaviyo_persons.organic_sum_revenue_checkout_started as klaviyo_organic_sum_revenue_checkout_started,\n  klaviyo_persons.total_sum_revenue_cancelled_order as klaviyo_total_sum_revenue_cancelled_order,\n  klaviyo_persons.organic_sum_revenue_cancelled_order as klaviyo_organic_sum_revenue_cancelled_order,\n  klaviyo_persons.total_count_active_on_site as klaviyo_total_count_active_on_site,\n  klaviyo_persons.total_count_viewed_product as klaviyo_total_count_viewed_product,\n  klaviyo_persons.total_count_ordered_product as klaviyo_total_count_ordered_product,\n  klaviyo_persons.total_count_placed_order as klaviyo_total_count_placed_order,\n  klaviyo_persons.total_count_refunded_order as klaviyo_total_count_refunded_order,\n  klaviyo_persons.total_count_received_email as klaviyo_total_count_received_email,\n  klaviyo_persons.total_count_clicked_email as klaviyo_total_count_clicked_email,\n  klaviyo_persons.total_count_opened_email as klaviyo_total_count_opened_email,\n  klaviyo_persons.total_count_marked_email_as_spam as klaviyo_total_count_marked_email_as_spam,\n  klaviyo_persons.total_count_unsubscribed as klaviyo_total_count_unsubscribed,\n  klaviyo_persons.total_count_received_sms as klaviyo_total_count_received_sms,\n  klaviyo_persons.total_count_clicked_sms as klaviyo_total_count_clicked_sms,\n  klaviyo_persons.total_count_sent_sms as klaviyo_total_count_sent_sms,\n  klaviyo_persons.total_count_unsubscribed_from_sms as klaviyo_total_count_unsubscribed_from_sms,\n        klaviyo_persons.source_relation as klaviyo_source_relation\n\n    from shopify_customers\n    full outer join klaviyo_persons \n        on shopify_customers.email = lower(klaviyo_persons.email) -- redshift doesn't like doing 2 lowers here. we lowercase shopify.email in an intermediate model\n\n)\n\nselect *\nfrom combine_customer_info", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__customer_enhanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:58.241318Z", "completed_at": "2024-07-09T18:40:58.255225Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:58.256129Z", "completed_at": "2024-07-09T18:40:58.256138Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017237186431884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, klaviyo_source_relation, shopify_source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_shopify_holistic`.`shopify_holistic_reporting__customer_enhanced`\n    group by email, klaviyo_source_relation, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:55.987136Z", "completed_at": "2024-07-09T18:40:58.504530Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:58.507755Z", "completed_at": "2024-07-09T18:40:58.507782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.523041009902954, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2024-07-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_emails`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as cohort_month\n    from calendar\n    inner join customers\n        on cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        month\n    ) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        email,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_email_cohorts`\n    where date_month < \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2024-07-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.email, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        to_hex(md5(cast(coalesce(cast(windows.date_month as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.email = windows.email\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_email_cohorts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:58.527362Z", "completed_at": "2024-07-09T18:40:58.536156Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:58.538221Z", "completed_at": "2024-07-09T18:40:58.538232Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02470088005065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_cohort_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_email_cohorts`\n  where customer_cohort_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:58.518120Z", "completed_at": "2024-07-09T18:40:58.536778Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:58.538716Z", "completed_at": "2024-07-09T18:40:58.538724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027007102966308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_email_cohorts`\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:56.178865Z", "completed_at": "2024-07-09T18:40:59.076171Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:59.078808Z", "completed_at": "2024-07-09T18:40:59.078835Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.9027087688446045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2024-07-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customers`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__orders`\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        month\n    ) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        customer_id,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_cohorts`\n    where date_month < \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2024-07-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.customer_id, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        to_hex(md5(cast(coalesce(cast(windows.date_month as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.customer_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.customer_id = windows.customer_id\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_cohorts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:59.088477Z", "completed_at": "2024-07-09T18:40:59.104475Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:59.106509Z", "completed_at": "2024-07-09T18:40:59.106523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023424863815307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_cohorts`\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T18:40:59.097853Z", "completed_at": "2024-07-09T18:40:59.105014Z"}, {"name": "execute", "started_at": "2024-07-09T18:40:59.107061Z", "completed_at": "2024-07-09T18:40:59.107069Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023031949996948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_cohort_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_shopify`.`shopify__customer_cohorts`\n  where customer_cohort_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 12.050462007522583, "args": {"cache_selected_only": false, "use_colors_file": true, "strict_mode": false, "partial_parse_file_diff": true, "print": true, "log_file_max_bytes": 10485760, "partial_parse": true, "log_path": "/Users/renee/Documents/dbt/shopify_holistic_reporting/develop/logs", "warn_error_options": {"include": [], "exclude": []}, "static_parser": true, "vars": {}, "version_check": true, "populate_cache": true, "macro_debugging": false, "log_format_file": "debug", "log_level": "info", "quiet": false, "log_format": "default", "use_colors": true, "profiles_dir": "/Users/renee/.dbt", "empty_catalog": false, "favor_state": false, "exclude": [], "printer_width": 80, "indirect_selection": "eager", "defer": false, "compile": true, "which": "generate", "introspect": true, "static": false, "select": [], "send_anonymous_usage_stats": true, "write_json": true, "log_level_file": "debug", "show_resource_report": false, "invocation_command": "dbt docs generate", "project_dir": "/Users/renee/Documents/dbt/shopify_holistic_reporting/develop", "enable_legacy_logger": false}}