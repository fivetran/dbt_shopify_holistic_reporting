{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-10-13T23:10:08.553077Z", "invocation_id": "995a6e9b-ac7c-4344-a33a-82df97529d6b", "env": {}, "project_id": "0d919ec91381ade1c67705291b214e1c", "user_id": "2bfa9082-ea6e-467b-abdc-d0514ab111d9", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.shopify_holistic_reporting_integration_tests.shopify_order_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp", "processed_at": "timestamp", "cancelled_at": "timestamp", "id": "INT64", "customer_id": "INT64", "location_id": "INT64", "user_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_order_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_order_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_order_data.csv", "original_file_path": "seeds/shopify_order_data.csv", "name": "shopify_order_data", "alias": "shopify_order_data", "checksum": {"name": "sha256", "checksum": "4d0dd043a886a0d9e7680e7ee2cd132717490f75d3a06fe7c38956d901976146"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "processed_at": "timestamp", "cancelled_at": "timestamp", "_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "customer_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "location_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "user_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.520545, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "location_id": "INT64", "refund_id": "INT64", "order_line_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_order_line_refund_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_order_line_refund_data.csv", "original_file_path": "seeds/shopify_order_line_refund_data.csv", "name": "shopify_order_line_refund_data", "alias": "shopify_order_line_refund_data", "checksum": {"name": "sha256", "checksum": "0564bef778890f3e086e4057b2536aaa6cfeceb2f9c9bd95f44d4b9f04a33dc6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "location_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_line_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.52617, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_line_refund_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "order_id": "INT64", "refund_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_order_adjustment_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_order_adjustment_data.csv", "original_file_path": "seeds/shopify_order_adjustment_data.csv", "name": "shopify_order_adjustment_data", "alias": "shopify_order_adjustment_data", "checksum": {"name": "sha256", "checksum": "48ce96540f19450088c661fd48bd8f6d58bb4ca13a1f048880e9984be367172e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.527225, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_adjustment_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "product_id": "INT64", "inventory_item_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_product_variant_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_product_variant_data.csv", "original_file_path": "seeds/shopify_product_variant_data.csv", "name": "shopify_product_variant_data", "alias": "shopify_product_variant_data", "checksum": {"name": "sha256", "checksum": "3430f8a8a9139a753a727caa7e10ac2ac02c4e2683a37ed933566367d2f6200e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "product_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "inventory_item_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.52826, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_product_variant_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_refund_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "order_id": "INT64", "user_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_refund_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_refund_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_refund_data.csv", "original_file_path": "seeds/shopify_refund_data.csv", "name": "shopify_refund_data", "alias": "shopify_refund_data", "checksum": {"name": "sha256", "checksum": "8d8bc98681d9b0d57a43af3fc99ff13cc42401d97e49bba41c1fafb28f858d23"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "user_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.529408, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_refund_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "order_id": "INT64", "refund_id": "INT64", "receipt": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_transaction_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_transaction_data.csv", "original_file_path": "seeds/shopify_transaction_data.csv", "name": "shopify_transaction_data", "alias": "shopify_transaction_data", "checksum": {"name": "sha256", "checksum": "def7b7fc64e42148b900dcd1f7327b470e5d3b0ed8e73f263e46a715ecb09199"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "receipt": "{{ 'varchar(100)' if target.name in ('redshift', 'postgres') else 'string' }}"}}, "created_at": 1665702404.530432, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_transaction_data`"}, "seed.shopify_holistic_reporting_integration_tests.flow": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "trigger": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "flow"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.flow", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "flow.csv", "original_file_path": "seeds/flow.csv", "name": "flow", "alias": "flow", "checksum": {"name": "sha256", "checksum": "8a59e1c986a7509b15603761cb0225587bd8db8ae81ee0b146ca821be8103627"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"trigger": "{{ 'string' if target.type in ('bigquery', 'spark') else 'varchar' }}"}, "enabled": "{{ true if target.type != 'snowflake' else false }}"}, "created_at": 1665702404.53245, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`flow`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_product_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp", "published_at": "timestamp", "id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_product_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_product_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_product_data.csv", "original_file_path": "seeds/shopify_product_data.csv", "name": "shopify_product_data", "alias": "shopify_product_data", "checksum": {"name": "sha256", "checksum": "5cc03f90512ac04a6526220040085e4e0488b62ef22e8b201424c7d7cf1bf847"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "published_at": "timestamp", "_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.533605, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_product_data`"}, "seed.shopify_holistic_reporting_integration_tests.integration": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "integration"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.integration", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "integration.csv", "original_file_path": "seeds/integration.csv", "name": "integration", "alias": "integration", "checksum": {"name": "sha256", "checksum": "7d65e88ffe7faca2f24289441001007cc8222d5bb8f788c2807072bd7bb0b022"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1665702404.5345972, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`integration`"}, "seed.shopify_holistic_reporting_integration_tests.metric": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "metric"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.metric", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "metric.csv", "original_file_path": "seeds/metric.csv", "name": "metric", "alias": "metric", "checksum": {"name": "sha256", "checksum": "155dde6f21d4cf0d8d11b898b4c1f310c2ffbe44c897aaacd5dd31a607bd447a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1665702404.535552, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`metric`"}, "seed.shopify_holistic_reporting_integration_tests.person": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "phone_number": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "person"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.person", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "person.csv", "original_file_path": "seeds/person.csv", "name": "person", "alias": "person", "checksum": {"name": "sha256", "checksum": "6f915292a8aba951a356baacc8e65fac88b0a28e98d6cff84f708aeaf68d9ceb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"phone_number": "{{ 'string' if target.type in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1665702404.536522, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`person`"}, "seed.shopify_holistic_reporting_integration_tests.event": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "flow_id": "string", "campaign_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "event"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.event", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "event.csv", "original_file_path": "seeds/event.csv", "name": "event", "alias": "event", "checksum": {"name": "sha256", "checksum": "fb7883912895ceb24123ecd1e37c8cd3d8e837493d1ed2007fd64daf45a8581c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"flow_id": "{{ 'string' if target.type in ('bigquery', 'spark') else 'varchar' }}", "campaign_id": "{{ 'string' if target.type in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1665702404.537636, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`event`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_customer_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp", "id": "INT64", "default_address_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_customer_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_customer_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_customer_data.csv", "original_file_path": "seeds/shopify_customer_data.csv", "name": "shopify_customer_data", "alias": "shopify_customer_data", "checksum": {"name": "sha256", "checksum": "79bc0a5972c321cefe2973acdd443ce1d42e36b3b23b2298151046d23bdf4bea"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "default_address_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.538647, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_customer_data`"}, "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "order_id": "INT64", "id": "INT64", "product_id": "INT64", "variant_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "shopify_order_line_data"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "shopify_order_line_data.csv", "original_file_path": "seeds/shopify_order_line_data.csv", "name": "shopify_order_line_data", "alias": "shopify_order_line_data", "checksum": {"name": "sha256", "checksum": "cabaa49c9bd299b34eb2154893a6dd399fbbad7e4ad7036293c8b4cb599199e0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "product_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "variant_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1665702404.539656, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_line_data`"}, "seed.shopify_holistic_reporting_integration_tests.campaign": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "campaign"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.campaign", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "campaign.csv", "original_file_path": "seeds/campaign.csv", "name": "campaign", "alias": "campaign", "checksum": {"name": "sha256", "checksum": "e80312165b7d9198633569c5c50aaaf7e73df74dff2d46600adca3fef4b8dd43"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1665702404.5406349, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests`.`campaign`"}, "model.shopify_source.stg_shopify__order_line": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_line_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_tmp')),\n                staging_columns=get_order_line_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_pass_through_columns') %}\n      ,\n      {{ var('order_line_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_order_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__order_line_tmp", "model.shopify_source.stg_shopify__order_line_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__order_line"], "unique_id": "model.shopify_source.stg_shopify__order_line", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__order_line.sql", "original_file_path": "models/stg_shopify__order_line.sql", "name": "stg_shopify__order_line", "alias": "stg_shopify__order_line", "checksum": {"name": "sha256", "checksum": "bb641f0d784534dc9d6d86bda3391b7c905b0a739c6cf34ef60e4716b5fd86ce"}, "tags": [], "refs": [["stg_shopify__order_line_tmp"], ["stg_shopify__order_line_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a line item from an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_service": {"name": "fulfillment_service", "description": "The service provider that's fulfilling the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_gift_card": {"name": "is_gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_line_id": {"name": "order_line_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_requiring_shipping": {"name": "is_requiring_shipping", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_taxable": {"name": "is_taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_line.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.01487, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    fulfillable_quantity\n    \n , \n    cast(null as \n    string\n) as \n    \n    fulfillment_service\n    \n , \n    cast(null as \n    string\n) as \n    \n    fulfillment_status\n    \n , \n    cast(null as boolean) as is_gift_card , \n    cast(null as \n    numeric\n) as \n    \n    grams\n    \n , \n    cast(null as \n    numeric\n) as order_line_id , \n    cast(null as \n    numeric\n) as \n    \n    index\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    order_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    pre_tax_price\n    \n , \n    cast(null as \n    float64\n) as \n    \n    price\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    product_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    property_charge_interval_frequency\n    \n , \n    cast(null as \n    string\n) as \n    \n    property_for_shipping_jan_3_rd_2020\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    property_shipping_interval_frequency\n    \n , \n    cast(null as \n    string\n) as \n    \n    property_shipping_interval_unit_type\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    property_subscription_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    quantity\n    \n , \n    cast(null as boolean) as is_requiring_shipping , \n    cast(null as \n    string\n) as \n    \n    sku\n    \n , \n    cast(null as boolean) as is_taxable , \n    cast(null as \n    string\n) as \n    \n    title\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_discount\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    variant_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    vendor\n    \n \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`"}, "model.shopify_source.stg_shopify__refund": {"raw_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n        \n    from source\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__refund_tmp", "model.shopify_source.stg_shopify__refund_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__refund"], "unique_id": "model.shopify_source.stg_shopify__refund", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__refund.sql", "original_file_path": "models/stg_shopify__refund.sql", "name": "stg_shopify__refund", "alias": "stg_shopify__refund", "checksum": {"name": "sha256", "checksum": "db92848ca19e65385f44b51e662bc9a3c773fecefe896cbddd1f23d22d078e82"}, "tags": [], "refs": [["stg_shopify__refund_tmp"], ["stg_shopify__refund_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a refund within Shopify.", "columns": {"refund_id": {"name": "refund_id", "description": "The unique numeric identifier for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_at": {"name": "processed_at", "description": "Timestamp of the date when the refund was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "User generated note attached to the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "restock": {"name": "restock", "description": "Boolean indicating if the refund is a result of a restock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Reference to the user id which generated the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_duties_set": {"name": "total_duties_set", "description": "Record representing total duties set for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Reference to the order which the refund is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__refund.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table", "enabled": true}, "created_at": 1665702405.034945, "compiled_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund_tmp`\n\n),\n\nrenamed as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    numeric\n) as refund_id , \n    cast(null as \n    string\n) as \n    \n    note\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    order_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    processed_at\n    \n , \n    cast(null as boolean) as \n    \n    restock\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n        \n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`"}, "model.shopify_source.stg_shopify__product": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_pass_through_columns') %}\n      ,\n      {{ var('product_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_product_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__product_tmp", "model.shopify_source.stg_shopify__product_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__product"], "unique_id": "model.shopify_source.stg_shopify__product", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__product.sql", "original_file_path": "models/stg_shopify__product.sql", "name": "stg_shopify__product", "alias": "stg_shopify__product", "checksum": {"name": "sha256", "checksum": "dd30ab5bbf28fc246f4d4625c8057bd05f59c9e8f115d8c72f301b22236b59eb"}, "tags": [], "refs": [["stg_shopify__product_tmp"], ["stg_shopify__product_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a product in Shopify.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_timestamp": {"name": "published_timestamp", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.0258079, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    string\n) as \n    \n    handle\n    \n , \n    cast(null as \n    numeric\n) as product_id , \n    cast(null as \n    string\n) as \n    \n    product_type\n    \n , \n    cast(null as \n    timestamp\n) as published_timestamp , \n    cast(null as \n    string\n) as \n    \n    published_scope\n    \n , \n    cast(null as \n    string\n) as \n    \n    title\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp , \n    cast(null as \n    string\n) as \n    \n    vendor\n    \n \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product`"}, "model.shopify_source.stg_shopify__product_variant": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_variant_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_variant_tmp')),\n                staging_columns=get_product_variant_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_variant_pass_through_columns') %}\n      ,\n      {{ var('product_variant_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_product_variant_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__product_variant_tmp", "model.shopify_source.stg_shopify__product_variant_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__product_variant"], "unique_id": "model.shopify_source.stg_shopify__product_variant", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__product_variant.sql", "original_file_path": "models/stg_shopify__product_variant.sql", "name": "stg_shopify__product_variant", "alias": "stg_shopify__product_variant", "checksum": {"name": "sha256", "checksum": "6d09962a9153df0f1b3220ecfe3ecd87997d5e5b87187a985a7c25006ca8b229"}, "tags": [], "refs": [["stg_shopify__product_variant_tmp"], ["stg_shopify__product_variant_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a product variant in Shopify", "columns": {"barcode": {"name": "barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compare_at_price": {"name": "compare_at_price", "description": "The original price of the item before an adjustment or a sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_service": {"name": "fulfillment_service", "description": "The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grams": {"name": "grams", "description": "The weight of the product variant in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_id": {"name": "variant_id", "description": "The unique numeric identifier for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_id": {"name": "image_id", "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_management": {"name": "inventory_management", "description": "The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_policy": {"name": "inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_quantity": {"name": "inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_inventory_quantity": {"name": "old_inventory_quantity", "description": "This property is deprecated. Use the InventoryLevel resource instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_1": {"name": "option_1", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_2": {"name": "option_2", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_3": {"name": "option_3", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "position": {"name": "position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The price of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique numeric identifier for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_requiring_shipping": {"name": "is_requiring_shipping", "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_taxable": {"name": "is_taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight": {"name": "weight", "description": "The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight_unit": {"name": "weight_unit", "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product_variant.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.02949, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_variant_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    numeric\n) as variant_id , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    timestamp\n) as updated_timestamp , \n    cast(null as \n    numeric\n) as \n    \n    product_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    inventory_item_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    image_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    title\n    \n , \n    cast(null as \n    float64\n) as \n    \n    price\n    \n , \n    cast(null as \n    string\n) as \n    \n    sku\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    position\n    \n , \n    cast(null as \n    string\n) as \n    \n    inventory_policy\n    \n , \n    cast(null as \n    float64\n) as \n    \n    compare_at_price\n    \n , \n    cast(null as \n    string\n) as \n    \n    fulfillment_service\n    \n , \n    cast(null as \n    string\n) as \n    \n    inventory_management\n    \n , \n    cast(null as boolean) as is_taxable , \n    cast(null as \n    string\n) as \n    \n    barcode\n    \n , \n    cast(null as \n    float64\n) as \n    \n    grams\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    inventory_quantity\n    \n , \n    cast(null as \n    float64\n) as \n    \n    weight\n    \n , \n    cast(null as \n    string\n) as \n    \n    weight_unit\n    \n , \n    cast(null as \n    string\n) as \n    \n    option_1\n    \n , \n    cast(null as \n    string\n) as \n    \n    option_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    option_3\n    \n , \n    cast(null as \n    string\n) as \n    \n    tax_code\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    old_inventory_quantity\n    \n , \n    cast(null as boolean) as is_requiring_shipping \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_variant`"}, "model.shopify_source.stg_shopify__order": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_pass_through_columns') %}\n      ,\n      {{ var('order_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_order_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__order_tmp", "model.shopify_source.stg_shopify__order_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__order"], "unique_id": "model.shopify_source.stg_shopify__order", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__order.sql", "original_file_path": "models/stg_shopify__order.sql", "name": "stg_shopify__order", "alias": "stg_shopify__order", "checksum": {"name": "sha256", "checksum": "a4b7cdee44f261fe11e487f1022c1f7bd57196220a453bff382c1876ee5a2192"}, "tags": [], "refs": [["stg_shopify__order_tmp"], ["stg_shopify__order_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_timestamp": {"name": "cancelled_timestamp", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_timestamp": {"name": "closed_timestamp", "description": "The date and time when the order was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_method": {"name": "processing_method", "description": "How the payment was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_taxes_included": {"name": "has_taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_test_order": {"name": "is_test_order", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price set for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pre_tax_price": {"name": "pre_tax_price", "description": "The total pre tax price of the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.024142, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    numeric\n) as order_id , \n    cast(null as \n    timestamp\n) as processed_timestamp , \n    cast(null as \n    timestamp\n) as updated_timestamp , \n    cast(null as \n    numeric\n) as \n    \n    user_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_discounts\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_line_items_price\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_price\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_tax\n    \n , \n    cast(null as \n    string\n) as \n    \n    source_name\n    \n , \n    cast(null as \n    float64\n) as \n    \n    subtotal_price\n    \n , \n    cast(null as boolean) as has_taxes_included , \n    cast(null as \n    numeric\n) as \n    \n    total_weight\n    \n , \n    cast(null as \n    string\n) as \n    \n    landing_site_base_url\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    location_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    note\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    number\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    order_number\n    \n , \n    cast(null as \n    string\n) as \n    \n    cancel_reason\n    \n , \n    cast(null as \n    timestamp\n) as cancelled_timestamp , \n    cast(null as \n    string\n) as \n    \n    cart_token\n    \n , \n    cast(null as \n    string\n) as \n    \n    checkout_token\n    \n , \n    cast(null as \n    timestamp\n) as closed_timestamp , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    customer_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    email\n    \n , \n    cast(null as \n    string\n) as \n    \n    financial_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    fulfillment_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    processing_method\n    \n , \n    cast(null as \n    string\n) as \n    \n    referring_site\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_address_1\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_address_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_city\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_company\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_country\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_country_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_first_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_last_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_latitude\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_longitude\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_phone\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_province\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_province_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_address_zip\n    \n , \n    cast(null as \n    string\n) as \n    \n    browser_ip\n    \n , \n    cast(null as boolean) as has_buyer_accepted_marketing , \n    cast(null as \n    string\n) as \n    \n    total_shipping_price_set\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_address_1\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_address_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_city\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_company\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_country\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_country_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_first_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_last_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_latitude\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_longitude\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_phone\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_province\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_province_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    shipping_address_zip\n    \n , \n    cast(null as boolean) as is_test_order , \n    cast(null as \n    string\n) as \n    \n    token\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`"}, "model.shopify_source.stg_shopify__transaction": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__transaction_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__transaction_tmp')),\n                staging_columns=get_transaction_columns()\n            )\n        }}\n\n         --The below script allows for pass through columns.\n        {% if var('transaction_pass_through_columns') %}\n        ,\n        {{ var('transaction_pass_through_columns') | join (\", \")}}\n\n        {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n    where not test\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__transaction_tmp", "model.shopify_source.stg_shopify__transaction_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__transaction"], "unique_id": "model.shopify_source.stg_shopify__transaction", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__transaction.sql", "original_file_path": "models/stg_shopify__transaction.sql", "name": "stg_shopify__transaction", "alias": "stg_shopify__transaction", "checksum": {"name": "sha256", "checksum": "b837eb0c1661d2817ccb6a1c3123e7d146dbbd9a63ea1fe0ad52ba8a1742ecbe"}, "tags": [], "refs": [["stg_shopify__transaction_tmp"], ["stg_shopify__transaction_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a transaction in Shopify.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of money included in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorization": {"name": "authorization", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test": {"name": "test", "description": "Whether the transaction is a test transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.033545, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__transaction_tmp`\n\n),\n\nrenamed as (\n\n    select\n\n        \n    cast(null as \n    numeric\n) as transaction_id , \n    cast(null as \n    numeric\n) as \n    \n    order_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    refund_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    amount\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    timestamp\n) as processed_timestamp , \n    cast(null as \n    numeric\n) as \n    \n    device_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    gateway\n    \n , \n    cast(null as \n    string\n) as \n    \n    source_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    message\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    location_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    parent_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_avs_result_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_credit_card_bin\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_cvv_result_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_credit_card_number\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_credit_card_company\n    \n , \n    cast(null as \n    string\n) as \n    \n    kind\n    \n , \n    cast(null as \n    string\n) as \n    \n    receipt\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    currency_exchange_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    currency_exchange_adjustment\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    currency_exchange_original_amount\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    currency_exchange_final_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_exchange_currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    error_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    user_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n \n\n\n\n         --The below script allows for pass through columns.\n        \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n    where not test\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__transaction`"}, "model.shopify_source.stg_shopify__order_adjustment": {"raw_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__order_adjustment_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_adjustment_tmp')),\n                staging_columns=get_order_adjustment_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n        \n    from source\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_order_adjustment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__order_adjustment_tmp", "model.shopify_source.stg_shopify__order_adjustment_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__order_adjustment"], "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__order_adjustment.sql", "original_file_path": "models/stg_shopify__order_adjustment.sql", "name": "stg_shopify__order_adjustment", "alias": "stg_shopify__order_adjustment", "checksum": {"name": "sha256", "checksum": "b494a4c88cf235fb0b11c020d004bcf0904e9d1ae235144330d3d24b37ad4318"}, "tags": [], "refs": [["stg_shopify__order_adjustment_tmp"], ["stg_shopify__order_adjustment_tmp"]], "sources": [], "metrics": [], "description": "Each record represents and adjustment to and order within Shopify.", "columns": {"order_adjustment_id": {"name": "order_adjustment_id", "description": "The unique numeric identifier for the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Reference to the order which the adjustment is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "Reference to the refund which the adjustment is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "Tax amount applied to the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kind": {"name": "kind", "description": "The kind of order adjustment (eg. refund, restock, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "The reason for the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_set": {"name": "amount_set", "description": "Amount set towards the order adjustment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount_set": {"name": "tax_amount_set", "description": "Tax amount set towards the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_adjustment.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table", "enabled": true}, "created_at": 1665702405.036482, "compiled_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_adjustment_tmp`\n\n),\n\nrenamed as (\n\n    select\n        \n    cast(null as \n    numeric\n) as order_adjustment_id , \n    cast(null as \n    numeric\n) as \n    \n    order_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    refund_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    amount\n    \n , \n    cast(null as \n    float64\n) as \n    \n    tax_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    kind\n    \n , \n    cast(null as \n    string\n) as \n    \n    reason\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n \n\n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n        \n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_adjustment`"}, "model.shopify_source.stg_shopify__customer": {"raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__customer_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('customer_pass_through_columns') %}\n      ,\n      {{ var('customer_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__customer_tmp", "model.shopify_source.stg_shopify__customer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__customer"], "unique_id": "model.shopify_source.stg_shopify__customer", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__customer.sql", "original_file_path": "models/stg_shopify__customer.sql", "name": "stg_shopify__customer", "alias": "stg_shopify__customer", "checksum": {"name": "sha256", "checksum": "e43df3b376bae7b581cfb9514f59c82263bbba83447e9bd440a214e8c2dca709"}, "tags": [], "refs": [["stg_shopify__customer_tmp"], ["stg_shopify__customer_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_accepted_marketing": {"name": "has_accepted_marketing", "description": "Whether the customer has consented to receive marketing material via email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orders_count": {"name": "orders_count", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spent": {"name": "total_spent", "description": "The total amount of money that the customer has spent across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table"}, "created_at": 1665702405.010729, "compiled_sql": "with source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__customer_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as has_accepted_marketing , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    numeric\n) as \n    \n    default_address_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    email\n    \n , \n    cast(null as \n    string\n) as \n    \n    first_name\n    \n , \n    cast(null as \n    numeric\n) as customer_id , \n    cast(null as \n    string\n) as \n    \n    last_name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    orders_count\n    \n , \n    cast(null as \n    string\n) as \n    \n    phone\n    \n , \n    cast(null as \n    string\n) as account_state , \n    cast(null as boolean) as is_tax_exempt , \n    cast(null as \n    float64\n) as \n    \n    total_spent\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp , \n    cast(null as boolean) as is_verified_email \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__customer`"}, "model.shopify_source.stg_shopify__order_line_refund": {"raw_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\nwith source as (\n\n    select * from {{ ref('stg_shopify__order_line_refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_refund_tmp')),\n                staging_columns=get_order_line_refund_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_refund_pass_through_columns') %}\n      ,\n      {{ var('order_line_refund_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.shopify_source.get_order_line_refund_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__order_line_refund_tmp", "model.shopify_source.stg_shopify__order_line_refund_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "stg_shopify__order_line_refund"], "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "stg_shopify__order_line_refund.sql", "original_file_path": "models/stg_shopify__order_line_refund.sql", "name": "stg_shopify__order_line_refund", "alias": "stg_shopify__order_line_refund", "checksum": {"name": "sha256", "checksum": "0d7b02b07f95694dd5358ec919659f16bdccf708f906546b99f448355b1253cd"}, "tags": [], "refs": [["stg_shopify__order_line_refund_tmp"], ["stg_shopify__order_line_refund_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a line item from an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_line_refund_id": {"name": "order_line_refund_id", "description": "The unique identifier of the line item in the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "TThe unique identifier of the location where the items will be restockedBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_line_id": {"name": "order_line_id", "description": "The ID of the related line item in the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the associated line item that was returned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The ID of the related refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "restock_type": {"name": "restock_type", "description": "How this refund line item affects inventory levels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Subtotal amount of the order line refund", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The total tax applied to the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_source://models/stg_shopify.yml", "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_line_refund.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "table", "enabled": true}, "created_at": 1665702405.012216, "compiled_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    numeric\n) as order_line_refund_id , \n    cast(null as \n    numeric\n) as \n    \n    location_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    order_line_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    subtotal\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    total_tax\n    \n , \n    cast(null as \n    float64\n) as \n    \n    quantity\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    refund_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    restock_type\n    \n \n\n\n\n      --The below script allows for pass through columns.\n      \n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`"}, "model.shopify_source.stg_shopify__customer_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='customer', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='customer_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_customer_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__customer_tmp"], "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__customer_tmp.sql", "original_file_path": "models/tmp/stg_shopify__customer_tmp.sql", "name": "stg_shopify__customer_tmp", "alias": "stg_shopify__customer_tmp", "checksum": {"name": "sha256", "checksum": "1f896e84164292f48db1c4eddfd6b3afef9ce4661ad2ab160c8721c8e620026c"}, "tags": [], "refs": [["shopify_customer_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__customer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.6792011, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_customer_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__customer_tmp`"}, "model.shopify_source.stg_shopify__order_line_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__order_line_tmp"], "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__order_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_line_tmp.sql", "name": "stg_shopify__order_line_tmp", "alias": "stg_shopify__order_line_tmp", "checksum": {"name": "sha256", "checksum": "778359b2c17590b95d7b5709bfdd28b50d323b905e4277c74203416f08ee458e"}, "tags": [], "refs": [["shopify_order_line_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_line_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.688013, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_line_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_tmp`"}, "model.shopify_source.stg_shopify__refund_tmp": {"raw_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='refund_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_refund_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__refund_tmp"], "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__refund_tmp.sql", "original_file_path": "models/tmp/stg_shopify__refund_tmp.sql", "name": "stg_shopify__refund_tmp", "alias": "stg_shopify__refund_tmp", "checksum": {"name": "sha256", "checksum": "2bcf1d64f126acc4d271984df2b6332286bf10a7345962f7037c391d8ecdbdbd"}, "tags": [], "refs": [["shopify_refund_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__refund_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view", "enabled": true}, "created_at": 1665702404.691766, "compiled_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_refund_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund_tmp`"}, "model.shopify_source.stg_shopify__product_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_product_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__product_tmp"], "unique_id": "model.shopify_source.stg_shopify__product_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__product_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_tmp.sql", "name": "stg_shopify__product_tmp", "alias": "stg_shopify__product_tmp", "checksum": {"name": "sha256", "checksum": "4c88fa0dabe17fa99b7509af7b3518c844df1747e28e6c7ac4f0a8262424e91a"}, "tags": [], "refs": [["shopify_product_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.695369, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_product_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_tmp`"}, "model.shopify_source.stg_shopify__order_adjustment_tmp": {"raw_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_adjustment', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_adjustment_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__order_adjustment_tmp"], "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__order_adjustment_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_adjustment_tmp.sql", "name": "stg_shopify__order_adjustment_tmp", "alias": "stg_shopify__order_adjustment_tmp", "checksum": {"name": "sha256", "checksum": "e3d5e7ba5a680437560ef21796b014718c45d20c52fbf4ac950d8eb687348d96"}, "tags": [], "refs": [["shopify_order_adjustment_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_adjustment_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view", "enabled": true}, "created_at": 1665702404.69854, "compiled_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_adjustment_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_adjustment_tmp`"}, "model.shopify_source.stg_shopify__order_line_refund_tmp": {"raw_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_line_refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_refund_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__order_line_refund_tmp"], "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__order_line_refund_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_line_refund_tmp.sql", "name": "stg_shopify__order_line_refund_tmp", "alias": "stg_shopify__order_line_refund_tmp", "checksum": {"name": "sha256", "checksum": "33bb981405f33c32bbe9c2107a9ba93fd70b9e59578befc3c9e7f78a68c27eb2"}, "tags": [], "refs": [["shopify_order_line_refund_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_line_refund_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view", "enabled": true}, "created_at": 1665702404.702008, "compiled_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_line_refund_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund_tmp`"}, "model.shopify_source.stg_shopify__transaction_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='transaction', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='transaction_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__transaction_tmp"], "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__transaction_tmp.sql", "original_file_path": "models/tmp/stg_shopify__transaction_tmp.sql", "name": "stg_shopify__transaction_tmp", "alias": "stg_shopify__transaction_tmp", "checksum": {"name": "sha256", "checksum": "9a4cf0c7a2495c01fd10f0d88655aaffe63ef8b3cc94883e10507b034285f978"}, "tags": [], "refs": [["shopify_transaction_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__transaction_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.705564, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_transaction_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__transaction_tmp`"}, "model.shopify_source.stg_shopify__product_variant_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product_variant', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_variant_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__product_variant_tmp"], "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__product_variant_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_variant_tmp.sql", "name": "stg_shopify__product_variant_tmp", "alias": "stg_shopify__product_variant_tmp", "checksum": {"name": "sha256", "checksum": "cbb9a84c332f17d90ad953536a449714fac6f77f871da604d43ffb846f6d5621"}, "tags": [], "refs": [["shopify_product_variant_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_variant_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.7093241, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_product_variant_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_variant_tmp`"}, "model.shopify_source.stg_shopify__order_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_shopify", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_shopify", "fqn": ["shopify_source", "tmp", "stg_shopify__order_tmp"], "unique_id": "model.shopify_source.stg_shopify__order_tmp", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "tmp/stg_shopify__order_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_tmp.sql", "name": "stg_shopify__order_tmp", "alias": "stg_shopify__order_tmp", "checksum": {"name": "sha256", "checksum": "f4fd2563557b13c2b54531a7fa9995e496aa1b39432d729a010ddcb7e10001ae"}, "tags": [], "refs": [["shopify_order_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_shopify", "materialized": "view"}, "created_at": 1665702404.712638, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`shopify_order_data`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_tmp`"}, "model.klaviyo_source.stg_klaviyo__person": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__person_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__person_tmp')),\n                staging_columns=get_person_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as person_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        zip,\n        created as created_at,\n        email,\n        first_name || ' ' || last_name as full_name,\n        latitude,\n        longitude,\n        organization,\n        phone_number,\n        region, -- state in USA\n        timezone,\n        title,\n        updated as updated_at,\n        source_relation\n        \n        {{ fivetran_utils.fill_pass_through_columns('klaviyo__person_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_person_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.klaviyo_source.stg_klaviyo__person_tmp", "model.klaviyo_source.stg_klaviyo__person_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__person"], "unique_id": "model.klaviyo_source.stg_klaviyo__person", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__person.sql", "original_file_path": "models/stg_klaviyo__person.sql", "name": "stg_klaviyo__person", "alias": "stg_klaviyo__person", "checksum": {"name": "sha256", "checksum": "0c4d31fb3c257dff6d4c5123f3352ee790db81b766ac4f3be3b1cdb06d19b45f"}, "tags": [], "refs": [["stg_klaviyo__person_tmp"], ["stg_klaviyo__person_tmp"]], "sources": [], "metrics": [], "description": "Table storing the profiles of all people/users interacted with.  Custom columns can be passed through to downstream models via the `klaviyo__person_pass_through_columns` variable  (see README for details).\n", "columns": {"person_id": {"name": "person_id", "description": "Unique ID of the user if you use your own unique identifier. Otherwise, Klaviyo  recommends using the email as the primary key. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "First line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "Second line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "Postal code where they live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the person's profile was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address and the unique identifier for a profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Person's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization": {"name": "organization", "description": "Business organization they belong to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Associated phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region or state they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone they are situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title at their business or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the person profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__person.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.142082, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    address_1\n    \n , \n    cast(null as \n    string\n) as \n    \n    address_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    city\n    \n , \n    cast(null as \n    string\n) as \n    \n    country\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created\n    \n , \n    cast(null as \n    string\n) as \n    \n    email\n    \n , \n    cast(null as \n    string\n) as \n    \n    first_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    last_name\n    \n , \n    cast(null as \n    float64\n) as \n    \n    latitude\n    \n , \n    cast(null as \n    float64\n) as \n    \n    longitude\n    \n , \n    cast(null as \n    string\n) as \n    \n    organization\n    \n , \n    cast(null as \n    string\n) as \n    \n    phone_number\n    \n , \n    cast(null as \n    string\n) as \n    \n    region\n    \n , \n    cast(null as \n    string\n) as \n    \n    timezone\n    \n , \n    cast(null as \n    string\n) as \n    \n    title\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated\n    \n , \n    cast(null as \n    string\n) as \n    \n    zip\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as person_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        zip,\n        created as created_at,\n        email,\n        first_name || ' ' || last_name as full_name,\n        latitude,\n        longitude,\n        organization,\n        phone_number,\n        region, -- state in USA\n        timezone,\n        title,\n        updated as updated_at,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`"}, "model.klaviyo_source.stg_klaviyo__campaign": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__campaign_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__campaign_tmp')),\n                staging_columns=get_campaign_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        campaign_type,\n        created as created_at,\n        email_template_id,\n        from_email,\n        from_name,\n        id as campaign_id,\n        is_segmented,\n        name as campaign_name,\n        send_time as scheduled_to_send_at,\n        sent_at,\n        coalesce(status, lower(status_label)) as status,\n        status_id,\n        subject,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_campaign_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.klaviyo_source.stg_klaviyo__campaign_tmp", "model.klaviyo_source.stg_klaviyo__campaign_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__campaign"], "unique_id": "model.klaviyo_source.stg_klaviyo__campaign", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__campaign.sql", "original_file_path": "models/stg_klaviyo__campaign.sql", "name": "stg_klaviyo__campaign", "alias": "stg_klaviyo__campaign", "checksum": {"name": "sha256", "checksum": "3bb055bc8484630176011790a666821ae220126184e05eaff411aa44406048e2"}, "tags": [], "refs": [["stg_klaviyo__campaign_tmp"], ["stg_klaviyo__campaign_tmp"]], "sources": [], "metrics": [], "description": "Table capturing email campaigns in Klaviyo.\n", "columns": {"campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the campaign was created, in UTC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_template_id": {"name": "email_template_id", "description": "Foreign key referencing the ID of the `email_template` object that will be the  content of this campaign. Note the Email Template is copied when creating this campaign,  so future changes to that Email Template will not alter the content of this campaign.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address your email will be sent from and will be used in the reply-to header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_name": {"name": "from_name", "description": "The name or label associated with the email address you're sending from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_segmented": {"name": "is_segmented", "description": "Boolean that is true if the campaign is directed at a Klaviyo segment (not a list).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A name for this campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_to_send_at": {"name": "scheduled_to_send_at", "description": "Timestamp of when the campaign is scheduled to be sent in the future, if  [\"smart send time\"](https://help.klaviyo.com/hc/en-us/articles/360029794371-Smart-Send-Time-in-Klaviyo#how-to-utilize-smart-send-time3) is used. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "Timestamp of when the campaign was first sent out to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the campaign. Either \"draft\", \"scheduled\", \"sent\", or \"cancelled\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Corresponding ID to the current status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the campaign's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the campaign was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__campaign.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.1050382, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created\n    \n , \n    cast(null as \n    string\n) as \n    \n    email_template_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    from_email\n    \n , \n    cast(null as \n    string\n) as \n    \n    from_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    is_segmented\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    send_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    sent_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    status_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    status_label\n    \n , \n    cast(null as \n    string\n) as \n    \n    subject\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        campaign_type,\n        created as created_at,\n        email_template_id,\n        from_email,\n        from_name,\n        id as campaign_id,\n        is_segmented,\n        name as campaign_name,\n        send_time as scheduled_to_send_at,\n        sent_at,\n        coalesce(status, lower(status_label)) as status,\n        status_id,\n        subject,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign`"}, "model.klaviyo_source.stg_klaviyo__metric": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__metric_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__metric_tmp')),\n                staging_columns=get_metric_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        id as metric_id,\n        integration_id,\n        name as metric_name,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_metric_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.klaviyo_source.stg_klaviyo__metric_tmp", "model.klaviyo_source.stg_klaviyo__metric_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__metric"], "unique_id": "model.klaviyo_source.stg_klaviyo__metric", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__metric.sql", "original_file_path": "models/stg_klaviyo__metric.sql", "name": "stg_klaviyo__metric", "alias": "stg_klaviyo__metric", "checksum": {"name": "sha256", "checksum": "d131ba8b5c6b489c12dc687514ef82b359aecaa82175b66d77fa44344b4eb58f"}, "tags": [], "refs": [["stg_klaviyo__metric_tmp"], ["stg_klaviyo__metric_tmp"]], "sources": [], "metrics": [], "description": "Table of tracked metrics across integrations in Klaviyo.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the metric was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_id": {"name": "metric_id", "description": "Unique ID of the metric being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "Foreign key referencing the INTEGRATION that the metric is being pulled from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_name": {"name": "metric_name", "description": "Name of the metric (same as `EVENT.type`)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the metric was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__metric.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.143073, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    integration_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        id as metric_id,\n        integration_id,\n        name as metric_name,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric`"}, "model.klaviyo_source.stg_klaviyo__integration": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__integration_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__integration_tmp')),\n                staging_columns=get_integration_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        category,\n        id as integration_id,\n        name as integration_name,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_integration_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.klaviyo_source.stg_klaviyo__integration_tmp", "model.klaviyo_source.stg_klaviyo__integration_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__integration"], "unique_id": "model.klaviyo_source.stg_klaviyo__integration", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__integration.sql", "original_file_path": "models/stg_klaviyo__integration.sql", "name": "stg_klaviyo__integration", "alias": "stg_klaviyo__integration", "checksum": {"name": "sha256", "checksum": "cf1d2569260342f615850f5d782fb0e166d1b70ea3a703fb2248d6f457023cf8"}, "tags": [], "refs": [["stg_klaviyo__integration_tmp"], ["stg_klaviyo__integration_tmp"]], "sources": [], "metrics": [], "description": "Table storing third-party platforms integrated into Klaviyo.", "columns": {"category": {"name": "category", "description": "Use-case category of the integrated platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "Unique ID of the integration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "Name of the integrated platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__integration.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.139513, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    category\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        category,\n        id as integration_id,\n        name as integration_name,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration`"}, "model.klaviyo_source.stg_klaviyo__flow": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__flow_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__flow_tmp')),\n                staging_columns=get_flow_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        id as flow_id,\n        name as flow_name,\n        status,\n        {% if target.type == 'snowflake'%}\n        \"TRIGGER\" \n        {% else %}\n        trigger\n        {% endif %}\n        as flow_trigger,\n        updated as updated_at,\n        customer_filter as person_filter,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_flow_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.klaviyo_source.stg_klaviyo__flow_tmp", "model.klaviyo_source.stg_klaviyo__flow_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__flow"], "unique_id": "model.klaviyo_source.stg_klaviyo__flow", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__flow.sql", "original_file_path": "models/stg_klaviyo__flow.sql", "name": "stg_klaviyo__flow", "alias": "stg_klaviyo__flow", "checksum": {"name": "sha256", "checksum": "a74ad01e8fbca823f7ec229f1d0c59171c4a1200e314cb06e0ac75da0bc72792"}, "tags": [], "refs": [["stg_klaviyo__flow_tmp"], ["stg_klaviyo__flow_tmp"]], "sources": [], "metrics": [], "description": "Table of automated, triggered flow sequences in Klaviyo.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the flow was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Unique ID of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the flow. Either 'manual', 'live', or 'draft'. Read more [here](https://help.klaviyo.com/hc/en-us/articles/115002774932-Getting-Started-with-Flows#the-flow-action-status9).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_trigger": {"name": "flow_trigger", "description": "JSON of metric, segment, list, and/or date-property filters that will trigger this flow. These are applied to the **event level**.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the flow was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_filter": {"name": "person_filter", "description": "JSON of flow filters placed on the **person level** that will trigger this flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__flow.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.138697, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n        \n            \n            `trigger`\n            \n        \n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated\n    \n , \n    cast(null as \n    string\n) as \n    \n    customer_filter\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        id as flow_id,\n        name as flow_name,\n        status,\n        \n        trigger\n        \n        as flow_trigger,\n        updated as updated_at,\n        customer_filter as person_filter,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow`"}, "model.klaviyo_source.stg_klaviyo__event": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_klaviyo__event_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_klaviyo__event_tmp')),\n                staging_columns=get_event_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='klaviyo_union_schemas', \n            union_database_variable='klaviyo_union_databases') \n        }}\n    from base\n),\n\nrename as (\n    \n    select \n        _variation as variation_id,\n        campaign_id,\n        cast(timestamp as {{ dbt_utils.type_timestamp() }} ) as occurred_at,\n        flow_id,\n        flow_message_id,\n        id as event_id,\n        metric_id,\n        person_id,\n        type,\n        uuid,\n        property_value as numeric_value,\n        _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('klaviyo__event_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfinal as (\n    \n    select \n        *,\n        cast( {{ dbt_utils.date_trunc('day', 'occurred_at') }} as date) as occurred_on,\n        {{ dbt_utils.surrogate_key(['event_id', 'source_relation']) }} as unique_event_id\n\n    from rename\n\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.klaviyo_source.get_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.dbt_utils.date_trunc", "macro.dbt_utils.surrogate_key"], "nodes": ["model.klaviyo_source.stg_klaviyo__event_tmp", "model.klaviyo_source.stg_klaviyo__event_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "stg_klaviyo__event"], "unique_id": "model.klaviyo_source.stg_klaviyo__event", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "stg_klaviyo__event.sql", "original_file_path": "models/stg_klaviyo__event.sql", "name": "stg_klaviyo__event", "alias": "stg_klaviyo__event", "checksum": {"name": "sha256", "checksum": "3f6b83c7355226d28545f2ef688933906d57e1acdd0b840bb6a504cae3b3bba5"}, "tags": [], "refs": [["stg_klaviyo__event_tmp"], ["stg_klaviyo__event_tmp"]], "sources": [], "metrics": [], "description": "Table of events (and metrics) triggered in Klaviyo or via its integrations. Custom columns can be passed through to downstream models via the `klaviyo__event_pass_through_columns` variable  (see README for details).\n", "columns": {"variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key referencing the CAMPAIGN that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Timestamp of when the event was triggered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Foreign key referencing the FLOW that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_message_id": {"name": "flow_message_id", "description": "Unique ID of the FLOW_MESSAGE that the event is attributed to.  This does not map onto another table.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Unique ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_id": {"name": "metric_id", "description": "Foreign key referencing the metric being captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "Foreign key referencing the PERSON who triggered the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of event that was triggered. This is the same as the METRIC name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Universally Unique Identifier of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numeric_value": {"name": "numeric_value", "description": "Numeric value associated with the event (ie the dollars associated with a purchase).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_on": {"name": "occurred_on", "description": "Calendar date (UTC) on which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_event_id": {"name": "unique_event_id", "description": "The unique identifier for the combination of event_id and source_relation columns.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo_source://models/stg_klaviyo.yml", "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo__event.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_klaviyo"}, "created_at": 1665702405.137428, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    _variation\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    datetime\n    \n , \n    cast(null as \n    string\n) as \n    \n    flow_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    flow_message_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    metric_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    person_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    timestamp\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    string\n) as \n    \n    uuid\n    \n , \n    cast(null as \n    string\n) as \n    \n    property_value\n    \n \n\n\n        \n\n\n, cast('' as \n    string\n) as source_relation\n\n\n\n    from base\n),\n\nrename as (\n    \n    select \n        _variation as variation_id,\n        campaign_id,\n        cast(timestamp as \n    timestamp\n ) as occurred_at,\n        flow_id,\n        flow_message_id,\n        id as event_id,\n        metric_id,\n        person_id,\n        type,\n        uuid,\n        property_value as numeric_value,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfinal as (\n    \n    select \n        *,\n        cast( timestamp_trunc(\n        cast(occurred_at as timestamp),\n        day\n    ) as date) as occurred_on,\n        to_hex(md5(cast(coalesce(cast(event_id as \n    string\n), '') || '-' || coalesce(cast(source_relation as \n    string\n), '') as \n    string\n))) as unique_event_id\n\n    from rename\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event`"}, "model.klaviyo_source.stg_klaviyo__event_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='event', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='event_table',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.event"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__event_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__event_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__event_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__event_tmp.sql", "name": "stg_klaviyo__event_tmp", "alias": "stg_klaviyo__event_tmp", "checksum": {"name": "sha256", "checksum": "0aa5096828da6b1f75fb7a93d5f7621f024adb2ef241014a075abae8511fb337"}, "tags": [], "refs": [["event"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__event_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.813214, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`event`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event_tmp`"}, "model.klaviyo_source.stg_klaviyo__metric_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='metric', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='metric',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.metric"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__metric_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__metric_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__metric_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__metric_tmp.sql", "name": "stg_klaviyo__metric_tmp", "alias": "stg_klaviyo__metric_tmp", "checksum": {"name": "sha256", "checksum": "1f887542c817cae88b22c9632e93da3ae5fa6c02dadc22e8901484b55e4c5f2d"}, "tags": [], "refs": [["metric"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__metric_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.816493, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`metric`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric_tmp`"}, "model.klaviyo_source.stg_klaviyo__campaign_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='campaign', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='campaign',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.campaign"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__campaign_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__campaign_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__campaign_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__campaign_tmp.sql", "name": "stg_klaviyo__campaign_tmp", "alias": "stg_klaviyo__campaign_tmp", "checksum": {"name": "sha256", "checksum": "f494e0b1c1093180196545a7c05c0f8f7f8ed074e63328057021091c1d776530"}, "tags": [], "refs": [["campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__campaign_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.820361, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`campaign`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign_tmp`"}, "model.klaviyo_source.stg_klaviyo__integration_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='integration', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='integration',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.integration"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__integration_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__integration_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__integration_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__integration_tmp.sql", "name": "stg_klaviyo__integration_tmp", "alias": "stg_klaviyo__integration_tmp", "checksum": {"name": "sha256", "checksum": "174b16d87563e123fb0d813d3749c31fb80fc08df48143729e28f34bce0a2e04"}, "tags": [], "refs": [["integration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__integration_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.8235729, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`integration`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration_tmp`"}, "model.klaviyo_source.stg_klaviyo__flow_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='flow', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='flow',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.flow"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__flow_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__flow_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__flow_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__flow_tmp.sql", "name": "stg_klaviyo__flow_tmp", "alias": "stg_klaviyo__flow_tmp", "checksum": {"name": "sha256", "checksum": "4437a7971622b8cd114313ee2b1a59b992ba862c49f0086851d5d60082617b0c"}, "tags": [], "refs": [["flow"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__flow_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.826895, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`flow`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow_tmp`"}, "model.klaviyo_source.stg_klaviyo__person_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='person', \n        database_variable='klaviyo_database', \n        schema_variable='klaviyo_schema', \n        default_database=target.database,\n        default_schema='klaviyo',\n        default_variable='person',\n        union_schema_variable='klaviyo_union_schemas',\n        union_database_variable='klaviyo_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.shopify_holistic_reporting_integration_tests.person"]}, "config": {"enabled": true, "alias": null, "schema": "stg_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_stg_klaviyo", "fqn": ["klaviyo_source", "tmp", "stg_klaviyo__person_tmp"], "unique_id": "model.klaviyo_source.stg_klaviyo__person_tmp", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "tmp/stg_klaviyo__person_tmp.sql", "original_file_path": "models/tmp/stg_klaviyo__person_tmp.sql", "name": "stg_klaviyo__person_tmp", "alias": "stg_klaviyo__person_tmp", "checksum": {"name": "sha256", "checksum": "ec768db1c8d1d5eb47e967bf23bb95726133d2a298373f757930302de96e2910"}, "tags": [], "refs": [["person"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/tmp/stg_klaviyo__person_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_klaviyo"}, "created_at": 1665702404.83108, "compiled_sql": "\n\n\n\n    select * \n    from `dbt-package-testing`.`linkedin_integration_tests`.`person`\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person_tmp`"}, "model.klaviyo.klaviyo__person_campaign_flow": {"raw_sql": "with events as (\n    select *\n    from {{ ref('klaviyo__events') }}\n),\n\npivot_out_events as (\n    \n    select \n        person_id,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    {% for rm in var('klaviyo__sum_revenue_metrics') %}\n    , sum(case when lower(type) = '{{ rm | lower }}' then \n            coalesce({{ fivetran_utils.try_cast(\"numeric_value\", \"numeric\") }}, 0)\n            else 0 end) \n        as {{ 'sum_revenue_' ~ rm | replace(' ', '_') | replace('(', '') | replace(')', '') | lower }} -- removing special characters that I have seen in different integration events\n    {% endfor %}\n\n    -- count up the number of instances of each metric\n    {% for cm in var('klaviyo__count_metrics') %}\n    , sum(case when lower(type) = '{{ cm | lower }}' then 1 else 0 end) \n        as {{ 'count_' ~ cm | replace(' ', '_') | replace('(', '') | replace(')', '') | lower }} -- removing special characters that I have seen in different integration events\n    {% endfor %}\n\n    from events\n    {{ dbt_utils.group_by(n=7) }}\n)\n\nselect *\nfrom pivot_out_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.try_cast", "macro.dbt_utils.group_by"], "nodes": ["model.klaviyo.klaviyo__events"]}, "config": {"enabled": true, "alias": null, "schema": "klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_klaviyo", "fqn": ["klaviyo", "klaviyo__person_campaign_flow"], "unique_id": "model.klaviyo.klaviyo__person_campaign_flow", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "klaviyo__person_campaign_flow.sql", "original_file_path": "models/klaviyo__person_campaign_flow.sql", "name": "klaviyo__person_campaign_flow", "alias": "klaviyo__person_campaign_flow", "checksum": {"name": "sha256", "checksum": "89abb4c1b2f90ada510aba4f45cb935f457c0e0a776a6f761826e5b270bc7817"}, "tags": [], "refs": [["klaviyo__events"]], "sources": [], "metrics": [], "description": "Table that aggregates event metrics to the person-campaign or -flow grain (but note that if a user interacts  with 2 different variations of a flow/campaign somehow, they will have 2 records).  Also note that organic  interactions (someone with null campaign_id/flow_id) are included in this table. \n**Counts** of the instances of the events, as well as **sums** of the numeric value associated  with events (i.e. revenue) will be pivoted out into columns, as configured by the `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics` variables, respectively. See the dbt_project.yml file for the default metrics used.  These columns will be prefixed with `count_` and `sum_revenue_`.\n", "columns": {"person_id": {"name": "person_id", "description": "Foreign key referencing the PERSON who interacted with the flow/message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "Foreign key referencing the CAMPAIGN attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "Foreign key referencing the FLOW attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A name for this campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first ever interaction between this campaign/flow and a person. In other words, the first event trigger attributed to the campaign/flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the most recent interaction between this campaign/flow and a person. In other words, the last event trigger attributed to the campaign/flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/klaviyo__person_campaign_flow.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "klaviyo"}, "created_at": 1665702405.187114, "compiled_sql": "with events as (\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`\n),\n\npivot_out_events as (\n    \n    select \n        person_id,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then 1 else 0 end) \n        as count_cancelled_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'fulfilled order' then 1 else 0 end) \n        as count_fulfilled_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'bounced email' then 1 else 0 end) \n        as count_bounced_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'dropped email' then 1 else 0 end) \n        as count_dropped_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'subscribed to list' then 1 else 0 end) \n        as count_subscribed_to_list -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed to list' then 1 else 0 end) \n        as count_unsubscribed_to_list -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'updated email preferences' then 1 else 0 end) \n        as count_updated_email_preferences -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'subscribed to back in stock' then 1 else 0 end) \n        as count_subscribed_to_back_in_stock -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'merged profile' then 1 else 0 end) \n        as count_merged_profile -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'consented to receive sms' then 1 else 0 end) \n        as count_consented_to_receive_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'failed to deliver sms' then 1 else 0 end) \n        as count_failed_to_deliver_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom pivot_out_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__person_campaign_flow`"}, "model.klaviyo.klaviyo__persons": {"raw_sql": "with person as (\n\n    select *\n    from {{ var('person') }}\n),\n\nperson_metrics as (\n\n    select *\n    from {{ ref('int_klaviyo__person_metrics') }}\n),\n\nperson_join as (\n\n    select\n        person.*,\n        {{ dbt_utils.star(from=ref('int_klaviyo__person_metrics'), except=[\"person_id\", \"source_relation\"]) }}\n\n    from person\n    left join person_metrics on (\n        person.person_id = person_metrics.person_id\n        and person.source_relation = person_metrics.source_relation\n    )\n\n)\n\nselect *\nfrom person_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.klaviyo_source.stg_klaviyo__person", "model.klaviyo.int_klaviyo__person_metrics", "model.klaviyo.int_klaviyo__person_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_klaviyo", "fqn": ["klaviyo", "klaviyo__persons"], "unique_id": "model.klaviyo.klaviyo__persons", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "klaviyo__persons.sql", "original_file_path": "models/klaviyo__persons.sql", "name": "klaviyo__persons", "alias": "klaviyo__persons", "checksum": {"name": "sha256", "checksum": "4228e8c8280040f57997ecd7d0cd1c726cee6789721533903c2f75ad6cefc473"}, "tags": [], "refs": [["stg_klaviyo__person"], ["int_klaviyo__person_metrics"], ["int_klaviyo__person_metrics"]], "sources": [], "metrics": [], "description": "Table of unique person profiles, enhanced with event, campaign, flow, and revenue metrics. \n**Counts** of instances of triggered events and **sums** of the numeric value (i.e. revenue) associated  with events (total vs organic/not attributed to flows or campaigns) will be pivoted out into columns, as configured by the  `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics`variables, respectively. See the dbt_project.yml file for  the default metrics used.  These columns will be prefixed with `total_count_`, `total_sum_revenue_` (organic + attributed), and `organic_sum_revenue_` (not attributed to a campaign or flow). \n", "columns": {"person_id": {"name": "person_id", "description": "Unique ID of the user if you use your own unique identifier. Otherwise, Klaviyo  recommends using the email as the primary key. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "First line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "Second line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "Postal code where they live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the person's profile was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address and the unique identifier for a profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Person's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization": {"name": "organization", "description": "Business organization they belong to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Associated phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region or state they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone they are situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title at their business or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the person profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_campaigns": {"name": "count_total_campaigns", "description": "Count of the number of campaigns this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_flows": {"name": "count_total_flows", "description": "Count of the number of flows this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of when the user first triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of when the user last triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_campaign_touch_at": {"name": "first_campaign_touch_at", "description": "Timestamp of when the user first interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_campaign_touch_at": {"name": "last_campaign_touch_at", "description": "Timestamp of when the user last interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_flow_touch_at": {"name": "first_flow_touch_at", "description": "Timestamp of when the user first interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_flow_touch_at": {"name": "last_flow_touch_at", "description": "Timestamp of when the user last interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/klaviyo__persons.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "klaviyo"}, "created_at": 1665702405.195345, "compiled_sql": "with person as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\n),\n\nperson_metrics as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__person_metrics`\n),\n\nperson_join as (\n\n    select\n        person.*,\n        *\n\n    from person\n    left join person_metrics on (\n        person.person_id = person_metrics.person_id\n        and person.source_relation = person_metrics.source_relation\n    )\n\n)\n\nselect *\nfrom person_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`"}, "model.klaviyo.klaviyo__flows": {"raw_sql": "with flow as (\n\n    select *\n    from {{ var('flow') }}\n),\n\nflow_metrics as (\n\n    select *\n    from {{ ref('int_klaviyo__campaign_flow_metrics') }}\n),\n\nflow_join as (\n    \n    {% set exclude_fields = ['last_touch_campaign_id', 'last_touch_flow_id', 'source_relation'] %}\n\n    select\n        flow.*, -- has flow_id and source_relation\n        {{ dbt_utils.star(from=ref('int_klaviyo__campaign_flow_metrics'), except=exclude_fields) }}\n\n    from flow\n    left join flow_metrics on (\n      flow.flow_id = flow_metrics.last_touch_flow_id\n      and\n      flow.source_relation = flow_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['flow_id','variation_id']) }} as flow_variation_key\n\n    from flow_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.surrogate_key"], "nodes": ["model.klaviyo_source.stg_klaviyo__flow", "model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__campaign_flow_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_klaviyo", "fqn": ["klaviyo", "klaviyo__flows"], "unique_id": "model.klaviyo.klaviyo__flows", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "klaviyo__flows.sql", "original_file_path": "models/klaviyo__flows.sql", "name": "klaviyo__flows", "alias": "klaviyo__flows", "checksum": {"name": "sha256", "checksum": "e51636d4194dd04fc1bd023c6aa0a982fa517a29f6734d611756bda94c123e0e"}, "tags": [], "refs": [["stg_klaviyo__flow"], ["int_klaviyo__campaign_flow_metrics"], ["int_klaviyo__campaign_flow_metrics"]], "sources": [], "metrics": [], "description": "Table of unique flow versions. A flow with 2 variations will have 2 distinct rows.  **Counts** of the unique users and instances of the events, as well as **sums** of the numeric value associated  with events (i.e. revenue) will be pivoted out into columns, as configured by the `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics` variables, respectively. See the dbt_project.yml file for the default metrics used.  These columns will be prefixed with `count_`, `unique_count_`, and `sum_revenue_`.\n", "columns": {"flow_variation_key": {"name": "flow_variation_key", "description": "Unique key hashed on the flow and variation IDs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the flow was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Unique ID of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the flow. Either 'manual', 'live', or 'draft'. Read more [here](https://help.klaviyo.com/hc/en-us/articles/115002774932-Getting-Started-with-Flows#the-flow-action-status9).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_trigger": {"name": "flow_trigger", "description": "JSON of metric, segment, list, and/or date-property filters that will trigger this flow. These are applied to the **event level**.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the flow was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_filter": {"name": "person_filter", "description": "JSON of flow filters placed on the **person level** that will trigger this flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_count_unique_people": {"name": "total_count_unique_people", "description": "The count of the distinct people that have interacted with this flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first ever interaction between this flow and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the most recent interaction between this flow and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/klaviyo__flows.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "klaviyo"}, "created_at": 1665702405.1917791, "compiled_sql": "with flow as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nflow_metrics as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\nflow_join as (\n    \n    \n\n    select\n        flow.*, -- has flow_id and source_relation\n        *\n\n    from flow\n    left join flow_metrics on (\n      flow.flow_id = flow_metrics.last_touch_flow_id\n      and\n      flow.source_relation = flow_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(flow_id as \n    string\n), '') || '-' || coalesce(cast(variation_id as \n    string\n), '') as \n    string\n))) as flow_variation_key\n\n    from flow_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__flows`"}, "model.klaviyo.klaviyo__campaigns": {"raw_sql": "with campaign as (\n\n    select *\n    from {{ var('campaign') }}\n),\n\ncampaign_metrics as (\n\n    select *\n    from {{ ref('int_klaviyo__campaign_flow_metrics') }}\n),\n\ncampaign_join as (\n    \n    {% set exclude_fields = [ 'last_touch_campaign_id', 'last_touch_flow_id', 'source_relation'] %}\n\n    select\n        campaign.*, -- has campaign_id and source_relation\n        {{ dbt_utils.star(from=ref('int_klaviyo__campaign_flow_metrics'), except=exclude_fields) }}\n\n    from campaign\n    left join campaign_metrics on (\n      campaign.campaign_id = campaign_metrics.last_touch_campaign_id\n      and\n      campaign.source_relation = campaign_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','variation_id']) }} as campaign_variation_key\n\n    from campaign_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.surrogate_key"], "nodes": ["model.klaviyo_source.stg_klaviyo__campaign", "model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__campaign_flow_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_klaviyo", "fqn": ["klaviyo", "klaviyo__campaigns"], "unique_id": "model.klaviyo.klaviyo__campaigns", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "klaviyo__campaigns.sql", "original_file_path": "models/klaviyo__campaigns.sql", "name": "klaviyo__campaigns", "alias": "klaviyo__campaigns", "checksum": {"name": "sha256", "checksum": "3f86c2f589802530165ac6e6244681db0f42091784c29a6ae17b752f5ed4cd6f"}, "tags": [], "refs": [["stg_klaviyo__campaign"], ["int_klaviyo__campaign_flow_metrics"], ["int_klaviyo__campaign_flow_metrics"]], "sources": [], "metrics": [], "description": "Table of unique campaign versions. A campaign with 2 variations will have 2 distinct rows.  **Counts** of the unique users and instances of the events, as well as **sums** of the numeric value associated  with events (i.e. revenue) will be pivoted out into columns, as configured by the `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics` variables, respectively. See the dbt_project.yml file for the default metrics used.  These columns will be prefixed with `count_`, `unique_count_`, and `sum_revenue_`.\n", "columns": {"campaign_variation_key": {"name": "campaign_variation_key", "description": "Unique key hashed on the campaign and variation IDs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the campaign was created, in UTC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_template_id": {"name": "email_template_id", "description": "Foreign key referencing the ID of the `email_template` object that will be the  content of this campaign. Note the Email Template is copied when creating this campaign,  so future changes to that Email Template will not alter the content of this campaign.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address your email will be sent from and will be used in the reply-to header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_name": {"name": "from_name", "description": "The name or label associated with the email address you're sending from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_segmented": {"name": "is_segmented", "description": "Boolean that is true if the campaign is directed at a Klaviyo segment (not a list).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A name for this campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_to_send_at": {"name": "scheduled_to_send_at", "description": "Timestamp of when the campaign is scheduled to be sent in the future, if  [\"smart send time\"](https://help.klaviyo.com/hc/en-us/articles/360029794371-Smart-Send-Time-in-Klaviyo#how-to-utilize-smart-send-time3) is used. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "Timestamp of when the campaign was first sent out to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the campaign. Either \"draft\", \"scheduled\", \"sent\", or \"cancelled\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Corresponding ID to the current status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the campaign's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the campaign was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_count_unique_people": {"name": "total_count_unique_people", "description": "The count of the distinct people that have interacted with this campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first ever interaction between this campaign and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the most recent interaction between this campaign and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/klaviyo__campaigns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "klaviyo"}, "created_at": 1665702405.189868, "compiled_sql": "with campaign as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\ncampaign_metrics as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\ncampaign_join as (\n    \n    \n\n    select\n        campaign.*, -- has campaign_id and source_relation\n        *\n\n    from campaign\n    left join campaign_metrics on (\n      campaign.campaign_id = campaign_metrics.last_touch_campaign_id\n      and\n      campaign.source_relation = campaign_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(campaign_id as \n    string\n), '') || '-' || coalesce(cast(variation_id as \n    string\n), '') as \n    string\n))) as campaign_variation_key\n\n    from campaign_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__campaigns`"}, "model.klaviyo.klaviyo__events": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_event_id',\n        partition_by={\n            \"field\": \"occurred_on\",\n            \"data_type\": \"date\"\n        } if target.type == 'bigquery' else none,\n        incremental_strategy = 'merge' if target.type not in ('snowflake', 'postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta'\n    )\n}}\n-- ^ the incremental strategy is split into delete+insert for snowflake since there is a bit of\n-- overlap in transformed data blocks for incremental runs (we look back an extra hour, see lines 23 - 30)\n-- this configuration solution was taken from https://docs.getdbt.com/reference/resource-configs/snowflake-configs#merge-behavior-incremental-models\n\nwith events as (\n\n    select *\n    from {{ ref('int_klaviyo__event_attribution') }}\n\n    {% if is_incremental() %}\n\n    -- most events (from all kinds of integrations) at least once every hour\n    where _fivetran_synced >= cast(coalesce( \n            (\n                select {{ dbt_utils.dateadd(datepart = 'hour', \n                                            interval = -1,\n                                            from_date_or_timestamp = 'max(_fivetran_synced)' ) }}  \n                from {{ this }}\n            ), '2012-01-01') as {{ dbt_utils.type_timestamp() }} ) -- klaviyo was founded in 2012, so let's default the min date to then\n    {% endif %}\n),\n\nevent_fields as (\n\n    -- excluding some fields to rename them and/or make them null if needed\n    {% set exclude_fields = ['touch_session', 'last_touch_id', 'session_start_at', 'session_event_type', 'type', 'session_touch_type'] %}\n    -- as of the patch release of dbt-utils v0.7.3, the snowflake uppercasing is not needed anymore so we have deleted the snowflake conditional in the exclusion\n\n    select \n        {{ dbt_utils.star(from=ref('int_klaviyo__event_attribution'), except=exclude_fields) }},\n\n        type, -- need to pull this out because it gets removed by dbt_utils.star, due to being a substring of 'session_event_type' and 'session_touch_type'\n\n        -- split out campaign and flow IDs\n        case \n            when session_touch_type = 'campaign' then last_touch_id \n        else null end as last_touch_campaign_id,\n        case \n            when session_touch_type = 'flow' then last_touch_id \n        else null end as last_touch_flow_id,\n\n        -- only make these non-null if the event indeed qualified for attribution\n        case \n            when last_touch_id is not null then session_start_at \n        else null end as last_touch_at,\n        case \n            when last_touch_id is not null then session_event_type \n        else null end as last_touch_event_type,\n        case \n            when last_touch_id is not null then session_touch_type \n        else null end as last_touch_type -- flow vs campaign\n\n    \n    from events\n),\n\ncampaign as (\n\n    select *\n    from {{ var('campaign') }}\n),\n\nflow as (\n\n    select *\n    from {{ var('flow') }}\n),\n\nperson as (\n\n    select *\n    from {{ var('person') }}\n),\n\n-- just pulling this to join with INTEGRATION\nmetric as (\n\n    select *\n    from {{ var('metric') }}\n),\n\nintegration as (\n\n    select *\n    from {{ var('integration') }}\n),\n\njoin_fields as (\n\n    select\n        event_fields.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.subject as campaign_subject_line,\n        flow.flow_name, \n        person.city as person_city,\n        person.country as person_country,\n        person.region as person_region,\n        person.email as person_email,\n        person.timezone as person_timezone,\n        integration.integration_name,\n        integration.category as integration_category\n\n    from event_fields\n    left join campaign on (\n      event_fields.last_touch_campaign_id = campaign.campaign_id\n      and\n      event_fields.source_relation = campaign.source_relation\n    )\n    left join flow on (\n      event_fields.last_touch_flow_id = flow.flow_id\n      and\n      event_fields.source_relation = flow.source_relation  \n    )\n    left join person on (\n      event_fields.person_id = person.person_id\n      and\n      event_fields.source_relation = person.source_relation\n    )\n    left join metric on (\n      event_fields.metric_id = metric.metric_id\n      and\n      event_fields.source_relation = metric.source_relation\n    )\n    left join integration on (\n      metric.integration_id = integration.integration_id\n      and\n      metric.source_relation = integration.source_relation\n    )\n)\n\nselect * from join_fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": ["model.klaviyo.int_klaviyo__event_attribution", "model.klaviyo.int_klaviyo__event_attribution", "model.klaviyo_source.stg_klaviyo__campaign", "model.klaviyo_source.stg_klaviyo__flow", "model.klaviyo_source.stg_klaviyo__person", "model.klaviyo_source.stg_klaviyo__metric", "model.klaviyo_source.stg_klaviyo__integration"]}, "config": {"enabled": true, "alias": null, "schema": "klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_event_id", "on_schema_change": "ignore", "grants": {}, "partition_by": {"field": "occurred_on", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_klaviyo", "fqn": ["klaviyo", "klaviyo__events"], "unique_id": "model.klaviyo.klaviyo__events", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "klaviyo__events.sql", "original_file_path": "models/klaviyo__events.sql", "name": "klaviyo__events", "alias": "klaviyo__events", "checksum": {"name": "sha256", "checksum": "57d9d0880b095c3d94680250844b52ad63a63755b2b25870f6ba491933308951"}, "tags": [], "refs": [["int_klaviyo__event_attribution"], ["int_klaviyo__event_attribution"], ["stg_klaviyo__campaign"], ["stg_klaviyo__flow"], ["stg_klaviyo__person"], ["stg_klaviyo__metric"], ["stg_klaviyo__integration"]], "sources": [], "metrics": [], "description": "Table of Klaviyo events, enriched with attribution data (see `int_klaviyo__event_attribution` for details), and  information regarding the event's associated user, flow, campaign, and platform/integration. \nNote: this model has an incremental materialization. Custom event-columns specified by the `klaviyo__event_pass_through_columns` variable will appear here as well.\n", "columns": {"variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key referencing the CAMPAIGN that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Timestamp of when the event was triggered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Foreign key referencing the FLOW that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_message_id": {"name": "flow_message_id", "description": "Unique ID of the FLOW_MESSAGE that the event is attributed to.  This does not map onto another table.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Unique ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_id": {"name": "metric_id", "description": "Foreign key referencing the metric being captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "Foreign key referencing the PERSON who triggered the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of event that was triggered. This is the same as the METRIC name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Universally Unique Identifier of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numeric_value": {"name": "numeric_value", "description": "Numeric value associated with the event (ie the dollars associated with a purchase).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "touch_type": {"name": "touch_type", "description": "Type of touch/message that the event itself is already attributed to in Klaviyo. Either 'flow', 'campaign', or null. Note that the package will refer to campaign and flow interactions as \"touches\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_on": {"name": "occurred_on", "description": "Calendar date (UTC) on which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "touch_id": {"name": "touch_id", "description": "Coalescing of the Klaviyo-attributed campaign_id and flow_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_at": {"name": "last_touch_at", "description": "Timestamp of when, relative to the current event, this person last interacted with a campaign or flow  according to Klaviyo. This will be null if the event is not attributed to any flow or campaign. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_event_type": {"name": "last_touch_event_type", "description": "The type of event through which, relative to the current event, the person last interacted with a campaign  or flow. This information is used to determine which lookback window to use (email vs sms). This will be null if the event is not attributed to any flow or campaign.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_type": {"name": "last_touch_type", "description": "What kind of touch the event was attributed to by the package -- 'campaign', 'flow', or null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "Foreign key referencing the CAMPAIGN that the event is attributed to by the package.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "Foreign key referencing the FLOW that the event is attributed to by the package.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A name for this campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_subject_line": {"name": "campaign_subject_line", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_city": {"name": "person_city", "description": "City that the person who triggered this event lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_country": {"name": "person_country", "description": "Country that the person who triggered this event lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_region": {"name": "person_region", "description": "Region or state that the person who triggered this event lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_email": {"name": "person_email", "description": "The email address and the unique identifier for the person who triggered the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_timezone": {"name": "person_timezone", "description": "Timezone that the person who triggered this event is situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "Name of the platform that triggered the event (either Klaviyo, the API, or another integration).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_category": {"name": "integration_category", "description": "Use-case category of the platform that sent the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC Timestamp that indicates the start time of the Fivetran job that synced this event row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_event_id": {"name": "unique_event_id", "description": "The unique identifier for the combination of event_id and source_relation columns.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/klaviyo__events.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "klaviyo", "unique_key": "unique_event_id", "partition_by": {"field": "occurred_on", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1665702405.185419, "compiled_sql": "\n-- ^ the incremental strategy is split into delete+insert for snowflake since there is a bit of\n-- overlap in transformed data blocks for incremental runs (we look back an extra hour, see lines 23 - 30)\n-- this configuration solution was taken from https://docs.getdbt.com/reference/resource-configs/snowflake-configs#merge-behavior-incremental-models\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__event_attribution`\n\n    \n),\n\nevent_fields as (\n\n    -- excluding some fields to rename them and/or make them null if needed\n    \n    -- as of the patch release of dbt-utils v0.7.3, the snowflake uppercasing is not needed anymore so we have deleted the snowflake conditional in the exclusion\n\n    select \n        *,\n\n        type, -- need to pull this out because it gets removed by dbt_utils.star, due to being a substring of 'session_event_type' and 'session_touch_type'\n\n        -- split out campaign and flow IDs\n        case \n            when session_touch_type = 'campaign' then last_touch_id \n        else null end as last_touch_campaign_id,\n        case \n            when session_touch_type = 'flow' then last_touch_id \n        else null end as last_touch_flow_id,\n\n        -- only make these non-null if the event indeed qualified for attribution\n        case \n            when last_touch_id is not null then session_start_at \n        else null end as last_touch_at,\n        case \n            when last_touch_id is not null then session_event_type \n        else null end as last_touch_event_type,\n        case \n            when last_touch_id is not null then session_touch_type \n        else null end as last_touch_type -- flow vs campaign\n\n    \n    from events\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\nflow as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nperson as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\n),\n\n-- just pulling this to join with INTEGRATION\nmetric as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric`\n),\n\nintegration as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration`\n),\n\njoin_fields as (\n\n    select\n        event_fields.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.subject as campaign_subject_line,\n        flow.flow_name, \n        person.city as person_city,\n        person.country as person_country,\n        person.region as person_region,\n        person.email as person_email,\n        person.timezone as person_timezone,\n        integration.integration_name,\n        integration.category as integration_category\n\n    from event_fields\n    left join campaign on (\n      event_fields.last_touch_campaign_id = campaign.campaign_id\n      and\n      event_fields.source_relation = campaign.source_relation\n    )\n    left join flow on (\n      event_fields.last_touch_flow_id = flow.flow_id\n      and\n      event_fields.source_relation = flow.source_relation  \n    )\n    left join person on (\n      event_fields.person_id = person.person_id\n      and\n      event_fields.source_relation = person.source_relation\n    )\n    left join metric on (\n      event_fields.metric_id = metric.metric_id\n      and\n      event_fields.source_relation = metric.source_relation\n    )\n    left join integration on (\n      metric.integration_id = integration.integration_id\n      and\n      metric.source_relation = integration.source_relation\n    )\n)\n\nselect * from join_fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`"}, "model.klaviyo.int_klaviyo__campaign_flow_metrics": {"raw_sql": "with person_campaign_flow as (\n\n    select *\n    from {{ ref('klaviyo__person_campaign_flow') }}\n),\n\n{%- set pcf_columns = adapter.get_columns_in_relation(ref('klaviyo__person_campaign_flow')) %}\n\n-- aggregating to the campaign/flow - variation level. so a flow with A/B versions will have 2 rows\nagg_metrics as (\n\n    select\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        variation_id,\n        source_relation,\n        count(distinct person_id) as total_count_unique_people,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n        \n        {% for col in pcf_columns if col.name|lower not in ['last_touch_campaign_id', 'person_id', 'last_touch_flow_id', 'source_relation',\n                                                            'campaign_name', 'flow_name','variation_id', 'first_event_at', 'last_event_at'] %}\n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( {{ col.name }} ) as {{ col.name }}\n\n        {% if 'sum_revenue' not in col.name|lower %} -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when {{ col.name }} > 0 then 1 else 0 end) as {{ 'unique_' ~ col.name }}\n\n        {% endif %}\n        {% endfor -%}\n\n    from person_campaign_flow\n    group by 1,2,3,4\n)\n\nselect * from agg_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.klaviyo.klaviyo__person_campaign_flow", "model.klaviyo.klaviyo__person_campaign_flow"]}, "config": {"enabled": true, "alias": null, "schema": "int_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_int_klaviyo", "fqn": ["klaviyo", "intermediate", "int_klaviyo__campaign_flow_metrics"], "unique_id": "model.klaviyo.int_klaviyo__campaign_flow_metrics", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "intermediate/int_klaviyo__campaign_flow_metrics.sql", "original_file_path": "models/intermediate/int_klaviyo__campaign_flow_metrics.sql", "name": "int_klaviyo__campaign_flow_metrics", "alias": "int_klaviyo__campaign_flow_metrics", "checksum": {"name": "sha256", "checksum": "05f2223e2d8ab2cbcb57045b3008aee2e9c74f1803cb5e3b658b8b92b7b22e9d"}, "tags": [], "refs": [["klaviyo__person_campaign_flow"], ["klaviyo__person_campaign_flow"]], "sources": [], "metrics": [], "description": "Table that draws from the `klaviyo__person_campaign_flow` model to aggregate event metrics  to the campaign or flow AND variation grain. A campaign with A/B versions will have 2 records.  **Counts** of the unique users and instances of the events, as well as **sums** of the numeric value associated  with events (i.e. revenue) will be pivoted out into columns, as configured by the `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics` variables, respectively. See the dbt_project.yml file for the default metrics used.  These columns will be prefixed with `count_`, `unique_count_`, and `sum_revenue_`.\n", "columns": {"last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "Foreign key referencing the CAMPAIGN attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "Foreign key referencing the FLOW attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_count_unique_people": {"name": "total_count_unique_people", "description": "The count of the distinct people that have interacted with this campaign or flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first ever interaction between this campaign/flow and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the most recent interaction between this campaign/flow and a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/intermediate/int_klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo__campaign_flow_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_klaviyo"}, "created_at": 1665702405.2199821, "compiled_sql": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\n-- aggregating to the campaign/flow - variation level. so a flow with A/B versions will have 2 rows\nagg_metrics as (\n\n    select\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        variation_id,\n        source_relation,\n        count(distinct person_id) as total_count_unique_people,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n        \n        from person_campaign_flow\n    group by 1,2,3,4\n)\n\nselect * from agg_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`"}, "model.klaviyo.int_klaviyo__person_metrics": {"raw_sql": "with person_campaign_flow as (\n\n    select *\n    from {{ ref('klaviyo__person_campaign_flow') }}\n),\n\n{%- set pcf_columns = adapter.get_columns_in_relation(ref('klaviyo__person_campaign_flow')) %}\n\nagg_metrics as (\n\n    select\n        person_id,\n        source_relation,\n        count(distinct last_touch_campaign_id) as count_total_campaigns,\n        count(distinct last_touch_flow_id) as count_total_flows,\n        min(first_event_at) as first_event_at, -- first ever event occurred at\n        max(last_event_at) as last_event_at, -- last ever event occurred at\n        min(distinct case when last_touch_campaign_id is not null then first_event_at end) as first_campaign_touch_at,\n        max(distinct case when last_touch_campaign_id is not null then last_event_at end) as last_campaign_touch_at,\n        min(distinct case when last_touch_flow_id is not null then first_event_at end) as first_flow_touch_at,\n        max(distinct case when last_touch_flow_id is not null then last_event_at end) as last_flow_touch_at\n\n        {% for col in pcf_columns if col.name|lower not in ['last_touch_campaign_id', 'person_id', 'last_touch_flow_id', 'source_relation',\n                                                            'campaign_name', 'flow_name','variation_id', 'first_event_at', 'last_event_at'] %}\n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( {{ col.name }} ) as {{ 'total_' ~ col.name }}\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        {% if 'sum_revenue' in col.name|lower %}\n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then {{ col.name }} else 0 end ) as {{ 'organic_' ~ col.name }}\n        {% endif %}\n\n        {% endfor -%}\n\n    from person_campaign_flow\n    group by 1,2\n\n)\n\nselect * from agg_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.klaviyo.klaviyo__person_campaign_flow", "model.klaviyo.klaviyo__person_campaign_flow"]}, "config": {"enabled": true, "alias": null, "schema": "int_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_int_klaviyo", "fqn": ["klaviyo", "intermediate", "int_klaviyo__person_metrics"], "unique_id": "model.klaviyo.int_klaviyo__person_metrics", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "intermediate/int_klaviyo__person_metrics.sql", "original_file_path": "models/intermediate/int_klaviyo__person_metrics.sql", "name": "int_klaviyo__person_metrics", "alias": "int_klaviyo__person_metrics", "checksum": {"name": "sha256", "checksum": "a17b4d3bfd7f6a19bc40dc8199f22c30594994645f31cc2bd72280e8ac429259"}, "tags": [], "refs": [["klaviyo__person_campaign_flow"], ["klaviyo__person_campaign_flow"]], "sources": [], "metrics": [], "description": "Table that draws from the `klaviyo__person_campaign_flow` model to aggregate event metrics  to the person grain. \n**Counts** of instances of the events and **sums** of the numeric value (i.e. revenue) associated  with events (total vs organic/not attributed to flows or campaigns) will be pivoted out into columns, as configured by the  `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics`variables, respectively. See the dbt_project.yml file for  the default metrics used. \nThese columns will be prefixed with `total_count_`, `total_sum_revenue_` (organic + attributed), and `organic_sum_revenue_` (not attributed to a campaign or flow). \n", "columns": {"person_id": {"name": "person_id", "description": "Unique ID of the person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_campaigns": {"name": "count_total_campaigns", "description": "Count of the number of campaigns this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_flows": {"name": "count_total_flows", "description": "Count of the number of flows this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of when the user first triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of when the user last triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_campaign_touch_at": {"name": "first_campaign_touch_at", "description": "Timestamp of when the user first interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_campaign_touch_at": {"name": "last_campaign_touch_at", "description": "Timestamp of when the user last interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_flow_touch_at": {"name": "first_flow_touch_at", "description": "Timestamp of when the user first interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_flow_touch_at": {"name": "last_flow_touch_at", "description": "Timestamp of when the user last interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/intermediate/int_klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo__person_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_klaviyo"}, "created_at": 1665702405.221685, "compiled_sql": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\nagg_metrics as (\n\n    select\n        person_id,\n        source_relation,\n        count(distinct last_touch_campaign_id) as count_total_campaigns,\n        count(distinct last_touch_flow_id) as count_total_flows,\n        min(first_event_at) as first_event_at, -- first ever event occurred at\n        max(last_event_at) as last_event_at, -- last ever event occurred at\n        min(distinct case when last_touch_campaign_id is not null then first_event_at end) as first_campaign_touch_at,\n        max(distinct case when last_touch_campaign_id is not null then last_event_at end) as last_campaign_touch_at,\n        min(distinct case when last_touch_flow_id is not null then first_event_at end) as first_flow_touch_at,\n        max(distinct case when last_touch_flow_id is not null then last_event_at end) as last_flow_touch_at\n\n        from person_campaign_flow\n    group by 1,2\n\n)\n\nselect * from agg_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__person_metrics`"}, "model.klaviyo.int_klaviyo__event_attribution": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_event_id',\n        partition_by={\n            \"field\": \"occurred_on\",\n            \"data_type\": \"date\"\n        } if target.type == 'bigquery' else none,\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta'\n    )\n}}\n\nwith events as (\n\n    select \n        *,\n        -- no event will be attributed to both a campaign and flow\n        coalesce(campaign_id, flow_id) as touch_id,\n        case \n            when campaign_id is not null then 'campaign' \n            when flow_id is not null then 'flow' \n        else null end as touch_type -- defintion: touch = interaction with campaign/flow\n\n    from {{ var('event_table') }}\n\n    {% if is_incremental() %}\n    -- grab **ALL** events for users who have any events in this new increment\n    where person_id in (\n\n        select distinct person_id\n        from {{ var('event_table') }}\n\n        -- most events (from all kinds of integrations) at least once every hour\n        -- https://help.klaviyo.com/hc/en-us/articles/115005253208\n        where _fivetran_synced >= cast(coalesce( \n            (\n                select {{ dbt_utils.dateadd(datepart = 'hour', \n                                            interval = -1,\n                                            from_date_or_timestamp = 'max(_fivetran_synced)' ) }}  \n                from {{ this }}\n            ), '2012-01-01') as {{ dbt_utils.type_timestamp() }} ) -- klaviyo was founded in 2012, so let's default the min date to then\n    )\n    {% endif %}\n),\n\n-- sessionize events based on attribution eligibility -- is it the right kind of event, and does it have a campaign or flow?\ncreate_sessions as (\n    select\n        *,\n        -- default klaviyo__event_attribution_filter limits attribution-eligible events to to email opens, email clicks, and sms opens\n        -- https://help.klaviyo.com/hc/en-us/articles/115005248128\n\n        -- events that come with flow/campaign attributions (and are eligible event types) will create new sessions.\n        -- non-attributed events that come in afterward will be batched into the same attribution-session\n        sum(case when touch_id is not null\n        {% if var('klaviyo__eligible_attribution_events') != [] %}\n            and lower(type) in {{ \"('\" ~ (var('klaviyo__eligible_attribution_events') | join(\"', '\")) ~ \"')\" }}\n        {% endif %}\n            then 1 else 0 end) over (\n                partition by person_id, source_relation order by occurred_at asc rows between unbounded preceding and current row) as touch_session \n\n    from events\n\n),\n\n-- \"session start\" refers to the event in a \"touch session\" that is already attributed with a campaign or flow by Klaviyo\n-- a new event that is attributed with a campaign/flow will trigger a new session, so there will only be one already-attributed event per each session \n-- events that are missing attributions will borrow data from the event that triggered the session, if they are in the lookback window (see `attribute` CTE)\nlast_touches as (\n\n    select \n        *,\n        -- when did the touch session begin?\n        min(occurred_at) over(partition by person_id, source_relation, touch_session) as session_start_at,\n\n        -- get the kind of metric/event that triggered the attribution session, in order to decide \n        -- to use the sms or email lookback value. \n        first_value(type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row) as session_event_type\n\n    from create_sessions\n),\n\nattribute as (\n\n    select \n        *,\n        -- klaviyo uses different lookback windows for email and sms events\n        -- default email lookback = 5 days (120 hours) -> https://help.klaviyo.com/hc/en-us/articles/115005248128#conversion-tracking1\n        -- default sms lookback: 1 day (24 hours -> https://help.klaviyo.com/hc/en-us/articles/115005248128#sms-conversion-tracking7\n\n        coalesce(touch_id, -- use pre-attributed flow/campaign if provided\n            case \n            when {{ dbt_utils.datediff('session_start_at', 'occurred_at', 'hour') }} <= (\n                case \n                when lower(session_event_type) like '%sms%' then {{ var('klaviyo__sms_attribution_lookback') }}\n                else {{ var('klaviyo__email_attribution_lookback') }} end\n            ) -- if the events fall within the lookback window, attribute\n            then first_value(touch_id) over (\n                partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)\n            else null end) as last_touch_id -- session qualified for attribution -> we will call this \"last touch\"\n\n    from last_touches \n),\n\nfinal as (\n\n    select\n        *,\n\n        -- get whether the event is attributed to a flow or campaign\n        coalesce(touch_type, first_value(touch_type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)) \n\n            as session_touch_type -- if the session events qualified for attribution, extract the type of touch they are attributed to\n\n    from attribute \n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.datediff"], "nodes": ["model.klaviyo_source.stg_klaviyo__event"]}, "config": {"enabled": true, "alias": null, "schema": "int_klaviyo", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_event_id", "on_schema_change": "ignore", "grants": {}, "partition_by": {"field": "occurred_on", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_int_klaviyo", "fqn": ["klaviyo", "intermediate", "int_klaviyo__event_attribution"], "unique_id": "model.klaviyo.int_klaviyo__event_attribution", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "intermediate/int_klaviyo__event_attribution.sql", "original_file_path": "models/intermediate/int_klaviyo__event_attribution.sql", "name": "int_klaviyo__event_attribution", "alias": "int_klaviyo__event_attribution", "checksum": {"name": "sha256", "checksum": "0f50b3c667fde764eb0671135da6a44202089275d90ab399b5583c33bc71613e"}, "tags": [], "refs": [["stg_klaviyo__event"]], "sources": [], "metrics": [], "description": "Table enriching events with an additional layer of last-touch attribution.  Though Klaviyo already performs attribution on events each day, this extra step is necessary,  as certain kinds of events/metrics never get attributed to flows or campaigns via Klaviyo's internal model. \nBy default, the package performs attribution [in line with Klaviyo](https://help.klaviyo.com/hc/en-us/articles/115005248128).  It considers email opens and clicks, and SMS opens as the events eligible to be credited with conversions.  This attribution-eligibility can be configured by the `klaviyo__eligible_attribution_events` variable.  Note that this refers to the events eligible to credit campaigns and flows with conversions, _not_ the events  eligible to receive attribution (all kinds of events are privy to this).\nSimilar to Klaviyo, the package by default considers the conversion period/lookback window for email events to  be 120 hours (5 days) and 24 hours for SMS events. These can be configured through the  `klaviyo__email_attribution_lookback` and `klaviyo__sms_attribution_lookback` variables, respectively (in integer-hours).\nNote: this model has an incremental materialization. Custom event-columns specified by the `klaviyo__event_pass_through_columns` variable will appear here as well.\n", "columns": {"variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key referencing the CAMPAIGN that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Timestamp of when the event was triggered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Foreign key referencing the FLOW that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_message_id": {"name": "flow_message_id", "description": "Unique ID of the FLOW_MESSAGE that the event is attributed to.  This does not map onto another table.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "Unique ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_id": {"name": "metric_id", "description": "Foreign key referencing the metric being captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "Foreign key referencing the PERSON who triggered the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of event that was triggered. This is the same as the METRIC name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Universally Unique Identifier of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numeric_value": {"name": "numeric_value", "description": "Numeric value associated with the event (ie the dollars associated with a purchase).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "touch_type": {"name": "touch_type", "description": "Type of touch/message that the event itself is already attributed to in Klaviyo. Either 'flow', 'campaign', or null. Note that the package will refer to campaign and flow interactions as \"touches\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_on": {"name": "occurred_on", "description": "Calendar date (UTC) on which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "touch_id": {"name": "touch_id", "description": "Coalescing of the Klaviyo-attributed campaign_id and flow_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "touch_session": {"name": "touch_session", "description": "ID used to batch an individual person's events into attribution-groups. Each event that comes  attributed to a campaign or flow begins a new session/batch, in which the following events without  a flow/campaign_id have the same `touch_session` (and may be attributed to the same flow/campaign).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_start_at": {"name": "session_start_at", "description": "Timestamp of when, relative to the current event, this person last interacted with a campaign or flow  according to Klaviyo. This is the beginning of the event's touch-session.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_event_type": {"name": "session_event_type", "description": "The type of event through which, relative to the current event, the person last interacted with a campaign  or flow. This information is used to determine which lookback window to use (email vs sms).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_id": {"name": "last_touch_id", "description": "The campaign or flow that the package attributed the event to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_type": {"name": "last_touch_type", "description": "What kind of touch the event was attributed to by the package -- 'campaign', 'flow', or null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC Timestamp that indicates the start time of the Fivetran job that synced this event row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_event_id": {"name": "unique_event_id", "description": "The unique identifier for the combination of event_id and source_relation columns.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioining together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "klaviyo://models/intermediate/int_klaviyo.yml", "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo__event_attribution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_klaviyo", "unique_key": "unique_event_id", "partition_by": {"field": "occurred_on", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1665702405.21888, "compiled_sql": "\n\nwith events as (\n\n    select \n        *,\n        -- no event will be attributed to both a campaign and flow\n        coalesce(campaign_id, flow_id) as touch_id,\n        case \n            when campaign_id is not null then 'campaign' \n            when flow_id is not null then 'flow' \n        else null end as touch_type -- defintion: touch = interaction with campaign/flow\n\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event`\n\n    \n),\n\n-- sessionize events based on attribution eligibility -- is it the right kind of event, and does it have a campaign or flow?\ncreate_sessions as (\n    select\n        *,\n        -- default klaviyo__event_attribution_filter limits attribution-eligible events to to email opens, email clicks, and sms opens\n        -- https://help.klaviyo.com/hc/en-us/articles/115005248128\n\n        -- events that come with flow/campaign attributions (and are eligible event types) will create new sessions.\n        -- non-attributed events that come in afterward will be batched into the same attribution-session\n        sum(case when touch_id is not null\n        \n            and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n        \n            then 1 else 0 end) over (\n                partition by person_id, source_relation order by occurred_at asc rows between unbounded preceding and current row) as touch_session \n\n    from events\n\n),\n\n-- \"session start\" refers to the event in a \"touch session\" that is already attributed with a campaign or flow by Klaviyo\n-- a new event that is attributed with a campaign/flow will trigger a new session, so there will only be one already-attributed event per each session \n-- events that are missing attributions will borrow data from the event that triggered the session, if they are in the lookback window (see `attribute` CTE)\nlast_touches as (\n\n    select \n        *,\n        -- when did the touch session begin?\n        min(occurred_at) over(partition by person_id, source_relation, touch_session) as session_start_at,\n\n        -- get the kind of metric/event that triggered the attribution session, in order to decide \n        -- to use the sms or email lookback value. \n        first_value(type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row) as session_event_type\n\n    from create_sessions\n),\n\nattribute as (\n\n    select \n        *,\n        -- klaviyo uses different lookback windows for email and sms events\n        -- default email lookback = 5 days (120 hours) -> https://help.klaviyo.com/hc/en-us/articles/115005248128#conversion-tracking1\n        -- default sms lookback: 1 day (24 hours -> https://help.klaviyo.com/hc/en-us/articles/115005248128#sms-conversion-tracking7\n\n        coalesce(touch_id, -- use pre-attributed flow/campaign if provided\n            case \n            when datetime_diff(\n        cast(occurred_at as datetime),\n        cast(session_start_at as datetime),\n        hour\n    ) <= (\n                case \n                when lower(session_event_type) like '%sms%' then 24\n                else 120 end\n            ) -- if the events fall within the lookback window, attribute\n            then first_value(touch_id) over (\n                partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)\n            else null end) as last_touch_id -- session qualified for attribution -> we will call this \"last touch\"\n\n    from last_touches \n),\n\nfinal as (\n\n    select\n        *,\n\n        -- get whether the event is attributed to a flow or campaign\n        coalesce(touch_type, first_value(touch_type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)) \n\n            as session_touch_type -- if the session events qualified for attribution, extract the type of touch they are attributed to\n\n    from attribute \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__event_attribution`"}, "model.shopify.shopify__customer_cohorts": {"raw_sql": "with calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt_utils.date_trunc('month','date_day') }} as date) = date_day\n\n), customers as (\n\n    select *\n    from {{ ref('shopify__customers') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        {{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as cohort_month\n    from calendar\n    inner join customers\n        on cast({{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast({{ dbt_utils.date_trunc('month', 'created_timestamp') }} as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    {% set partition_string = 'partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row' %}\n\n    select\n        *,\n        sum(total_price_in_month) over ({{ partition_string }}) as total_price_lifetime,\n        sum(order_count_in_month) over ({{ partition_string }}) as order_count_lifetime,\n        sum(line_item_count_in_month) over ({{ partition_string }}) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        {{ dbt_utils.surrogate_key(['date_month','customer_id','source_relation']) }} as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.surrogate_key"], "nodes": ["model.shopify.shopify__calendar", "model.shopify.shopify__customers", "model.shopify.shopify__orders"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__customer_cohorts"], "unique_id": "model.shopify.shopify__customer_cohorts", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__customer_cohorts.sql", "original_file_path": "models/shopify__customer_cohorts.sql", "name": "shopify__customer_cohorts", "alias": "shopify__customer_cohorts", "checksum": {"name": "sha256", "checksum": "4179fd82cc1aafd2c0e61ad2e4d8d0a2d4a6daf2afbb91a70bc77cc7311cf1aa"}, "tags": [], "refs": [["shopify__calendar"], ["shopify__customers"], ["shopify__orders"]], "sources": [], "metrics": [], "description": "Each record represents a customer's performance in a calendar month.", "columns": {"cohort_month": {"name": "cohort_month", "description": "The month the cohort belongs to, i.e the first month the customer had an order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cohort_month_number": {"name": "cohort_month_number", "description": "The 'number' of the `date_month` of the record, i.e. how many months from their start month this cohort occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_cohort_id": {"name": "customer_cohort_id", "description": "Unique key representing a customer in a given month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the related customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_month": {"name": "date_month", "description": "The calendar month the customer stats relate to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp of the customer's first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_count_in_month": {"name": "line_item_count_in_month", "description": "Number of line items purchased in the `date_month`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_count_lifetime": {"name": "line_item_count_lifetime", "description": "Number of line items purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_count_in_month": {"name": "order_count_in_month", "description": "Number of orders purchased in the `date_month`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_count_lifetime": {"name": "order_count_lifetime", "description": "Number of orders purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price_in_month": {"name": "total_price_in_month", "description": "Total amount (in currency) purchased in the `date_month`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price_lifetime": {"name": "total_price_lifetime", "description": "Total amount (in currency) up until and including this `date_month`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__customer_cohorts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.236348, "compiled_sql": "with calendar as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) = date_day\n\n), customers as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customers`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__orders`\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as cohort_month\n    from calendar\n    inner join customers\n        on cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        month\n    ) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        to_hex(md5(cast(coalesce(cast(date_month as \n    string\n), '') || '-' || coalesce(cast(customer_id as \n    string\n), '') || '-' || coalesce(cast(source_relation as \n    string\n), '') as \n    string\n))) as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customer_cohorts`"}, "model.shopify.shopify__orders": {"raw_sql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n{% if var('shopify__using_order_adjustment', true) %}\n), order_adjustments as (\n\n    select *\n    from {{ var('shopify_order_adjustment') }}\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast({{ fivetran_utils.json_parse(\"total_shipping_price_set\",[\"shop_money\",\"amount\"]) }} as {{ dbt_utils.type_float() }}) ,0) as shipping_cost,\n        \n        {% if var('shopify__using_order_adjustment', true) %}\n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n        {% endif %}\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n        {% endif %}\n        (orders.total_price\n            {% if var('shopify__using_order_adjustment', true) %}\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            {% endif %}\n            {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)\n            {% endif %} ) as order_adjusted_total,\n        order_lines.line_item_count\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    {% endif %}\n    {% if var('shopify__using_order_adjustment', true) %}\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    {% endif %}\n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.fivetran_utils.json_parse", "macro.dbt_utils.type_float"], "nodes": ["model.shopify_source.stg_shopify__order", "model.shopify.shopify__orders__order_line_aggregates", "model.shopify_source.stg_shopify__order_adjustment", "model.shopify.shopify__orders__order_refunds"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__orders"], "unique_id": "model.shopify.shopify__orders", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__orders.sql", "original_file_path": "models/shopify__orders.sql", "name": "shopify__orders", "alias": "shopify__orders", "checksum": {"name": "sha256", "checksum": "314b165b27050181ab0f5a6e4bcd722c3f6918af348f575dd942f4c6aee4eb0c"}, "tags": [], "refs": [["stg_shopify__order"], ["shopify__orders__order_line_aggregates"], ["stg_shopify__order_adjustment"], ["shopify__orders__order_refunds"]], "sources": [], "metrics": [], "description": "Each record represents an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_timestamp": {"name": "cancelled_timestamp", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_timestamp": {"name": "closed_timestamp", "description": "The date and time when the order was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_method": {"name": "processing_method", "description": "How the payment was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_taxes_included": {"name": "has_taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_test_order": {"name": "is_test_order", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_count": {"name": "line_item_count", "description": "Number of line items included in the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_order_seq_number": {"name": "customer_order_seq_number", "description": "The sequential number of the order as it relates to the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_vs_repeat": {"name": "new_vs_repeat", "description": "Whether the order was a new or repeat order for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_cost": {"name": "shipping_cost", "description": "The shipping cost of the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjustment_amount": {"name": "order_adjustment_amount", "description": "Total adjustment amount applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjustment_tax_amount": {"name": "order_adjustment_tax_amount", "description": "Total tax applied to the adjustment on the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_subtotal": {"name": "refund_subtotal", "description": "Total refund amount applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_total_tax": {"name": "refund_total_tax", "description": "Total tax applied to the refund on the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjusted_total": {"name": "order_adjusted_total", "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Field representing the index of the order line in relation to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pre_tax_price": {"name": "pre_tax_price", "description": "The pre tax price of the order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checkout_token": {"name": "checkout_token", "description": "The checkout token applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price set to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.246819, "compiled_sql": "with  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),  __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), order_lines as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n\n), order_adjustments as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_adjustment`\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n \n  json_extract_scalar(total_shipping_price_set, '$.shop_money.amount')\n\n as \n    float64\n) ,0) as shipping_cost,\n        \n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n        \n\n        \n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n        \n        (orders.total_price\n            \n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            \n            \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)\n             ) as order_adjusted_total,\n        order_lines.line_item_count\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n\n    \n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    \n    \n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    \n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_line_aggregates", "sql": " __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}, {"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__orders`"}, "model.shopify.shopify__products": {"raw_sql": "with products as (\n\n    select *\n    from {{ var('shopify_product') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders')}}\n\n), order_lines_aggregated as (\n\n    select \n        order_lines.product_id, \n        order_lines.source_relation,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        {% endif %}\n\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp\n    from order_lines\n    left join orders\n        using (order_id, source_relation)\n    group by 1,2\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(order_lines_aggregated.quantity_sold,0) as quantity_sold,\n        coalesce(order_lines_aggregated.subtotal_sold,0) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(order_lines_aggregated.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(order_lines_aggregated.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        {% endif %}\n        \n        order_lines_aggregated.first_order_timestamp,\n        order_lines_aggregated.most_recent_order_timestamp\n    from products\n    left join order_lines_aggregated\n        using (product_id, source_relation)\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.shopify_source.stg_shopify__product", "model.shopify.shopify__order_lines", "model.shopify.shopify__orders"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__products"], "unique_id": "model.shopify.shopify__products", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__products.sql", "original_file_path": "models/shopify__products.sql", "name": "shopify__products", "alias": "shopify__products", "checksum": {"name": "sha256", "checksum": "e699f3d418cc215e557b5a7ad0705f82470c62c8b54b3fbb29a2896c507ba033"}, "tags": [], "refs": [["stg_shopify__product"], ["shopify__order_lines"], ["shopify__orders"]], "sources": [], "metrics": [], "description": "Each record represents a product in Shopify.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_timestamp": {"name": "published_timestamp", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity_sold": {"name": "quantity_sold", "description": "Quantity of the product sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_sold": {"name": "subtotal_sold", "description": "Total amount of the product sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity_sold_net_refunds": {"name": "quantity_sold_net_refunds", "description": "Quantity of the product sold, excluding refunds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_sold_net_refunds": {"name": "subtotal_sold_net_refunds", "description": "Total amount of the product sold, excluding refunds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp the product was first ordered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_order_timestamp": {"name": "most_recent_order_timestamp", "description": "The timestamp the product was most recently ordered.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__products.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.251936, "compiled_sql": "with products as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product`\n\n), order_lines as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__order_lines`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__orders`\n\n), order_lines_aggregated as (\n\n    select \n        order_lines.product_id, \n        order_lines.source_relation,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n\n        \n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        \n\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp\n    from order_lines\n    left join orders\n        using (order_id, source_relation)\n    group by 1,2\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(order_lines_aggregated.quantity_sold,0) as quantity_sold,\n        coalesce(order_lines_aggregated.subtotal_sold,0) as subtotal_sold,\n\n        \n        coalesce(order_lines_aggregated.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(order_lines_aggregated.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        \n        \n        order_lines_aggregated.first_order_timestamp,\n        order_lines_aggregated.most_recent_order_timestamp\n    from products\n    left join order_lines_aggregated\n        using (product_id, source_relation)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__products`"}, "model.shopify.shopify__transactions": {"raw_sql": "with transactions as (\n    select *\n    from {{ var('shopify_transaction') }}\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) as exchange_rate,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) * amount as currency_exchange_calculated_amount\n    from transactions\n\n)\n\nselect *\nfrom exchange_rate", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.json_parse", "macro.dbt_utils.type_numeric"], "nodes": ["model.shopify_source.stg_shopify__transaction"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__transactions"], "unique_id": "model.shopify.shopify__transactions", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__transactions.sql", "original_file_path": "models/shopify__transactions.sql", "name": "shopify__transactions", "alias": "shopify__transactions", "checksum": {"name": "sha256", "checksum": "88e4a9aa6d2acc8dbe0e1d3f280087b5adb6a730391785680d0bf112b0923906"}, "tags": [], "refs": [["stg_shopify__transaction"]], "sources": [], "metrics": [], "description": "Each record represents a transaction in Shopify.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of money included in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorization": {"name": "authorization", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test": {"name": "test", "description": "Whether the transaction is a test transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of the date the record was synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate between the home currency and the currency of sale at the time of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_calculated_amount": {"name": "currency_exchange_calculated_amount", "description": "The total amount of the transaction with the currency exchange rate applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.2622888, "compiled_sql": "with transactions as (\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__transaction`\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as \n    numeric\n ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as \n    numeric\n ),1) * amount as currency_exchange_calculated_amount\n    from transactions\n\n)\n\nselect *\nfrom exchange_rate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`"}, "model.shopify.shopify__customers": {"raw_sql": "with customers as (\n\n    select \n        {{ dbt_utils.star(from=ref('stg_shopify__customer'), except=[\"orders_count\", \"total_spent\"]) }}\n    from {{ var('shopify_customer') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__customers__order_aggregates' )}}\n\n), joined as (\n\n    select \n        customers.*,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        coalesce(orders.average_order_value, 0) as average_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_amount,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders\n    from customers\n    left join orders\n        using (customer_id, source_relation)\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer", "model.shopify.shopify__customers__order_aggregates"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__customers"], "unique_id": "model.shopify.shopify__customers", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__customers.sql", "original_file_path": "models/shopify__customers.sql", "name": "shopify__customers", "alias": "shopify__customers", "checksum": {"name": "sha256", "checksum": "70e28dce05bc26f7fc7678928e4bf4ab455d399c6f314f54d3c4671be96d3b7e"}, "tags": [], "refs": [["stg_shopify__customer"], ["stg_shopify__customer"], ["shopify__customers__order_aggregates"]], "sources": [], "metrics": [], "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_accepted_marketing": {"name": "has_accepted_marketing", "description": "Whether the customer has consented to receive marketing material via email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_count_orders": {"name": "lifetime_count_orders", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp the customer completed their first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_order_timestamp": {"name": "most_recent_order_timestamp", "description": "The timestamp the customer completed their most recent order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_order_value": {"name": "average_order_value", "description": "The average order value for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_spent": {"name": "lifetime_total_spent", "description": "The total amount of money that the customer has spent on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_refunded": {"name": "lifetime_total_refunded", "description": "The total amount of money that the customer has been refunded on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_amount": {"name": "lifetime_total_amount", "description": "The total amount of money (minus refunds) that the customer has spent across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.249553, "compiled_sql": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),customers as (\n\n    select \n        *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__customer`\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), joined as (\n\n    select \n        customers.*,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        coalesce(orders.average_order_value, 0) as average_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_amount,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders\n    from customers\n    left join orders\n        using (customer_id, source_relation)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__customers__order_aggregates", "sql": " __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customers`"}, "model.shopify.shopify__order_lines": {"raw_sql": "with order_lines as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), product_variants as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        order_lines.*,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        {% endif %}\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n        product_variants.title as variant_title,\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n        product_variants.inventory_management as variant_inventory_management,\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_requiring_shipping as variant_is_requiring_shipping\n    from order_lines\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    {% endif %}\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__product_variant", "model.shopify.shopify__orders__order_refunds"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "shopify__order_lines"], "unique_id": "model.shopify.shopify__order_lines", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "shopify__order_lines.sql", "original_file_path": "models/shopify__order_lines.sql", "name": "shopify__order_lines", "alias": "shopify__order_lines", "checksum": {"name": "sha256", "checksum": "c9fa8308e1257375b69ec4b40135a4d1ad64fab1d9e0c14b7a353132438df5d8"}, "tags": [], "refs": [["stg_shopify__order_line"], ["stg_shopify__product_variant"], ["shopify__orders__order_refunds"]], "sources": [], "metrics": [], "description": "Each record represents a line item of an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_service": {"name": "fulfillment_service", "description": "The service provider that's fulfilling the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_gift_card": {"name": "is_gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_line_id": {"name": "order_line_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_requiring_shipping": {"name": "is_requiring_shipping", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_taxable": {"name": "is_taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunded_quantity": {"name": "refunded_quantity", "description": "Quantity of the item that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity_net_refunds": {"name": "quantity_net_refunds", "description": "Quantity ordered, excluding refunds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_barcode": {"name": "variant_barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_compare_at_price": {"name": "variant_compare_at_price", "description": "The original price of the item before an adjustment or a sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_created_at": {"name": "variant_created_at", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_fulfillment_service": {"name": "variant_fulfillment_service", "description": "The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_grams": {"name": "variant_grams", "description": "The weight of the product variant in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_image_id": {"name": "variant_image_id", "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_inventory_management": {"name": "variant_inventory_management", "description": "The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_inventory_policy": {"name": "variant_inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_inventory_quantity": {"name": "variant_inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_option_1": {"name": "variant_option_1", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_option_2": {"name": "variant_option_2", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_option_3": {"name": "variant_option_3", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_position": {"name": "variant_position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_price": {"name": "variant_price", "description": "The price of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_is_requiring_shipping": {"name": "variant_is_requiring_shipping", "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_sku": {"name": "variant_sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_is_taxable": {"name": "variant_is_taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_title": {"name": "variant_title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_updated_at": {"name": "variant_updated_at", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_weight": {"name": "variant_weight", "description": "The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_weight_unit": {"name": "variant_weight_unit", "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunded_subtotal": {"name": "refunded_subtotal", "description": "Subtotal amount of the refund applied to the order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_net_refunds": {"name": "subtotal_net_refunds", "description": "Subtotal of the order line with refunds subtracted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_id": {"name": "image_id", "description": "Image id of the product variant associated with the order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/shopify.yml", "compiled_path": "target/compiled/shopify/models/shopify__order_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702405.257921, "compiled_sql": "with  __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),order_lines as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), product_variants as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_variant`\n\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n    from refunds\n    group by 1,2\n\n\n), joined as (\n\n    select\n        order_lines.*,\n\n        \n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n        product_variants.title as variant_title,\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n        product_variants.inventory_management as variant_inventory_management,\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_requiring_shipping as variant_is_requiring_shipping\n    from order_lines\n    \n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    \n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__order_lines`"}, "model.shopify.shopify__calendar": {"raw_sql": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"cast('2019-01-01' as date)\",\n    end_date=\"current_date\"\n   )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "utils", "shopify__calendar"], "unique_id": "model.shopify.shopify__calendar", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "utils/shopify__calendar.sql", "original_file_path": "models/utils/shopify__calendar.sql", "name": "shopify__calendar", "alias": "shopify__calendar", "checksum": {"name": "sha256", "checksum": "330711091f6b47526ac5e8bc39960b2d171633362c0e10b666931be500abeddd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/utils/shopify__calendar.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "table"}, "created_at": 1665702404.927511, "compiled_sql": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1381\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2019-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__calendar`"}, "model.shopify.shopify__orders__order_line_aggregates": {"raw_sql": "with order_line as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__order_line"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "intermediate", "shopify__orders__order_line_aggregates"], "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "intermediate/shopify__orders__order_line_aggregates.sql", "original_file_path": "models/intermediate/shopify__orders__order_line_aggregates.sql", "name": "shopify__orders__order_line_aggregates", "alias": "shopify__orders__order_line_aggregates", "checksum": {"name": "sha256", "checksum": "837181b671b2beb8e58924357d213e33d6479a47e16c604db35cbb6ce6489fa8"}, "tags": [], "refs": [["stg_shopify__order_line"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/shopify/models/intermediate/shopify__orders__order_line_aggregates.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "ephemeral"}, "created_at": 1665702405.277619, "compiled_sql": "with order_line as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.shopify.shopify__customers__order_aggregates": {"raw_sql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), transactions as (\n\n    select *\n    from {{ ref('shopify__transactions' )}}\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__order", "model.shopify.shopify__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "intermediate", "shopify__customers__order_aggregates"], "unique_id": "model.shopify.shopify__customers__order_aggregates", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "intermediate/shopify__customers__order_aggregates.sql", "original_file_path": "models/intermediate/shopify__customers__order_aggregates.sql", "name": "shopify__customers__order_aggregates", "alias": "shopify__customers__order_aggregates", "checksum": {"name": "sha256", "checksum": "902e082d29e1b00c443c6d18109a496dc53a1a7e927134bc8a523cdc106076bd"}, "tags": [], "refs": [["stg_shopify__order"], ["shopify__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/shopify/models/intermediate/shopify__customers__order_aggregates.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "ephemeral"}, "created_at": 1665702405.277395, "compiled_sql": "with orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.shopify.shopify__orders__order_refunds": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['shopify__using_order_line_refund','shopify__using_refund'])) }}\n\nwith refunds as (\n\n    select *\n    from {{ var('shopify_refund') }}\n\n), order_line_refunds as (\n\n    select *\n    from {{ var('shopify_order_line_refund') }}\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.shopify_source.stg_shopify__refund", "model.shopify_source.stg_shopify__order_line_refund"]}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify", "fqn": ["shopify", "intermediate", "shopify__orders__order_refunds"], "unique_id": "model.shopify.shopify__orders__order_refunds", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "intermediate/shopify__orders__order_refunds.sql", "original_file_path": "models/intermediate/shopify__orders__order_refunds.sql", "name": "shopify__orders__order_refunds", "alias": "shopify__orders__order_refunds", "checksum": {"name": "sha256", "checksum": "1bcc3be258e3bdda4c6845e465f95e7e5b4e0eee823b169e0cd5e7eff4cf7792"}, "tags": [], "refs": [["stg_shopify__refund"], ["stg_shopify__order_line_refund"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/shopify/models/intermediate/shopify__orders__order_refunds.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "shopify", "materialized": "ephemeral", "enabled": true}, "created_at": 1665702405.277806, "compiled_sql": "\n\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced": {"raw_sql": "with shopify_customers as (\n\n    select *\n    from {{ ref('int__shopify_customer_rollup') }}\n\n), klaviyo_persons as (\n\n    select *\n    from {{ ref('int__klaviyo_person_rollup') }}\n\n), combine_customer_info as (\n\n    select\n        coalesce(shopify_customers.email, klaviyo_persons.email) as email,\n\n        coalesce(klaviyo_persons.full_name, shopify_customers.full_name) as full_name,\n        shopify_customers.customer_ids as shopify_customer_ids,\n        klaviyo_persons.person_ids as klaviyo_person_ids,\n        coalesce(shopify_customers.phone_numbers, klaviyo_persons.phone_numbers) as phone_number,\n        shopify_customers.first_shopify_account_made_at as shopify_customer_first_created_at,\n        shopify_customers.last_shopify_account_made_at as shopify_customer_last_created_at,\n        klaviyo_persons.first_klaviyo_account_made_at as klaviyo_person_first_created_at,\n        klaviyo_persons.last_klaviyo_account_made_at as klaviyo_person_last_created_at,\n        shopify_customers.last_updated_at as shopify_customer_last_updated_at,\n        klaviyo_persons.last_updated_at as klaviyo_person_last_updated_at,\n        shopify_customers.is_verified_email as is_shopify_email_verified,\n\n        {{ dbt_utils.star(from=ref('int__shopify_customer_rollup'), relation_alias='shopify_customers', prefix='shopify_',\n                                except=['source_relation','email', 'full_name', 'customer_ids', 'phone_numbers', 'first_shopify_account_made_at','last_shopify_account_made_at', \n                                        'last_updated_at', 'is_verified_email'] ) \n        }},\n        shopify_customers.source_relation as shopify_source_relation,\n\n        {{ dbt_utils.star(from=ref('int__klaviyo_person_rollup'), relation_alias='klaviyo_persons', prefix='klaviyo_',\n                                except=['source_relation','email', 'full_name', 'first_klaviyo_account_made_at', 'last_klaviyo_account_made_at', 'person_ids', 'phone_numbers', 'last_updated_at'] ) \n        }},\n        klaviyo_persons.source_relation as klaviyo_source_relation\n\n    from shopify_customers\n    full outer join klaviyo_persons \n        on shopify_customers.email = lower(klaviyo_persons.email) -- redshift doesn't like doing 2 lowers here. we lowercase shopify.email in an intermediate model\n\n)\n\nselect *\nfrom combine_customer_info", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.shopify_holistic_reporting.int__shopify_customer_rollup", "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "model.shopify_holistic_reporting.int__shopify_customer_rollup", "model.shopify_holistic_reporting.int__klaviyo_person_rollup"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "shopify_holistic_reporting__customer_enhanced"], "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "shopify_holistic_reporting__customer_enhanced.sql", "original_file_path": "models/shopify_holistic_reporting__customer_enhanced.sql", "name": "shopify_holistic_reporting__customer_enhanced", "alias": "shopify_holistic_reporting__customer_enhanced", "checksum": {"name": "sha256", "checksum": "db442dfeedb2bb460e284b8e3d2742abc3f9ae90d8db670d6019afc567b53a09"}, "tags": [], "refs": [["int__shopify_customer_rollup"], ["int__klaviyo_person_rollup"], ["int__shopify_customer_rollup"], ["int__klaviyo_person_rollup"]], "sources": [], "metrics": [], "description": "Table consolidating customers and their information and activity metrics from across all platforms. A full outer join is performed in order to union  together users who may not exist in both sources, and personal information is coalesced to consolidate as much information as possible. Includes any custom  columns specified in passthrough variables for both Shopify and Klaviyo.\nFor **Klaviyo** metrics: Counts of instances of triggered events and sums of the numeric value (i.e. revenue) associated with events (total vs organic/not attributed  to flows or campaigns) will be pivoted out into columns, as configured by the klaviyo__count_metrics and klaviyo__sum_revenue_metricsvariables, respectively.  See the Klaviyo dbt_project.yml file for the default metrics used. These columns will be prefixed with total_count_, total_sum_revenue_ (organic + attributed), and organic_sum_revenue_  (not attributed to a campaign or flow).\nColumns that come _only_ from one source will be prefixed with that source name (ie klaviyo_)\n", "columns": {"shopify_source_relation": {"name": "shopify_source_relation", "description": "The source where this Shopify data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_source_relation": {"name": "klaviyo_source_relation", "description": "The source where this Klaviyo data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_has_accepted_marketing": {"name": "shopify_has_accepted_marketing", "description": "Whether the customer has consented to receive marketing material via email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_customer_first_created_at": {"name": "shopify_customer_first_created_at", "description": "The date and time when the customer account first associated with this email was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_customer_last_created_at": {"name": "shopify_customer_last_created_at", "description": "The date and time when the customer account first associated with this email was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_customer_last_updated_at": {"name": "shopify_customer_last_updated_at", "description": "Timestamp of when the shopify customer was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_default_address_id": {"name": "shopify_default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The unique email address of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The customer's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_customer_ids": {"name": "shopify_customer_ids", "description": "A comma-separated aggregated list of Shopify IDs for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_lifetime_count_orders": {"name": "shopify_lifetime_count_orders", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "The unique phone number (E.164 format) for this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_account_state": {"name": "shopify_account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_is_tax_exempt": {"name": "shopify_is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_last_updated_at": {"name": "shopify_last_updated_at", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_shopify_email_verified": {"name": "is_shopify_email_verified", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_first_order_at": {"name": "shopify_first_order_at", "description": "The timestamp the customer completed their first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_last_order_at": {"name": "shopify_last_order_at", "description": "The timestamp the customer completed their most recent order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_average_order_value": {"name": "shopify_average_order_value", "description": "The average order value for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_lifetime_total_spent": {"name": "shopify_lifetime_total_spent", "description": "The total amount of money that the customer has spent on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_lifetime_total_refunded": {"name": "shopify_lifetime_total_refunded", "description": "The total amount of money that the customer has been refunded on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_lifetime_total_amount": {"name": "shopify_lifetime_total_amount", "description": "The total amount of money (minus refunds) that the customer has spent across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_person_id": {"name": "klaviyo_person_id", "description": "Unique ID of the user if you use your own unique identifier. Otherwise, Klaviyo  recommends using the email as the primary key. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_address_1": {"name": "klaviyo_address_1", "description": "First line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_address_2": {"name": "klaviyo_address_2", "description": "Second line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_city": {"name": "klaviyo_city", "description": "City they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_country": {"name": "klaviyo_country", "description": "Country they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_zip": {"name": "klaviyo_zip", "description": "Postal code where they live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_person_created_at": {"name": "klaviyo_person_created_at", "description": "Timestamp of when the person's profile was created in Klaviyo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_latitude": {"name": "klaviyo_latitude", "description": "Latitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_longitude": {"name": "klaviyo_longitude", "description": "Longitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_organization": {"name": "klaviyo_organization", "description": "Business organization they belong to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_region": {"name": "klaviyo_region", "description": "Region or state they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_timezone": {"name": "klaviyo_timezone", "description": "Timezone they are situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_title": {"name": "klaviyo_title", "description": "Title at their business or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_person_updated_at": {"name": "klaviyo_person_updated_at", "description": "Timestamp of when the person profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_count_total_campaigns": {"name": "klaviyo_count_total_campaigns", "description": "Count of the number of campaigns this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_count_total_flows": {"name": "klaviyo_count_total_flows", "description": "Count of the number of flows this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_first_event_at": {"name": "klaviyo_first_event_at", "description": "Timestamp of when the user first triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_last_event_at": {"name": "klaviyo_last_event_at", "description": "Timestamp of when the user last triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_first_campaign_touch_at": {"name": "klaviyo_first_campaign_touch_at", "description": "Timestamp of when the user first interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_last_campaign_touch_at": {"name": "klaviyo_last_campaign_touch_at", "description": "Timestamp of when the user last interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_first_flow_touch_at": {"name": "klaviyo_first_flow_touch_at", "description": "Timestamp of when the user first interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_last_flow_touch_at": {"name": "klaviyo_last_flow_touch_at", "description": "Timestamp of when the user last interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting__customer_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "shopify_holistic"}, "created_at": 1665702405.292048, "compiled_sql": "with shopify_customers as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__shopify_customer_rollup`\n\n), klaviyo_persons as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__klaviyo_person_rollup`\n\n), combine_customer_info as (\n\n    select\n        coalesce(shopify_customers.email, klaviyo_persons.email) as email,\n\n        coalesce(klaviyo_persons.full_name, shopify_customers.full_name) as full_name,\n        shopify_customers.customer_ids as shopify_customer_ids,\n        klaviyo_persons.person_ids as klaviyo_person_ids,\n        coalesce(shopify_customers.phone_numbers, klaviyo_persons.phone_numbers) as phone_number,\n        shopify_customers.first_shopify_account_made_at as shopify_customer_first_created_at,\n        shopify_customers.last_shopify_account_made_at as shopify_customer_last_created_at,\n        klaviyo_persons.first_klaviyo_account_made_at as klaviyo_person_first_created_at,\n        klaviyo_persons.last_klaviyo_account_made_at as klaviyo_person_last_created_at,\n        shopify_customers.last_updated_at as shopify_customer_last_updated_at,\n        klaviyo_persons.last_updated_at as klaviyo_person_last_updated_at,\n        shopify_customers.is_verified_email as is_shopify_email_verified,\n\n        *,\n        shopify_customers.source_relation as shopify_source_relation,\n\n        *,\n        klaviyo_persons.source_relation as klaviyo_source_relation\n\n    from shopify_customers\n    full outer join klaviyo_persons \n        on shopify_customers.email = lower(klaviyo_persons.email) -- redshift doesn't like doing 2 lowers here. we lowercase shopify.email in an intermediate model\n\n)\n\nselect *\nfrom combine_customer_info", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__customer_enhanced`"}, "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_order_key',\n        partition_by={\n            \"field\": \"created_timestamp\",\n            \"data_type\": \"timestamp\"\n        } if target.type == 'bigquery' else none,\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta'\n    )\n}}\n\nwith orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n    -- just grab new + newly updated orders\n    {% if is_incremental() %}\n        where updated_timestamp >= (select max(updated_timestamp) from {{ this }})\n    {% endif %}\n\n), events as (\n\n    select \n        *\n    from {{ ref('klaviyo__events') }}\n\n    where \n        coalesce(last_touch_campaign_id, last_touch_flow_id) is not null\n    {% if var('klaviyo__eligible_attribution_events') != [] %}\n        and lower(type) in {{ \"('\" ~ (var('klaviyo__eligible_attribution_events') | join(\"', '\")) ~ \"')\" }}\n    {% endif %}\n\n    -- only grab the events for users who are in the new increment of orders\n    {% if is_incremental() %}\n        and lower(person_email) in (select distinct lower(email) from orders)\n    {% endif %}\n\n), join_orders_w_events as (\n\n    select \n        orders.*,\n        events.last_touch_campaign_id,\n        events.last_touch_flow_id,\n        events.variation_id as last_touch_variation_id,\n        events.campaign_name as last_touch_campaign_name,\n        events.campaign_subject_line as last_touch_campaign_subject_line,\n        events.flow_name as last_touch_flow_name,\n        events.campaign_type as last_touch_campaign_type,\n        events.event_id as last_touch_event_id,\n        events.occurred_at as last_touch_event_occurred_at,\n        events.type as last_touch_event_type,\n        events.integration_name as last_touch_integration_name,\n        events.integration_category as last_touch_integration_category,\n        events.source_relation as klaviyo_source_relation\n\n    from orders \n    left join events on \n        lower(orders.email) = lower(events.person_email)\n        and {{ dbt_utils.datediff('events.occurred_at', 'orders.created_timestamp', 'hour') }} <= (\n            case when events.type like '%sms%' then {{ var('klaviyo__sms_attribution_lookback') }}\n            else {{ var('klaviyo__email_attribution_lookback') }} end)\n        and orders.created_timestamp > events.occurred_at\n\n), order_events as (\n\n    select\n        *,\n        row_number() over (partition by order_id order by last_touch_event_occurred_at desc) as event_index,\n\n        -- the order was made after X interactions with campaign/flow\n        count(last_touch_event_id) over (partition by order_id, last_touch_campaign_id) as count_interactions_with_campaign,\n        count(last_touch_event_id) over (partition by order_id, last_touch_flow_id) as count_interactions_with_flow\n\n\n    from join_orders_w_events\n\n), last_touches as (\n\n    select \n        {{ dbt_utils.star(from=ref('shopify__orders'), except=['source_relation']) }},\n        last_touch_campaign_id is not null or last_touch_flow_id is not null as is_attributed,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_variation_id,\n        last_touch_campaign_name,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        last_touch_flow_name,\n        case when last_touch_campaign_id is not null then count_interactions_with_campaign else null end as count_interactions_with_campaign, -- will be null if it's associated with a flow\n        count_interactions_with_flow, -- will be null if it's associated with a campaign\n        last_touch_event_id,\n        last_touch_event_occurred_at,\n        last_touch_event_type,\n        last_touch_integration_name,\n        last_touch_integration_category,\n        source_relation as shopify_source_relation,\n        klaviyo_source_relation,\n        {{ dbt_utils.surrogate_key(['order_id', 'source_relation']) }} as unique_order_key\n\n    from order_events\n    where event_index = 1\n)\n\nselect *\nfrom last_touches", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.datediff", "macro.dbt_utils.star", "macro.dbt_utils.surrogate_key"], "nodes": ["model.shopify.shopify__orders", "model.klaviyo.klaviyo__events", "model.shopify.shopify__orders"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_order_key", "on_schema_change": "ignore", "grants": {}, "partition_by": {"field": "created_timestamp", "data_type": "timestamp"}, "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "shopify_holistic_reporting__orders_attribution"], "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "shopify_holistic_reporting__orders_attribution.sql", "original_file_path": "models/shopify_holistic_reporting__orders_attribution.sql", "name": "shopify_holistic_reporting__orders_attribution", "alias": "shopify_holistic_reporting__orders_attribution", "checksum": {"name": "sha256", "checksum": "73fb2fe152a44cae675c50dde3179125d102ace0e7450e941072ce481be68efa"}, "tags": [], "refs": [["shopify__orders"], ["klaviyo__events"], ["shopify__orders"]], "sources": [], "metrics": [], "description": "Table of Shopify orders, enriched with a last-touch attribution model associating orders (as conversions) to campaigns or flows in Klaviyo. \nBy default, the package performs attribution [in line with Klaviyo](https://help.klaviyo.com/hc/en-us/articles/115005248128).  It considers email opens and clicks, and SMS opens as the events eligible to be credited with orders.  This attribution-eligibility can be configured by the `klaviyo__eligible_attribution_events` variable. \nSimilar to the Klaviyo app, the package by default considers the conversion period/lookback window for email events to  be 120 hours (5 days) and 24 hours for SMS events. These can be configured through the  `klaviyo__email_attribution_lookback` and `klaviyo__sms_attribution_lookback` variables, respectively (in integer-hours).\nRefer to the Klaviyo package [README](https://github.com/fivetran/dbt_klaviyo#attribution-lookback-window) for more details.\nMaterialized incrementally by default.\n", "columns": {"app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_timestamp": {"name": "cancelled_timestamp", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_timestamp": {"name": "closed_timestamp", "description": "The date and time when the order was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_method": {"name": "processing_method", "description": "How the payment was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_taxes_included": {"name": "has_taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_test_order": {"name": "is_test_order", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_count": {"name": "line_item_count", "description": "Number of line items included in the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_order_seq_number": {"name": "customer_order_seq_number", "description": "The sequential number of the order as it relates to the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_vs_repeat": {"name": "new_vs_repeat", "description": "Whether the order was a new or repeat order for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_cost": {"name": "shipping_cost", "description": "The shipping cost of the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjustment_amount": {"name": "order_adjustment_amount", "description": "Total adjustment amount applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjustment_tax_amount": {"name": "order_adjustment_tax_amount", "description": "Total tax applied to the adjustment on the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_subtotal": {"name": "refund_subtotal", "description": "Total refund amount applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_total_tax": {"name": "refund_total_tax", "description": "Total tax applied to the refund on the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_adjusted_total": {"name": "order_adjusted_total", "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Field representing the index of the order line in relation to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pre_tax_price": {"name": "pre_tax_price", "description": "The pre tax price of the order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checkout_token": {"name": "checkout_token", "description": "The checkout token applied to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price set to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "The Klaviyo campaign that the order has been attributed to by the package.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "The Klaviyo flow that the order has been attributed to by the package.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_variation_id": {"name": "last_touch_variation_id", "description": "Unique ID of the attributed Klaviyo flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_name": {"name": "last_touch_campaign_name", "description": "Name of the attributed Klaviyo campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_subject_line": {"name": "last_touch_campaign_subject_line", "description": "Email subject line of the attributed Klaviyo campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_name": {"name": "last_touch_flow_name", "description": "Name of the attributed Klaviyo flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_type": {"name": "last_touch_campaign_type", "description": "Type of Klaviyo campaign that the order is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_event_id": {"name": "last_touch_event_id", "description": "Unique Klaviyo event id of the interaction the customer had with the campaign or flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_event_occurred_at": {"name": "last_touch_event_occurred_at", "description": "Timestamp of when the customer interacted with the attributed campaign/flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_event_type": {"name": "last_touch_event_type", "description": "Type of interaction that the customer had with the campaign or flow. Will be one of the event types specified by the `klaviyo__eligible_attribution_events` variable.  By default, this is just email opens, email clicks, and sms opens.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_integration_name": {"name": "last_touch_integration_name", "description": "Name of the platform that tracked the campaign/flow interaction (either Klaviyo, the API, or another integration).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_integration_category": {"name": "last_touch_integration_category", "description": "Use-case category of the platform that sent the campaign/flow interaction event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_source_relation": {"name": "shopify_source_relation", "description": "The source where this Shopify data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_source_relation": {"name": "klaviyo_source_relation", "description": "The source where Klaviyo campaign/flow data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interactions_with_campaign": {"name": "count_interactions_with_campaign", "description": "The count of distinct attributable events the customer had with the campaign throughout the attribution window.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_interactions_with_flow": {"name": "count_interactions_with_flow", "description": "The count of distinct attributable events the customer had with the flow throughout the attribution window.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting__orders_attribution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "shopify_holistic", "unique_key": "unique_order_key", "partition_by": {"field": "created_timestamp", "data_type": "timestamp"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1665702405.307864, "compiled_sql": "\n\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__orders`\n\n    -- just grab new + newly updated orders\n    \n\n), events as (\n\n    select \n        *\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`\n\n    where \n        coalesce(last_touch_campaign_id, last_touch_flow_id) is not null\n    \n        and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n    \n\n    -- only grab the events for users who are in the new increment of orders\n    \n\n), join_orders_w_events as (\n\n    select \n        orders.*,\n        events.last_touch_campaign_id,\n        events.last_touch_flow_id,\n        events.variation_id as last_touch_variation_id,\n        events.campaign_name as last_touch_campaign_name,\n        events.campaign_subject_line as last_touch_campaign_subject_line,\n        events.flow_name as last_touch_flow_name,\n        events.campaign_type as last_touch_campaign_type,\n        events.event_id as last_touch_event_id,\n        events.occurred_at as last_touch_event_occurred_at,\n        events.type as last_touch_event_type,\n        events.integration_name as last_touch_integration_name,\n        events.integration_category as last_touch_integration_category,\n        events.source_relation as klaviyo_source_relation\n\n    from orders \n    left join events on \n        lower(orders.email) = lower(events.person_email)\n        and datetime_diff(\n        cast(orders.created_timestamp as datetime),\n        cast(events.occurred_at as datetime),\n        hour\n    ) <= (\n            case when events.type like '%sms%' then 24\n            else 120 end)\n        and orders.created_timestamp > events.occurred_at\n\n), order_events as (\n\n    select\n        *,\n        row_number() over (partition by order_id order by last_touch_event_occurred_at desc) as event_index,\n\n        -- the order was made after X interactions with campaign/flow\n        count(last_touch_event_id) over (partition by order_id, last_touch_campaign_id) as count_interactions_with_campaign,\n        count(last_touch_event_id) over (partition by order_id, last_touch_flow_id) as count_interactions_with_flow\n\n\n    from join_orders_w_events\n\n), last_touches as (\n\n    select \n        *,\n        last_touch_campaign_id is not null or last_touch_flow_id is not null as is_attributed,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_variation_id,\n        last_touch_campaign_name,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        last_touch_flow_name,\n        case when last_touch_campaign_id is not null then count_interactions_with_campaign else null end as count_interactions_with_campaign, -- will be null if it's associated with a flow\n        count_interactions_with_flow, -- will be null if it's associated with a campaign\n        last_touch_event_id,\n        last_touch_event_occurred_at,\n        last_touch_event_type,\n        last_touch_integration_name,\n        last_touch_integration_category,\n        source_relation as shopify_source_relation,\n        klaviyo_source_relation,\n        to_hex(md5(cast(coalesce(cast(order_id as \n    string\n), '') || '-' || coalesce(cast(source_relation as \n    string\n), '') as \n    string\n))) as unique_order_key\n\n    from order_events\n    where event_index = 1\n)\n\nselect *\nfrom last_touches", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`"}, "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics": {"raw_sql": "with shopify_daily as (\n\n    select *\n    from {{ ref('int__daily_shopify_customer_orders') }}\n\n), klaviyo_daily as (\n\n    select *\n    from {{ ref('int__daily_klaviyo_user_metrics') }}\n\n), combine_histories as (\n\n    select \n        coalesce(shopify_daily.date_day, klaviyo_daily.date_day) as date_day,\n        coalesce(shopify_daily.email, klaviyo_daily.email) as email,\n\n        -- when the below is null, these are unattributed actions\n        coalesce(shopify_daily.last_touch_campaign_id, klaviyo_daily.last_touch_campaign_id) as campaign_id,\n        coalesce(shopify_daily.last_touch_flow_id, klaviyo_daily.last_touch_flow_id) as flow_id,\n        coalesce(shopify_daily.last_touch_campaign_name, klaviyo_daily.campaign_name) as campaign_name,\n        coalesce(shopify_daily.last_touch_flow_name, klaviyo_daily.flow_name) as flow_name,\n        coalesce(shopify_daily.last_touch_variation_id, klaviyo_daily.variation_id) as variation_id,\n        coalesce(shopify_daily.last_touch_campaign_subject_line, klaviyo_daily.campaign_subject_line) as campaign_subject_line,\n        coalesce(shopify_daily.last_touch_campaign_type, klaviyo_daily.campaign_type) as campaign_type,\n        \n        {{ dbt_utils.star(from=ref('int__daily_shopify_customer_orders'), relation_alias='shopify_daily', prefix='shopify_',\n                                except=['source_relation','date_day', 'email', 'last_touch_variation_id', 'last_touch_flow_name', 'last_touch_campaign_name', 'last_touch_flow_id', 'last_touch_campaign_id', 'last_touch_campaign_subject_line', 'last_touch_campaign_type']) }},\n        shopify_daily.source_relation as shopify_source_relation,\n\n        {{ dbt_utils.star(from=ref('int__daily_klaviyo_user_metrics'), relation_alias='klaviyo_daily', prefix='klaviyo_',\n                                except=['source_relation','date_day', 'email', 'variation_id', 'flow_name', 'campaign_name', 'last_touch_flow_id', 'last_touch_campaign_id', 'campaign_subject_line', 'campaign_type']) }},\n        klaviyo_daily.source_relation as klaviyo_source_relation\n\n    from shopify_daily\n    full outer join klaviyo_daily\n        on lower(shopify_daily.email) = lower(klaviyo_daily.email)\n        and shopify_daily.date_day = klaviyo_daily.date_day\n)\n\nselect *\nfrom combine_histories", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "shopify_holistic_reporting__daily_customer_metrics"], "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "shopify_holistic_reporting__daily_customer_metrics.sql", "original_file_path": "models/shopify_holistic_reporting__daily_customer_metrics.sql", "name": "shopify_holistic_reporting__daily_customer_metrics", "alias": "shopify_holistic_reporting__daily_customer_metrics", "checksum": {"name": "sha256", "checksum": "971dcdccf88ae613b19a18bff1ebb515f480d4fd5fb1c4ae1c8cfb3c0d07072d"}, "tags": [], "refs": [["int__daily_shopify_customer_orders"], ["int__daily_klaviyo_user_metrics"], ["int__daily_shopify_customer_orders"], ["int__daily_klaviyo_user_metrics"]], "sources": [], "metrics": [], "description": "Table that aggregates Shopify and Klaviyo metrics to the day-customer-campaign or day-customer-flow grain (but note that if a user interacts  with 2 different variations of a flow/campaign somehow, they will have 2 records).  Also note that non-attributed (to Klaviyo at least) orders and interactions (someone with null campaign_id/flow_id) are included in this table. \nFor **Klaviyo**: **Counts** of the instances of the events, as well as **sums** of the numeric value associated  with events (i.e. revenue) will be pivoted out into columns, as configured by the `klaviyo__count_metrics` and `klaviyo__sum_revenue_metrics` variables, respectively. See the dbt_project.yml file for the default metrics used.  These columns will be prefixed with `count_` and `sum_revenue_`.\nNote that 0-activity days will not appear. \n", "columns": {"date_day": {"name": "date_day", "description": "Day on which the customer performed these activities.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key referencing the CAMPAIGN attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Foreign key referencing the FLOW attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the attributed campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the attributed flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_first_event_at": {"name": "klaviyo_first_event_at", "description": "Timestamp of the first interaction between this campaign/flow and a person on this day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_last_event_at": {"name": "klaviyo_last_event_at", "description": "Timestamp of the last interaction between this campaign/flow and a person on this day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_subject_line": {"name": "campaign_subject_line", "description": "Email subject line of the Klaviyo campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_source_relation": {"name": "shopify_source_relation", "description": "The source where this Shopify data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "klaviyo_source_relation": {"name": "klaviyo_source_relation", "description": "The source where this Klaviyo data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_orders": {"name": "shopify_total_orders", "description": "Total number of orders the customer placed on this day, associated with this campaign or flow. Includes canceled orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_price": {"name": "shopify_total_price", "description": "Total adjusted price the customer paid on this day, associated with this campaign or flow, in shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_count_line_items": {"name": "shopify_count_line_items", "description": "The count of order line items the customer placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_line_items_price": {"name": "shopify_total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_discounts": {"name": "shopify_total_discounts", "description": "The sum of discounts applied to the customer's orders, in shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_tax": {"name": "shopify_total_tax", "description": "The sum of taxes paid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_shipping_cost": {"name": "shopify_total_shipping_cost", "description": "The sum of shipping costs paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_refund_subtotal": {"name": "shopify_total_refund_subtotal", "description": "Total amount refunded by the customer. Note that that `date_day` will be when the order was created, not refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_refund_tax": {"name": "shopify_total_refund_tax", "description": "Total tax applied to the customer's refunds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_count_cancelled_orders": {"name": "shopify_count_cancelled_orders", "description": "The count of orders that the customer made on this day and canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_count_products": {"name": "shopify_count_products", "description": "The count of distinct products (based on distinct `product_ids`) that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_count_product_variants": {"name": "shopify_count_product_variants", "description": "The count of distinct products variants that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_sum_quantity": {"name": "shopify_sum_quantity", "description": "The total quantity of items that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_order_adjustment_amount": {"name": "shopify_total_order_adjustment_amount", "description": "The total amount of adjustments made to the customer's orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shopify_total_order_adjustment_tax_amount": {"name": "shopify_total_order_adjustment_tax_amount", "description": "The total amount of taxes applied to adjustments made to the customer's orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting__daily_customer_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "shopify_holistic"}, "created_at": 1665702405.295847, "compiled_sql": "with shopify_daily as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__daily_shopify_customer_orders`\n\n), klaviyo_daily as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__daily_klaviyo_user_metrics`\n\n), combine_histories as (\n\n    select \n        coalesce(shopify_daily.date_day, klaviyo_daily.date_day) as date_day,\n        coalesce(shopify_daily.email, klaviyo_daily.email) as email,\n\n        -- when the below is null, these are unattributed actions\n        coalesce(shopify_daily.last_touch_campaign_id, klaviyo_daily.last_touch_campaign_id) as campaign_id,\n        coalesce(shopify_daily.last_touch_flow_id, klaviyo_daily.last_touch_flow_id) as flow_id,\n        coalesce(shopify_daily.last_touch_campaign_name, klaviyo_daily.campaign_name) as campaign_name,\n        coalesce(shopify_daily.last_touch_flow_name, klaviyo_daily.flow_name) as flow_name,\n        coalesce(shopify_daily.last_touch_variation_id, klaviyo_daily.variation_id) as variation_id,\n        coalesce(shopify_daily.last_touch_campaign_subject_line, klaviyo_daily.campaign_subject_line) as campaign_subject_line,\n        coalesce(shopify_daily.last_touch_campaign_type, klaviyo_daily.campaign_type) as campaign_type,\n        \n        *,\n        shopify_daily.source_relation as shopify_source_relation,\n\n        *,\n        klaviyo_daily.source_relation as klaviyo_source_relation\n\n    from shopify_daily\n    full outer join klaviyo_daily\n        on lower(shopify_daily.email) = lower(klaviyo_daily.email)\n        and shopify_daily.date_day = klaviyo_daily.date_day\n)\n\nselect *\nfrom combine_histories", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__daily_customer_metrics`"}, "model.shopify_holistic_reporting.int__daily_shopify_customer_orders": {"raw_sql": "with orders as (\n\n    select *\n    from {{ ref('shopify_holistic_reporting__orders_attribution') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n\n), order_line_metrics as (\n\n    select \n        order_id,\n        source_relation,\n        count(distinct product_id) as count_products,\n        count(distinct product_id || '-' || variant_id) as count_product_variants,\n        sum(quantity) as sum_quantity\n        \n    from order_lines\n    group by 1,2\n\n), join_orders as (\n\n    select \n        orders.*,\n        order_line_metrics.count_products,\n        order_line_metrics.count_product_variants,\n        order_line_metrics.sum_quantity\n\n    from orders \n    left join order_line_metrics\n        on orders.order_id = order_line_metrics.order_id\n        and orders.shopify_source_relation = order_line_metrics.source_relation\n\n), daily_order_metrics as (\n\n    select\n        cast( {{ dbt_utils.date_trunc('day', 'created_timestamp') }} as date) as date_day,\n        email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_campaign_name,\n        last_touch_flow_name,\n        last_touch_variation_id,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        shopify_source_relation as source_relation,\n\n        count(distinct order_id) as total_orders,\n        sum(order_adjusted_total) as total_price,\n\n        sum(line_item_count) as count_line_items,\n        sum(total_line_items_price) as total_line_items_price,\n        \n\n        sum(total_discounts) as total_discounts,\n        sum(total_tax) as total_tax,\n        sum(shipping_cost) as total_shipping_cost,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        sum(refund_subtotal) as total_refund_subtotal,\n        sum(refund_total_tax) as total_refund_tax,\n        {% endif %}\n\n        sum(case when cancelled_timestamp is not null then 1 else 0 end) as count_cancelled_orders,\n        sum(count_products) as count_products,\n        sum(count_product_variants) as count_product_variants,\n        sum(sum_quantity) as sum_quantity\n\n        {% if var('shopify__using_order_adjustment', true) %}\n        , sum(order_adjustment_amount) as total_order_adjustment_amount\n        , sum(order_adjustment_tax_amount) as total_order_adjustment_tax_amount\n        {% endif %}\n        \n\n    from join_orders\n    {{ dbt_utils.group_by(n=10)}}\n)\n\nselect *\nfrom daily_order_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.fivetran_utils.enabled_vars", "macro.dbt_utils.group_by"], "nodes": ["model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "model.shopify.shopify__order_lines"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "intermediate", "int__daily_shopify_customer_orders"], "unique_id": "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "intermediate/int__daily_shopify_customer_orders.sql", "original_file_path": "models/intermediate/int__daily_shopify_customer_orders.sql", "name": "int__daily_shopify_customer_orders", "alias": "int__daily_shopify_customer_orders", "checksum": {"name": "sha256", "checksum": "d72f384b963f98264127d5e031e2e30ac3cafbc48bbf79494b80bd8367e1b0a2"}, "tags": [], "refs": [["shopify_holistic_reporting__orders_attribution"], ["shopify__order_lines"]], "sources": [], "metrics": [], "description": "", "columns": {"date_day": {"name": "date_day", "description": "Day on which the customer performed these activities.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "Foreign key referencing the CAMPAIGN attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "Foreign key referencing the FLOW attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_name": {"name": "last_touch_campaign_name", "description": "Name of the attributed campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_name": {"name": "last_touch_flow_name", "description": "Name of the attributed flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_variation_id": {"name": "last_touch_variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_subject_line": {"name": "last_touch_campaign_subject_line", "description": "Email subject line of the Klaviyo campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_type": {"name": "last_touch_campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this Shopify data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_orders": {"name": "total_orders", "description": "Total number of orders the customer placed on this day, associated with this campaign or flow. Includes canceled orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "Total adjusted price the customer paid on this day, associated with this campaign or flow, in shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_line_items": {"name": "count_line_items", "description": "The count of order line items the customer placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "The sum of discounts applied to the customer's orders, in shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The sum of taxes paid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_shipping_cost": {"name": "total_shipping_cost", "description": "The sum of shipping costs paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refund_subtotal": {"name": "total_refund_subtotal", "description": "Total amount refunded by the customer. Note that that `date_day` will be when the order was created, not refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refund_tax": {"name": "total_refund_tax", "description": "Total tax applied to the customer's refunds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_cancelled_orders": {"name": "count_cancelled_orders", "description": "The count of orders that the customer made on this day and canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_products": {"name": "count_products", "description": "The count of distinct products (based on distinct `product_ids`) that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_product_variants": {"name": "count_product_variants", "description": "The count of distinct products variants that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_quantity": {"name": "sum_quantity", "description": "The total quantity of items that the customer purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_order_adjustment_amount": {"name": "total_order_adjustment_amount", "description": "The total amount of adjustments made to the customer's orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_order_adjustment_tax_amount": {"name": "total_order_adjustment_tax_amount", "description": "The total amount of taxes applied to adjustments made to the customer's orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/intermediate/int_shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/intermediate/int__daily_shopify_customer_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "shopify_holistic"}, "created_at": 1665702405.3217468, "compiled_sql": "with orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`\n\n), order_lines as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__order_lines`\n\n), order_line_metrics as (\n\n    select \n        order_id,\n        source_relation,\n        count(distinct product_id) as count_products,\n        count(distinct product_id || '-' || variant_id) as count_product_variants,\n        sum(quantity) as sum_quantity\n        \n    from order_lines\n    group by 1,2\n\n), join_orders as (\n\n    select \n        orders.*,\n        order_line_metrics.count_products,\n        order_line_metrics.count_product_variants,\n        order_line_metrics.sum_quantity\n\n    from orders \n    left join order_line_metrics\n        on orders.order_id = order_line_metrics.order_id\n        and orders.shopify_source_relation = order_line_metrics.source_relation\n\n), daily_order_metrics as (\n\n    select\n        cast( timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_campaign_name,\n        last_touch_flow_name,\n        last_touch_variation_id,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        shopify_source_relation as source_relation,\n\n        count(distinct order_id) as total_orders,\n        sum(order_adjusted_total) as total_price,\n\n        sum(line_item_count) as count_line_items,\n        sum(total_line_items_price) as total_line_items_price,\n        \n\n        sum(total_discounts) as total_discounts,\n        sum(total_tax) as total_tax,\n        sum(shipping_cost) as total_shipping_cost,\n\n        \n        sum(refund_subtotal) as total_refund_subtotal,\n        sum(refund_total_tax) as total_refund_tax,\n        \n\n        sum(case when cancelled_timestamp is not null then 1 else 0 end) as count_cancelled_orders,\n        sum(count_products) as count_products,\n        sum(count_product_variants) as count_product_variants,\n        sum(sum_quantity) as sum_quantity\n\n        \n        , sum(order_adjustment_amount) as total_order_adjustment_amount\n        , sum(order_adjustment_tax_amount) as total_order_adjustment_tax_amount\n        \n        \n\n    from join_orders\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect *\nfrom daily_order_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__daily_shopify_customer_orders`"}, "model.shopify_holistic_reporting.int__shopify_customer_rollup": {"raw_sql": "with customers as (\n\n    select \n        *,\n        row_number() over(partition by email order by created_timestamp desc) as customer_index\n\n    from {{ ref('shopify__customers') }}\n\n    where email is not null -- nonsensical to include any null emails in  this package\n\n), aggregate_customers as (\n\n    select\n        lower(email) as email,\n        source_relation,\n        {{ fivetran_utils.string_agg(\"cast(customer_id as \" ~ dbt_utils.type_string() ~ \")\", \"', '\") }} as customer_ids,\n        {{ fivetran_utils.string_agg(\"distinct cast(phone as \" ~ dbt_utils.type_string() ~ \")\", \"', '\") }} as phone_numbers,\n\n        max(case when customer_index = 1 then first_name || ' ' || last_name else null end) as full_name,\n\n        min(created_timestamp) as first_shopify_account_made_at,\n        max(created_timestamp) as last_shopify_account_made_at,\n        min(first_order_timestamp) as first_order_at,\n        max(most_recent_order_timestamp) as last_order_at,\n        max(updated_timestamp) as last_updated_at,\n\n        -- sum across accounts\n        sum(lifetime_total_spent) as lifetime_total_spent,\n        sum(lifetime_total_refunded) as lifetime_total_refunded,\n        sum(lifetime_total_amount) as lifetime_total_amount,\n        sum(lifetime_count_orders) as lifetime_count_orders,\n        case \n            when sum(lifetime_count_orders) = 0 then 0\n            else sum(lifetime_total_spent) / sum(lifetime_count_orders) end as average_order_value,\n\n        -- take true if ever given for boolean fields\n        {{ fivetran_utils.max_bool(\"has_accepted_marketing\") }} as has_accepted_marketing,\n        {{ fivetran_utils.max_bool(\"case when customer_index = 1 then is_tax_exempt else null end\") }} as is_tax_exempt, -- since this changes every year\n        {{ fivetran_utils.max_bool(\"is_verified_email\") }} as is_verified_email,\n\n        -- other stuff\n        max(case when customer_index = 1 then default_address_id else null end) as default_address_id,\n        max(case when customer_index = 1 then account_state else null end) as account_state\n\n        -- ok let's get any custom passthrough columns! might want to put all max(Case when)'s in here....\n        {% set cols = adapter.get_columns_in_relation(ref('shopify__customers')) %}\n        {% set except_cols = ['_fivetran_synced', 'email', 'source_relation', 'customer_id', 'phone', 'first_name', 'last_name', 'created_timestamp', 'first_order_timestamp', 'most_recent_order_timestamp',\n                                'updated_timestamp', 'lifetime_total_spent', 'lifetime_total_refunded', 'lifetime_total_amount', 'lifetime_count_orders', 'average_order_value', 'has_accepted_marketing',\n                                'is_tax_exempt', 'is_verified_email', 'default_address_id', 'account_state'] %}\n        {% for col in cols %}\n            {% if col.column|lower not in except_cols %}\n            , max(case when customer_index = 1 then {{ col.column }} else null end) as {{ col.column }}\n            {% endif %}\n        {% endfor %}\n\n    from customers \n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregate_customers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.fivetran_utils.string_agg", "macro.fivetran_utils.max_bool"], "nodes": ["model.shopify.shopify__customers", "model.shopify.shopify__customers"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "intermediate", "int__shopify_customer_rollup"], "unique_id": "model.shopify_holistic_reporting.int__shopify_customer_rollup", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "intermediate/int__shopify_customer_rollup.sql", "original_file_path": "models/intermediate/int__shopify_customer_rollup.sql", "name": "int__shopify_customer_rollup", "alias": "int__shopify_customer_rollup", "checksum": {"name": "sha256", "checksum": "4ee4ea4a1e004aa732004a879fff8a885afe00f56e679b43ae87032740905bff"}, "tags": [], "refs": [["shopify__customers"], ["shopify__customers"]], "sources": [], "metrics": [], "description": "Table rolling up shopify customer accounts to the email level. In theory, these should be 1:1, but under certain circumstances (ie bots) one email can be associated with multiple customer_ids.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_accepted_marketing": {"name": "has_accepted_marketing", "description": "Whether the customer has consented to receive marketing material via email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_shopify_account_made_at": {"name": "first_shopify_account_made_at", "description": "The date and time when the customer account first associated with this email was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_shopify_account_made_at": {"name": "last_shopify_account_made_at", "description": "The date and time when the customer account first associated with this email was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The unique email address of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The customer's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_ids": {"name": "customer_ids", "description": "A comma-separated aggregated list of Shopify IDs for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_count_orders": {"name": "lifetime_count_orders", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_numbers": {"name": "phone_numbers", "description": "Comma separated aggregated list of unique phone numbers (E.164 format) for this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_at": {"name": "first_order_at", "description": "The timestamp the customer completed their first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_order_at": {"name": "last_order_at", "description": "The timestamp the customer completed their most recent order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_order_value": {"name": "average_order_value", "description": "The average order value for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_spent": {"name": "lifetime_total_spent", "description": "The total amount of money that the customer has spent on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_refunded": {"name": "lifetime_total_refunded", "description": "The total amount of money that the customer has been refunded on orders across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_total_amount": {"name": "lifetime_total_amount", "description": "The total amount of money (minus refunds) that the customer has spent across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/intermediate/int_shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/intermediate/int__shopify_customer_rollup.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "shopify_holistic"}, "created_at": 1665702405.324471, "compiled_sql": "with customers as (\n\n    select \n        *,\n        row_number() over(partition by email order by created_timestamp desc) as customer_index\n\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customers`\n\n    where email is not null -- nonsensical to include any null emails in  this package\n\n), aggregate_customers as (\n\n    select\n        lower(email) as email,\n        source_relation,\n        \n    string_agg(cast(customer_id as \n    string\n), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(phone as \n    string\n), ', ')\n\n as phone_numbers,\n\n        max(case when customer_index = 1 then first_name || ' ' || last_name else null end) as full_name,\n\n        min(created_timestamp) as first_shopify_account_made_at,\n        max(created_timestamp) as last_shopify_account_made_at,\n        min(first_order_timestamp) as first_order_at,\n        max(most_recent_order_timestamp) as last_order_at,\n        max(updated_timestamp) as last_updated_at,\n\n        -- sum across accounts\n        sum(lifetime_total_spent) as lifetime_total_spent,\n        sum(lifetime_total_refunded) as lifetime_total_refunded,\n        sum(lifetime_total_amount) as lifetime_total_amount,\n        sum(lifetime_count_orders) as lifetime_count_orders,\n        case \n            when sum(lifetime_count_orders) = 0 then 0\n            else sum(lifetime_total_spent) / sum(lifetime_count_orders) end as average_order_value,\n\n        -- take true if ever given for boolean fields\n        \n\n    max( has_accepted_marketing )\n\n as has_accepted_marketing,\n        \n\n    max( case when customer_index = 1 then is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    max( is_verified_email )\n\n as is_verified_email,\n\n        -- other stuff\n        max(case when customer_index = 1 then default_address_id else null end) as default_address_id,\n        max(case when customer_index = 1 then account_state else null end) as account_state\n\n        -- ok let's get any custom passthrough columns! might want to put all max(Case when)'s in here....\n        \n        \n        \n\n    from customers \n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregate_customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__shopify_customer_rollup`"}, "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics": {"raw_sql": "with events as (\n\n    select *\n    from {{ ref('klaviyo__events') }}\n\n), pivot_out_events as (\n    \n    select \n        cast( {{ dbt_utils.date_trunc('day', 'occurred_at') }} as date) as date_day,\n        person_email as email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        campaign_subject_line,\n        campaign_type,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    {% for rm in var('klaviyo__sum_revenue_metrics') %}\n    , sum(case when lower(type) = '{{ rm | lower }}' then \n            coalesce({{ fivetran_utils.try_cast(\"numeric_value\", \"numeric\") }}, 0)\n            else 0 end) \n        as {{ 'sum_revenue_' ~ rm | replace(' ', '_') | replace('(', '') | replace(')', '') | lower }} -- removing special characters that I have seen in different integration events\n    {% endfor %}\n\n    -- count up the number of instances of each metric\n    {% for cm in var('klaviyo__count_metrics') %}\n    , sum(case when lower(type) = '{{ cm | lower }}' then 1 else 0 end) \n        as {{ 'count_' ~ cm | replace(' ', '_') | replace('(', '') | replace(')', '') | lower }} -- removing special characters that I have seen in different integration events\n    {% endfor %}\n\n    from events\n    {{ dbt_utils.group_by(n=10) }}\n)\n\n-- the grain will be person-flow-campaign-variation-day\nselect *\nfrom pivot_out_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.fivetran_utils.try_cast", "macro.dbt_utils.group_by"], "nodes": ["model.klaviyo.klaviyo__events"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "intermediate", "int__daily_klaviyo_user_metrics"], "unique_id": "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "intermediate/int__daily_klaviyo_user_metrics.sql", "original_file_path": "models/intermediate/int__daily_klaviyo_user_metrics.sql", "name": "int__daily_klaviyo_user_metrics", "alias": "int__daily_klaviyo_user_metrics", "checksum": {"name": "sha256", "checksum": "9074aea6aba5dc661a9c2bf48cfddff3d94f7729b5ce0fd29316de663883d7b8"}, "tags": [], "refs": [["klaviyo__events"]], "sources": [], "metrics": [], "description": "", "columns": {"date_day": {"name": "date_day", "description": "Day on which the customer performed these activities.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_campaign_id": {"name": "last_touch_campaign_id", "description": "Foreign key referencing the CAMPAIGN attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_touch_flow_id": {"name": "last_touch_flow_id", "description": "Foreign key referencing the FLOW attributed with these metrics (by the package's attribution model).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the attributed campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_name": {"name": "flow_name", "description": "Name of the attributed flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variation_id": {"name": "variation_id", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first interaction between this campaign/flow and a person on this day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the last interaction between this campaign/flow and a person on this day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_subject_line": {"name": "campaign_subject_line", "description": "Email subject line of the Klaviyo campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this Klaviyo data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/intermediate/int_shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/intermediate/int__daily_klaviyo_user_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "shopify_holistic"}, "created_at": 1665702405.3182101, "compiled_sql": "with events as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`\n\n), pivot_out_events as (\n    \n    select \n        cast( timestamp_trunc(\n        cast(occurred_at as timestamp),\n        day\n    ) as date) as date_day,\n        person_email as email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        campaign_subject_line,\n        campaign_type,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\n-- the grain will be person-flow-campaign-variation-day\nselect *\nfrom pivot_out_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__daily_klaviyo_user_metrics`"}, "model.shopify_holistic_reporting.int__klaviyo_person_rollup": {"raw_sql": "with persons as (\n\n    select\n        *,\n        row_number() over (partition by email order by created_at desc) as person_index\n    \n    from {{ ref('klaviyo__persons') }}\n    where email is not null -- should never be the case but just in case\n\n), aggregate_persons as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        {{ fivetran_utils.string_agg(\"person_id\", \"', '\") }} as person_ids,\n        {{ fivetran_utils.string_agg(\"distinct cast(phone_number as \" ~ dbt_utils.type_string() ~ \")\", \"', '\") }} as phone_numbers,\n        max( case when person_index = 1 then full_name else null end) as full_name,\n        \n        min(created_at) as first_klaviyo_account_made_at,\n        max(created_at) as last_klaviyo_account_made_at,\n        max(updated_at) as last_updated_at,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at,\n        min(first_campaign_touch_at) as first_campaign_touch_at,\n        max(last_campaign_touch_at) as last_campaign_touch_at,\n        min(first_flow_touch_at) as first_flow_touch_at,\n        max(last_flow_touch_at) as last_flow_touch_at,\n\n        sum(count_total_campaigns) as count_total_campaigns,\n        sum(count_total_flows) as count_total_flows\n\n\n        {% set cols = adapter.get_columns_in_relation(ref('klaviyo__persons')) %}\n        {% set except_cols = ['_fivetran_synced', 'email', 'source_relation', 'person_id', 'phone_number', 'full_name', 'created_at', 'updated_at', 'count_total_campaigns', 'count_total_flows',\n                                'first_event_at', 'last_event_at', 'first_campaign_touch_at', 'last_campaign_touch_at', 'first_flow_touch_at', 'last_flow_touch_at'] %}\n        {% for col in cols %}\n            {% if col.column|lower not in except_cols %}\n            , max(case when person_index = 1 then {{ col.column }} else null end) as {{ col.column }}\n            {% endif %}\n        {% endfor %}\n\n    from persons\n    group by 1,2\n)\n\nselect *\nfrom aggregate_persons", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg", "macro.dbt_utils.type_string"], "nodes": ["model.klaviyo.klaviyo__persons", "model.klaviyo.klaviyo__persons"]}, "config": {"enabled": true, "alias": null, "schema": "shopify_holistic", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_shopify_holistic", "fqn": ["shopify_holistic_reporting", "intermediate", "int__klaviyo_person_rollup"], "unique_id": "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "intermediate/int__klaviyo_person_rollup.sql", "original_file_path": "models/intermediate/int__klaviyo_person_rollup.sql", "name": "int__klaviyo_person_rollup", "alias": "int__klaviyo_person_rollup", "checksum": {"name": "sha256", "checksum": "45decc1969fef4f4fe0fb7ec2b4531a4a57a160d1610e2fa5f8029173b50414a"}, "tags": [], "refs": [["klaviyo__persons"], ["klaviyo__persons"]], "sources": [], "metrics": [], "description": "Table rolling up Klaviyo person accounts to the email level. In theory, these should certainly be 1:1, but under certain circumstances emails can be sent with multiple person_ids from the Klaviyo API.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address and the unique identifier for a profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_ids": {"name": "person_ids", "description": "A comma-separated aggregated list of Klaviyo IDs for the person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_numbers": {"name": "phone_numbers", "description": "Comma separated aggregated list of unique phone numbers for this person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Person's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_klaviyo_account_made_at": {"name": "first_klaviyo_account_made_at", "description": "Timestamp of when the person's profile was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_klaviyo_account_made_at": {"name": "last_klaviyo_account_made_at", "description": "Timestamp of when the person's profile was last created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the person profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of when the user first triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of when the user last triggered an event (not limited to campaign and flow interactions).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_campaign_touch_at": {"name": "first_campaign_touch_at", "description": "Timestamp of when the user first interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_campaign_touch_at": {"name": "last_campaign_touch_at", "description": "Timestamp of when the user last interacted with a campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_flow_touch_at": {"name": "first_flow_touch_at", "description": "Timestamp of when the user first interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_flow_touch_at": {"name": "last_flow_touch_at", "description": "Timestamp of when the user last interacted with a flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_campaigns": {"name": "count_total_campaigns", "description": "Count of the number of campaigns this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_flows": {"name": "count_total_flows", "description": "Count of the number of flows this person has interacted with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "First line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "Second line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "Postal code where they live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization": {"name": "organization", "description": "Business organization they belong to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region or state they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone they are situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title at their business or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "shopify_holistic_reporting://models/intermediate/int_shopify_holistic_reporting.yml", "compiled_path": "target/compiled/shopify_holistic_reporting/models/intermediate/int__klaviyo_person_rollup.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "shopify_holistic"}, "created_at": 1665702405.3281338, "compiled_sql": "with persons as (\n\n    select\n        *,\n        row_number() over (partition by email order by created_at desc) as person_index\n    \n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`\n    where email is not null -- should never be the case but just in case\n\n), aggregate_persons as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        \n    string_agg(person_id, ', ')\n\n as person_ids,\n        \n    string_agg(distinct cast(phone_number as \n    string\n), ', ')\n\n as phone_numbers,\n        max( case when person_index = 1 then full_name else null end) as full_name,\n        \n        min(created_at) as first_klaviyo_account_made_at,\n        max(created_at) as last_klaviyo_account_made_at,\n        max(updated_at) as last_updated_at,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at,\n        min(first_campaign_touch_at) as first_campaign_touch_at,\n        max(last_campaign_touch_at) as last_campaign_touch_at,\n        min(first_flow_touch_at) as first_flow_touch_at,\n        max(last_flow_touch_at) as last_flow_touch_at,\n\n        sum(count_total_campaigns) as count_total_campaigns,\n        sum(count_total_flows) as count_total_flows\n\n\n        \n        \n        \n\n    from persons\n    group by 1,2\n)\n\nselect *\nfrom aggregate_persons", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`int__klaviyo_person_rollup`"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__customer')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__customer"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation", "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be"}, "created_at": 1665702405.040355, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__customer"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_line_refund')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_line_refund"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation", "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__order_line_refund"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3"}, "created_at": 1665702405.047092, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__order_line_refund"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_line')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_line"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation", "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__order_line"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec"}, "created_at": 1665702405.049681, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__order_line"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation", "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e"}, "created_at": 1665702405.0522509, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__order"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation", "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__product"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d"}, "created_at": 1665702405.0550249, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__product"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["variant_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product_variant')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_variant"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation", "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__product_variant"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e"}, "created_at": 1665702405.057497, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__product_variant`\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__product_variant"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__transaction')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__transaction"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation", "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92"}, "created_at": 1665702405.060158, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__transaction`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__transaction"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__refund')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__refund"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation", "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__refund"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659"}, "created_at": 1665702405.0627332, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__refund"}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_adjustment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_adjustment')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_adjustment"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation"], "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207.sql", "original_file_path": "models/stg_shopify.yml", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation", "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shopify__order_adjustment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207"}, "created_at": 1665702405.065301, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_adjustment`\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_shopify__order_adjustment"}, "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__campaign_campaign_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__campaign_campaign_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__campaign_campaign_id", "alias": "not_null_stg_klaviyo__campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__campaign_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.1435468, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_klaviyo__campaign"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__campaign')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__campaign"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation", "alias": "dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_972961dcf9c5c4d5b8e43db578561c26"}, "created_at": 1665702405.144762, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__campaign`\n    group by campaign_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__campaign"}, "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__event_event_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__event_event_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__event_event_id", "alias": "not_null_stg_klaviyo__event_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__event"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__event_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.1474612, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_klaviyo__event"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__event')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__event"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation", "alias": "dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__event"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8881439048410324e034ca08f1ef95fa"}, "created_at": 1665702405.148426, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__event`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__event"}, "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flow_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__flow')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__flow"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__flow_flow_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__flow_flow_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__flow_flow_id", "alias": "not_null_stg_klaviyo__flow_flow_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__flow"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__flow_flow_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.150979, "compiled_sql": "\n    \n    \n\n\n\nselect flow_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow`\nwhere flow_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flow_id", "file_key_name": "models.stg_klaviyo__flow"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["flow_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__flow')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__flow"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation", "alias": "dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__flow"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_007bf18d3b6d4b25aebcc986dc772270"}, "created_at": 1665702405.15194, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__flow`\n    group by flow_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__flow"}, "test.klaviyo_source.not_null_stg_klaviyo__integration_integration_id.fe572c5f1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "integration_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__integration')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__integration"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__integration_integration_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__integration_integration_id.fe572c5f1b", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__integration_integration_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__integration_integration_id", "alias": "not_null_stg_klaviyo__integration_integration_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__integration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__integration_integration_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.154494, "compiled_sql": "\n    \n    \n\n\n\nselect integration_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration`\nwhere integration_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "integration_id", "file_key_name": "models.stg_klaviyo__integration"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation.be6158ad21": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["integration_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__integration')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__integration"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation.be6158ad21", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation", "alias": "dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__integration"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a7f288c54a3281da69034a0f95230596"}, "created_at": 1665702405.155454, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        integration_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__integration`\n    group by integration_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__integration"}, "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__person_person_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__person_person_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__person_person_id", "alias": "not_null_stg_klaviyo__person_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__person"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__person_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.158001, "compiled_sql": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id", "file_key_name": "models.stg_klaviyo__person"}, "test.klaviyo_source.unique_stg_klaviyo__person_email.dc3a98b014": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('stg_klaviyo__person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "unique_stg_klaviyo__person_email"], "unique_id": "test.klaviyo_source.unique_stg_klaviyo__person_email.dc3a98b014", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "unique_stg_klaviyo__person_email.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "unique_stg_klaviyo__person_email", "alias": "unique_stg_klaviyo__person_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__person"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/unique_stg_klaviyo__person_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1665702405.159242, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n\n  select email as unique_field\n  from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\n  where email is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email", "file_key_name": "models.stg_klaviyo__person"}, "test.klaviyo_source.not_null_stg_klaviyo__person_email.c7094cfe27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('stg_klaviyo__person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__person_email"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__person_email.c7094cfe27", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__person_email.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__person_email", "alias": "not_null_stg_klaviyo__person_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__person"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__person_email.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.160204, "compiled_sql": "\n    \n    \n\n\n\nselect email\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email", "file_key_name": "models.stg_klaviyo__person"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["person_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__person')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__person"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation", "alias": "dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__person"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_df656836e047bb69a86997735efb3161"}, "created_at": 1665702405.1611462, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__person`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__person"}, "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_id", "model": "{{ get_where_subquery(ref('stg_klaviyo__metric')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__metric"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "not_null_stg_klaviyo__metric_metric_id"], "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "not_null_stg_klaviyo__metric_metric_id.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "not_null_stg_klaviyo__metric_metric_id", "alias": "not_null_stg_klaviyo__metric_metric_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__metric"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/not_null_stg_klaviyo__metric_metric_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.163696, "compiled_sql": "\n    \n    \n\n\n\nselect metric_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric`\nwhere metric_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_id", "file_key_name": "models.stg_klaviyo__metric"}, "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["metric_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_klaviyo__metric')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo_source.stg_klaviyo__metric"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo_source", "dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation"], "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58.sql", "original_file_path": "models/stg_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation", "alias": "dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_klaviyo__metric"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo_source/models/stg_klaviyo.yml/dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_45cba7e3442f1bc3264a04c52efb4d58"}, "created_at": 1665702405.164653, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metric_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_klaviyo`.`stg_klaviyo__metric`\n    group by metric_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_klaviyo__metric"}, "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('klaviyo__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__events_event_id"], "unique_id": "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__events_event_id.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__events_event_id", "alias": "not_null_klaviyo__events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__events_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.195754, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.klaviyo__events"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_id", "source_relation"], "model": "{{ get_where_subquery(ref('klaviyo__events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98.sql", "original_file_path": "models/klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation", "alias": "dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8b483e4115ab91fbb579be0d68288d98"}, "created_at": 1665702405.196776, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__events`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.klaviyo__events"}, "test.klaviyo.not_null_klaviyo__person_campaign_flow_person_id.e27d13b0f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('klaviyo__person_campaign_flow')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__person_campaign_flow"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__person_campaign_flow_person_id"], "unique_id": "test.klaviyo.not_null_klaviyo__person_campaign_flow_person_id.e27d13b0f2", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__person_campaign_flow_person_id.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__person_campaign_flow_person_id", "alias": "not_null_klaviyo__person_campaign_flow_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__person_campaign_flow"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__person_campaign_flow_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.199351, "compiled_sql": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__person_campaign_flow`\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id", "file_key_name": "models.klaviyo__person_campaign_flow"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["person_id", "last_touch_campaign_id", "last_touch_flow_id", "variation_id", "source_relation"], "model": "{{ get_where_subquery(ref('klaviyo__person_campaign_flow')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__person_campaign_flow"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd.sql", "original_file_path": "models/klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation", "alias": "dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__person_campaign_flow"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b833c7b8de2dbcac0bfcd913f29d49fd"}, "created_at": 1665702405.200317, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__person_campaign_flow`\n    group by person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.klaviyo__person_campaign_flow"}, "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_variation_key", "model": "{{ get_where_subquery(ref('klaviyo__campaigns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__campaigns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__campaigns_campaign_variation_key"], "unique_id": "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__campaigns_campaign_variation_key.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__campaigns_campaign_variation_key", "alias": "not_null_klaviyo__campaigns_campaign_variation_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__campaigns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__campaigns_campaign_variation_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.203211, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_variation_key\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__campaigns`\nwhere campaign_variation_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_variation_key", "file_key_name": "models.klaviyo__campaigns"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_variation_key", "source_relation"], "model": "{{ get_where_subquery(ref('klaviyo__campaigns')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__campaigns"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64.sql", "original_file_path": "models/klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation", "alias": "dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__campaigns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c02a0c80dd7e19571d353539126fd64"}, "created_at": 1665702405.204306, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_variation_key, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__campaigns`\n    group by campaign_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.klaviyo__campaigns"}, "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flow_variation_key", "model": "{{ get_where_subquery(ref('klaviyo__flows')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__flows"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__flows_flow_variation_key"], "unique_id": "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__flows_flow_variation_key.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__flows_flow_variation_key", "alias": "not_null_klaviyo__flows_flow_variation_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__flows"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__flows_flow_variation_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.206733, "compiled_sql": "\n    \n    \n\n\n\nselect flow_variation_key\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__flows`\nwhere flow_variation_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flow_variation_key", "file_key_name": "models.klaviyo__flows"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["flow_variation_key", "source_relation"], "model": "{{ get_where_subquery(ref('klaviyo__flows')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__flows"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e.sql", "original_file_path": "models/klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation", "alias": "dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__flows"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_699ce797a4af34c0906f1e96e7e5186e"}, "created_at": 1665702405.207826, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_variation_key, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__flows`\n    group by flow_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.klaviyo__flows"}, "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('klaviyo__persons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__persons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__persons_person_id"], "unique_id": "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__persons_person_id.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__persons_person_id", "alias": "not_null_klaviyo__persons_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__persons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__persons_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.210376, "compiled_sql": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id", "file_key_name": "models.klaviyo__persons"}, "test.klaviyo.unique_klaviyo__persons_email.a330194dd6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('klaviyo__persons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__persons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "unique_klaviyo__persons_email"], "unique_id": "test.klaviyo.unique_klaviyo__persons_email.a330194dd6", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "unique_klaviyo__persons_email.sql", "original_file_path": "models/klaviyo.yml", "name": "unique_klaviyo__persons_email", "alias": "unique_klaviyo__persons_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__persons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/unique_klaviyo__persons_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1665702405.211492, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n\n  select email as unique_field\n  from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`\n  where email is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email", "file_key_name": "models.klaviyo__persons"}, "test.klaviyo.not_null_klaviyo__persons_email.072e38d07d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('klaviyo__persons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__persons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "not_null_klaviyo__persons_email"], "unique_id": "test.klaviyo.not_null_klaviyo__persons_email.072e38d07d", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_klaviyo__persons_email.sql", "original_file_path": "models/klaviyo.yml", "name": "not_null_klaviyo__persons_email", "alias": "not_null_klaviyo__persons_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__persons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/not_null_klaviyo__persons_email.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.2124438, "compiled_sql": "\n    \n    \n\n\n\nselect email\nfrom `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email", "file_key_name": "models.klaviyo__persons"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["person_id", "source_relation"], "model": "{{ get_where_subquery(ref('klaviyo__persons')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.klaviyo__persons"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329.sql", "original_file_path": "models/klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation", "alias": "dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["klaviyo__persons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/klaviyo.yml/dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f8f3a9d3aa76b62bb804805c73d99329"}, "created_at": 1665702405.2135391, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_klaviyo`.`klaviyo__persons`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.klaviyo__persons"}, "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('int_klaviyo__event_attribution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.int_klaviyo__event_attribution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "intermediate", "not_null_int_klaviyo__event_attribution_event_id"], "unique_id": "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_int_klaviyo__event_attribution_event_id.sql", "original_file_path": "models/intermediate/int_klaviyo.yml", "name": "not_null_int_klaviyo__event_attribution_event_id", "alias": "not_null_int_klaviyo__event_attribution_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_klaviyo__event_attribution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo.yml/not_null_int_klaviyo__event_attribution_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.222084, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__event_attribution`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.int_klaviyo__event_attribution"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_klaviyo__event_attribution')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.int_klaviyo__event_attribution"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "intermediate", "dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10.sql", "original_file_path": "models/intermediate/int_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation", "alias": "dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_klaviyo__event_attribution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo.yml/dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a0147e1bc143333a515d11c7f665da10"}, "created_at": 1665702405.223076, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__event_attribution`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.int_klaviyo__event_attribution"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["variation_id", "source_relation", "last_touch_campaign_id", "last_touch_flow_id"], "model": "{{ get_where_subquery(ref('int_klaviyo__campaign_flow_metrics')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.int_klaviyo__campaign_flow_metrics"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "intermediate", "dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61.sql", "original_file_path": "models/intermediate/int_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id", "alias": "dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_klaviyo__campaign_flow_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo.yml/dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e4603c9c1d4c74e9c4571eb9a11c5a61"}, "created_at": 1665702405.225645, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n    group by variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.int_klaviyo__campaign_flow_metrics"}, "test.klaviyo.not_null_int_klaviyo__person_metrics_person_id.2c0f4e5a67": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('int_klaviyo__person_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.int_klaviyo__person_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "intermediate", "not_null_int_klaviyo__person_metrics_person_id"], "unique_id": "test.klaviyo.not_null_int_klaviyo__person_metrics_person_id.2c0f4e5a67", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "not_null_int_klaviyo__person_metrics_person_id.sql", "original_file_path": "models/intermediate/int_klaviyo.yml", "name": "not_null_int_klaviyo__person_metrics_person_id", "alias": "not_null_int_klaviyo__person_metrics_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_klaviyo__person_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo.yml/not_null_int_klaviyo__person_metrics_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.22843, "compiled_sql": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__person_metrics`\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id", "file_key_name": "models.int_klaviyo__person_metrics"}, "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["person_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_klaviyo__person_metrics')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.klaviyo.int_klaviyo__person_metrics"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["klaviyo", "intermediate", "dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation"], "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b", "package_name": "klaviyo", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo", "path": "dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c.sql", "original_file_path": "models/intermediate/int_klaviyo.yml", "name": "dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation", "alias": "dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_klaviyo__person_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/klaviyo/models/intermediate/int_klaviyo.yml/dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_44a55e0600e791676842b0edee32af5c"}, "created_at": 1665702405.229526, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_int_klaviyo`.`int_klaviyo__person_metrics`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.int_klaviyo__person_metrics"}, "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_cohorts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_cohorts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "unique_shopify__customer_cohorts_customer_cohort_id"], "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "unique_shopify__customer_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "name": "unique_shopify__customer_cohorts_customer_cohort_id", "alias": "unique_shopify__customer_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__customer_cohorts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__customer_cohorts_customer_cohort_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.262696, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_cohort_id as unique_field\n  from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customer_cohorts`\n  where customer_cohort_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_cohorts"}, "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_cohorts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_cohorts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "not_null_shopify__customer_cohorts_customer_cohort_id"], "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "not_null_shopify__customer_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "name": "not_null_shopify__customer_cohorts_customer_cohort_id", "alias": "not_null_shopify__customer_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__customer_cohorts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__customer_cohorts_customer_cohort_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1665702405.263701, "compiled_sql": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customer_cohorts`\nwhere customer_cohort_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_cohorts"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__orders')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__orders"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce.sql", "original_file_path": "models/shopify.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation", "alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce"}, "created_at": 1665702405.264671, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__orders`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__orders"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__customers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696.sql", "original_file_path": "models/shopify.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation", "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696"}, "created_at": 1665702405.26724, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__customers`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__customers"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__products')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__products"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa.sql", "original_file_path": "models/shopify.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation", "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__products"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa"}, "created_at": 1665702405.26989, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__products`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__products"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__order_lines')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__order_lines"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40.sql", "original_file_path": "models/shopify.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation", "alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__order_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40"}, "created_at": 1665702405.272428, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__order_lines`\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__order_lines"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb.sql", "original_file_path": "models/shopify.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation", "alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb"}, "created_at": 1665702405.274965, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__transactions"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__customers__order_aggregates')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customers__order_aggregates"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation", "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__customers__order_aggregates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3"}, "created_at": 1665702405.278211, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__customers__order_aggregates", "sql": " __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify`.`shopify__transactions`\n    where lower(status) = 'success'\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__customers__order_aggregates"}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__orders__order_line_aggregates')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__orders__order_line_aggregates"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation"], "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "package_name": "shopify", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify", "path": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation", "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify__orders__order_line_aggregates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04"}, "created_at": 1665702405.2807748, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__shopify__orders__order_line_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_line_aggregates", "sql": " __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from `dbt-package-testing`.`linkedin_integration_tests_stg_shopify`.`stg_shopify__order_line`\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.shopify__orders__order_line_aggregates"}, "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "klaviyo_source_relation", "shopify_source_relation"], "model": "{{ get_where_subquery(ref('shopify_holistic_reporting__customer_enhanced')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_holistic_reporting", "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation"], "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc.sql", "original_file_path": "models/shopify_holistic_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation", "alias": "dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify_holistic_reporting__customer_enhanced"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting.yml/dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6d96dafa6cfb9bf7095ffd278a75adbc"}, "created_at": 1665702405.308287, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, klaviyo_source_relation, shopify_source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__customer_enhanced`\n    group by email, klaviyo_source_relation, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify_holistic_reporting__customer_enhanced"}, "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "email", "klaviyo_source_relation", "shopify_source_relation", "campaign_id", "flow_id", "variation_id"], "model": "{{ get_where_subquery(ref('shopify_holistic_reporting__daily_customer_metrics')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_holistic_reporting", "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id"], "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f.sql", "original_file_path": "models/shopify_holistic_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id", "alias": "dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify_holistic_reporting__daily_customer_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting.yml/dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4b14da03db00d67d51bb9e9f7e8b766f"}, "created_at": 1665702405.310959, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__daily_customer_metrics`\n    group by date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify_holistic_reporting__daily_customer_metrics"}, "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "shopify_source_relation"], "model": "{{ get_where_subquery(ref('shopify_holistic_reporting__orders_attribution')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests_dbt_test__audit", "fqn": ["shopify_holistic_reporting", "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation"], "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb", "package_name": "shopify_holistic_reporting", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_holistic_reporting", "path": "dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a.sql", "original_file_path": "models/shopify_holistic_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation", "alias": "dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["shopify_holistic_reporting__orders_attribution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/shopify_holistic_reporting/models/shopify_holistic_reporting.yml/dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ed10bd87338124f135be382dd44f7c6a"}, "created_at": 1665702405.3141189, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, shopify_source_relation\n    from `dbt-package-testing`.`linkedin_integration_tests_shopify_holistic`.`shopify_holistic_reporting__orders_attribution`\n    group by order_id, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.shopify_holistic_reporting__orders_attribution"}}, "sources": {"source.shopify_source.shopify.order": {"fqn": ["shopify_source", "shopify", "order"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.order", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "order", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "order", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "buyer_accepts_marketing": {"name": "buyer_accepts_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_at": {"name": "cancelled_at", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "The date and time when the order was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_at": {"name": "processed_at", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_method": {"name": "processing_method", "description": "How the payment was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxes_included": {"name": "taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test": {"name": "test", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`order`", "created_at": 1665702405.328304}, "source.shopify_source.shopify.customer": {"fqn": ["shopify_source", "shopify", "customer"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.customer", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "customer", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accepts_marketing": {"name": "accepts_marketing", "description": "Whether the customer has consented to receive marketing material via email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orders_count": {"name": "orders_count", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt": {"name": "tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spent": {"name": "total_spent", "description": "The total amount of money that the customer has spent across their order history.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verified_email": {"name": "verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`customer`", "created_at": 1665702405.328404}, "source.shopify_source.shopify.order_line": {"fqn": ["shopify_source", "shopify", "order_line"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.order_line", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "order_line", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "order_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a line item for an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_service": {"name": "fulfillment_service", "description": "The service provider that's fulfilling the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gift_card": {"name": "gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requires_shipping": {"name": "requires_shipping", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`order_line`", "created_at": 1665702405.3284879}, "source.shopify_source.shopify.order_line_refund": {"fqn": ["shopify_source", "shopify", "order_line_refund"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.order_line_refund", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "order_line_refund", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "order_line_refund", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a line item refund in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the line item in the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "TThe unique identifier of the location where the items will be restockedBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_line_id": {"name": "order_line_id", "description": "The ID of the related line item in the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the associated line item that was returned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The ID of the related refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "restock_type": {"name": "restock_type", "description": "How this refund line item affects inventory levels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Subtotal amount of the order line refund", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_tax": {"name": "total_tax", "description": "The total tax applied to the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`order_line_refund`", "created_at": 1665702405.328558}, "source.shopify_source.shopify.product": {"fqn": ["shopify_source", "shopify", "product"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.product", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "product", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a product in Shopify.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`product`", "created_at": 1665702405.32863}, "source.shopify_source.shopify.product_variant": {"fqn": ["shopify_source", "shopify", "product_variant"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.product_variant", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "product_variant", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "product_variant", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a product variant in Shopify", "columns": {"barcode": {"name": "barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compare_at_price": {"name": "compare_at_price", "description": "The original price of the item before an adjustment or a sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fulfillment_service": {"name": "fulfillment_service", "description": "The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grams": {"name": "grams", "description": "The weight of the product variant in grams.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique numeric identifier for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_id": {"name": "image_id", "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_management": {"name": "inventory_management", "description": "The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_policy": {"name": "inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_quantity": {"name": "inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_inventory_quantity": {"name": "old_inventory_quantity", "description": "This property is deprecated. Use the InventoryLevel resource instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_1": {"name": "option_1", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_2": {"name": "option_2", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "option_3": {"name": "option_3", "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "position": {"name": "position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The price of the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique numeric identifier for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requires_shipping": {"name": "requires_shipping", "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight": {"name": "weight", "description": "The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight_unit": {"name": "weight_unit", "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price set for the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index associated with the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pre_tax_price": {"name": "pre_tax_price", "description": "The total pre tax price of the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`product_variant`", "created_at": 1665702405.328717}, "source.shopify_source.shopify.transaction": {"fqn": ["shopify_source", "shopify", "transaction"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.transaction", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "transaction", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "transaction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a transaction in Shopify.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of money included in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorization": {"name": "authorization", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test": {"name": "test", "description": "Whether the transaction is a test transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`transaction`", "created_at": 1665702405.328804}, "source.shopify_source.shopify.refund": {"fqn": ["shopify_source", "shopify", "refund"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.refund", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "refund", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "refund", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a refund within Shopify.", "columns": {"id": {"name": "id", "description": "The unique numeric identifier for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_at": {"name": "processed_at", "description": "Timestamp of the date when the refund was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "User generated note attached to the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "restock": {"name": "restock", "description": "Boolean indicating if the refund is a result of a restock.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Reference to the user id which generated the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_duties_set": {"name": "total_duties_set", "description": "Record representing total duties set for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Reference to the order which the refund is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`refund`", "created_at": 1665702405.328871}, "source.shopify_source.shopify.order_adjustment": {"fqn": ["shopify_source", "shopify", "order_adjustment"], "database": "dbt-package-testing", "schema": "shopify", "unique_id": "source.shopify_source.shopify.order_adjustment", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "name": "order_adjustment", "source_name": "shopify", "source_description": "", "loader": "", "identifier": "order_adjustment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents and adjustment to and order within Shopify.", "columns": {"id": {"name": "id", "description": "The unique numeric identifier for the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Reference to the order which the adjustment is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "Reference to the refund which the adjustment is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "Tax amount applied to the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kind": {"name": "kind", "description": "The kind of order adjustment (eg. refund, restock, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "The reason for the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_set": {"name": "amount_set", "description": "Amount set towards the order adjustment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount_set": {"name": "tax_amount_set", "description": "Tax amount set towards the order adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`shopify`.`order_adjustment`", "created_at": 1665702405.328938}, "source.klaviyo_source.klaviyo.campaign": {"fqn": ["klaviyo_source", "klaviyo", "campaign"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.campaign", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "campaign", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "campaign", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing email campaigns in Klaviyo.  \n", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Type of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the campaign was created, in UTC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_template_id": {"name": "email_template_id", "description": "Foreign key referencing the ID of the `email_template` object that will be the  content of this campaign. Note the Email Template is copied when creating this campaign,  so future changes to that Email Template will not alter the content of this campaign.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address your email will be sent from and will be used in the reply-to header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_name": {"name": "from_name", "description": "The name or label associated with the email address you're sending from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_segmented": {"name": "is_segmented", "description": "Boolean that is true if the campaign is directed at a Klaviyo segment (not a list).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A name for this campaign. If not specified, this will default to the subject of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "send_time": {"name": "send_time", "description": "Timestamp of when the campaign is scheduled to be sent in the future, if  [\"smart send time\"](https://help.klaviyo.com/hc/en-us/articles/360029794371-Smart-Send-Time-in-Klaviyo#how-to-utilize-smart-send-time3) is used. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "Timestamp of when the campaign was first sent out to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the campaign. Either \"draft\", \"scheduled\", \"sent\", or \"cancelled\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Corresponding ID to the current status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_label": {"name": "status_label", "description": "The label of the status as it appears in the UI (should be the same as `status`).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the campaign's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the campaign was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`campaign`", "created_at": 1665702405.329047}, "source.klaviyo_source.klaviyo.event": {"fqn": ["klaviyo_source", "klaviyo", "event"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.event", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "event", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "event", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of events (and metrics) triggered in Klaviyo or via its integrations. Custom columns can be passed through to downstream models via the `klaviyo__event_pass_through_columns` variable  (see README for details).\n", "columns": {"_variation": {"name": "_variation", "description": "Unique ID of the attributed flow or campaign variation group.  This does not map onto another table. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key referencing the CAMPAIGN that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "datetime": {"name": "datetime", "description": "Timestamp of when the event was recorded in Klaviyo. Should be the same/nominally off from `timestamp`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of when the event was triggered. Should be the same/nominally off from `datetime`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_id": {"name": "flow_id", "description": "Foreign key referencing the FLOW that the event is attributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flow_message_id": {"name": "flow_message_id", "description": "Unique ID of the FLOW_MESSAGE that the event is attributed to.  This does not map onto another table.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_id": {"name": "metric_id", "description": "Foreign key referencing the metric being captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "Foreign key referencing the PERSON who triggered the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of event that was triggered. This is the same as the METRIC name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Universally Unique Identifier of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_value": {"name": "property_value", "description": "Numeric value associated with the event (ie the dollars associated with a purchase).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`event`", "created_at": 1665702405.329118}, "source.klaviyo_source.klaviyo.flow": {"fqn": ["klaviyo_source", "klaviyo", "flow"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.flow", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "flow", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "flow", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of automated, triggered flow sequences in Klaviyo.", "columns": {"created": {"name": "created", "description": "Timestamp of when the flow was first created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the flow. Either 'manual', 'live', or 'draft'. Read more [here](https://help.klaviyo.com/hc/en-us/articles/115002774932-Getting-Started-with-Flows#the-flow-action-status9).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger": {"name": "trigger", "description": "JSON of metric, segment, list, and/or date-property filters that will trigger this flow. These are applied to the **event level**.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the flow was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_filter": {"name": "customer_filter", "description": "JSON of flow filters placed on the **person level** that will trigger this flow.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`flow`", "created_at": 1665702405.3291829}, "source.klaviyo_source.klaviyo.integration": {"fqn": ["klaviyo_source", "klaviyo", "integration"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.integration", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "integration", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "integration", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing third-party platforms integrated into Klaviyo.", "columns": {"category": {"name": "category", "description": "Use-case category of the integrated platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the integration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the integrated platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`integration`", "created_at": 1665702405.3292449}, "source.klaviyo_source.klaviyo.person": {"fqn": ["klaviyo_source", "klaviyo", "person"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.person", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "person", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "person", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing the profiles of all people/users interacted with.  Custom columns can be passed through to downstream models via the `klaviyo__person_pass_through_columns` variable  (see README for details).\n", "columns": {"id": {"name": "id", "description": "Unique ID of the user if you use your own unique identifier. Otherwise, Klaviyo  recommends using the email as the primary key. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "First line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "Second line of the person's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "Postal code where they live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the person's profile was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address and the unique identifier for a profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Person's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Person's surname.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude of the person's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization": {"name": "organization", "description": "Business organization they belong to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Associated phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region or state they live in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone they are situated in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title at their business or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the person profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`person`", "created_at": 1665702405.329321}, "source.klaviyo_source.klaviyo.metric": {"fqn": ["klaviyo_source", "klaviyo", "metric"], "database": "dbt-package-testing", "schema": "klaviyo", "unique_id": "source.klaviyo_source.klaviyo.metric", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "models/src_klaviyo.yml", "original_file_path": "models/src_klaviyo.yml", "name": "metric", "source_name": "klaviyo", "source_description": "", "loader": "fivetran", "identifier": "metric", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of tracked metrics across integrations in Klaviyo.", "columns": {"created": {"name": "created", "description": "Timestamp of when the metric was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the metric being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "Foreign key referencing the INTEGRATION that the metric is being pulled from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the metric (same as `EVENT.type`)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the metric was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the campaign has been soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`klaviyo`.`metric`", "created_at": 1665702405.329383}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.909361}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.90958}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.909854}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.913013}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.918139}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9185011}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9188428}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9190972}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9197161}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.919947}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.920256}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.920379}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.920497}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.920676}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9208179}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9209611}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.921034}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.921201}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.921404}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9215791}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.921851}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.922005}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.922156}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.922542}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9229062}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9235468}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9237142}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.923991}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.924352}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9245062}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9251}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.925687}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.926333}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.928426}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9296389}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.931506}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.931944}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.933156}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9340029}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.936778}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9372191}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.937369}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.937495}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.937655}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.937929}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.938082}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.93832}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.938595}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9390268}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.939562}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.939779}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9399931}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9402199}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9404008}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9409869}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9412138}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.941869}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9421709}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.942407}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9434829}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.943676}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.943815}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9439511}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.944085}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9444869}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.944778}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9450722}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.945535}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.945803}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9490361}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.949198}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.949406}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.949543}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9496388}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.950392}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.950551}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.950716}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9520729}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.953326}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.956888}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.957165}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9573278}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.957411}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.957549}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.95766}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.957856}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.958703}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9588869}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9591382}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.959562}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.965253}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9672582}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.967747}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9680462}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.968451}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.968821}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.969634}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.970164}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.970756}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.97548}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.976922}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.977211}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.977945}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.978205}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.978822}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9794931}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.983765}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9880378}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.989227}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9903932}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9910872}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9935648}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.994028}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9942122}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.994411}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9948108}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.997277}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9976199}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.997838}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.99933}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9997282}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702403.9998841}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0000598}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.000316}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.003476}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.007811}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.008683}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.008914}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.009386}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.009571}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.009696}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.009828}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.009941}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.010098}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.010207}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.010667}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.010848}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.012079}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0125031}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0127192}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.013262}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0135128}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.013789}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.014216}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.014461}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.014854}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.015198}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0154922}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.01608}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0171788}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0177422}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.018028}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0197399}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0210319}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.021779}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.022006}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.022309}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0223832}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0227609}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.022919}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.023221}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.023349}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0236568}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.023763}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.024153}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.024323}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0246148}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.024699}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.025098}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.025249}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0256362}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.025771}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0264351}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.026918}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0273302}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.027488}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.027841}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.027982}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.028291}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.028447}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.028747}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.028905}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.029204}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0293062}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.029641}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0297742}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.030067}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.030164}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031015}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031165}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031323}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031468}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031683}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031831}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.031988}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.032161}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0323179}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.032467}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.032625}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.032762}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.033067}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0331662}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.033548}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.03381}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.033953}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.034496}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.034655}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.034873}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0351958}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0353239}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.03573}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.035907}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.036076}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.036318}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0368059}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0369349}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.03709}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.037484}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.040443}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.040608}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.040822}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.041109}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.04135}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0416598}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.041837}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.042043}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.042221}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.042378}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0425768}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.042846}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.043089}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.043823}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0440478}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.044186}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.044379}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.044875}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.045015}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0452359}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.045644}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.047235}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.047343}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.047507}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.047611}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.047947}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.048131}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.048231}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.048455}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.048639}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.048861}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.049048}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.049272}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.049998}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.050184}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.050425}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0506508}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.051757}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.052445}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.052609}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.05281}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.05297}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0532322}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.053712}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0551}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.055352}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.055535}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.055682}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.05586}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0560992}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.056306}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.056608}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.056788}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.056941}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.058536}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.058757}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.059065}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.059244}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.059575}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0598001}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.060398}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.060653}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.061413}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.061954}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.062189}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.062468}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0627358}, "macro.shopify_source.get_order_columns": {"unique_id": "macro.shopify_source.get_order_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_order_columns", "macro_sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_id\"},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_discounts\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_line_items_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtotal_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"taxes_included\", \"datatype\": \"boolean\", \"alias\": \"has_taxes_included\"},\n    {\"name\": \"total_weight\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"landing_site_base_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cancelled_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"cancelled_timestamp\"},\n    {\"name\": \"cart_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"checkout_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"closed_timestamp\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"financial_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"processing_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"referring_site\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"browser_ip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"buyer_accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_buyer_accepted_marketing\"},\n    {\"name\": \"total_shipping_price_set\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"test\", \"datatype\": \"boolean\", \"alias\": \"is_test_order\"},\n    {\"name\": \"token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0776498}, "macro.shopify_source.get_customer_columns": {"unique_id": "macro.shopify_source.get_customer_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_accepted_marketing\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"default_address_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"customer_id\"},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"orders_count\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_state\"},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\", \"alias\": \"is_tax_exempt\"},\n    {\"name\": \"total_spent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"verified_email\", \"datatype\": \"boolean\", \"alias\": \"is_verified_email\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0793228}, "macro.shopify_source.get_order_line_refund_columns": {"unique_id": "macro.shopify_source.get_order_line_refund_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_order_line_refund_columns", "macro_sql": "{% macro get_order_line_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_refund_id\"},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"restock_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.080263}, "macro.shopify_source.get_order_line_columns": {"unique_id": "macro.shopify_source.get_order_line_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_order_line_columns", "macro_sql": "{% macro get_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fulfillable_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"gift_card\", \"datatype\": \"boolean\", \"alias\": \"is_gift_card\"},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_id\"},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pre_tax_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_charge_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_for_shipping_jan_3_rd_2020\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_shipping_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_shipping_interval_unit_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_subscription_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_discount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"variant_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.082616}, "macro.shopify_source.get_product_columns": {"unique_id": "macro.shopify_source.get_product_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_product_columns", "macro_sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"handle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"product_id\"},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"published_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"published_timestamp\"},\n    {\"name\": \"published_scope\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0837839}, "macro.shopify_source.get_product_variant_columns": {"unique_id": "macro.shopify_source.get_product_variant_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_product_variant_columns", "macro_sql": "{% macro get_product_variant_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"variant_id\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"image_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"position\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_policy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"compare_at_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"inventory_management\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"barcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"weight\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"old_inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.08626}, "macro.shopify_source.get_transaction_columns": {"unique_id": "macro.shopify_source.get_transaction_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_transaction_columns", "macro_sql": "{% macro get_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"transaction_id\"},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"device_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"gateway\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"payment_avs_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_bin\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_cvv_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_exchange_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_adjustment\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_original_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_final_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"test\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{% if target.type in ('redshift','postgres') %}\n {{ columns.append({\"name\": \"authorization\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"authorization\"}) }}\n{% else %}\n {\"name\": \"authorization\", \"datatype\": dbt_utils.type_string()}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.089289}, "macro.shopify_source.get_refund_columns": {"unique_id": "macro.shopify_source.get_refund_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"refund_id\"},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"restock\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0901299}, "macro.shopify_source.get_order_adjustment_columns": {"unique_id": "macro.shopify_source.get_order_adjustment_columns", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_order_adjustment_columns", "macro_sql": "{% macro get_order_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\":  dbt_utils.type_numeric(), \"alias\": \"order_adjustment_id\"},\n    {\"name\": \"order_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.09098}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.091292}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.091362}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.09143}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0918121}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.091969}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.092271}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.092393}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093077}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093149}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093216}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093281}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093348}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093502}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093575}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093643}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093709}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093864}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.093935}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094214}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094285}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.09435}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0945039}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094572}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094638}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0947928}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094861}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.094927}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0954182}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0958579}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.095995}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.096292}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.096431}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.09653}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.09687}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.096973}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0970712}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0976489}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.097814}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.097968}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.098119}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.098378}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.098676}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.098749}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.098818}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.099189}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.099326}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0994601}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.0996008}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.100168}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.100298}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.100451}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.100598}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.10275}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1031392}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.103408}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.103785}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1047602}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1072068}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.107363}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.107519}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.10918}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.109378}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.109785}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.109921}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.110042}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.110164}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.110501}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.110637}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.110762}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.11111}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.111243}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1113658}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.111866}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.111968}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.112072}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.112401}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.11256}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.112664}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.113064}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1131961}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.113329}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.113625}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.113722}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1142871}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.114398}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.114464}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.114532}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1146848}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.114797}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.114935}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.115038}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1151612}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.116535}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1169841}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1175091}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.117701}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.118111}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.118241}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1183648}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.118486}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1188538}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.118954}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1190479}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.119145}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1197262}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.119989}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1201332}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.120516}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1206882}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.122088}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.122249}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.122462}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.122786}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1232798}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.12363}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.12401}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.124133}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.124257}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.124801}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.125037}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.125178}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.125312}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.125442}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.126288}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.126691}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.126817}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.126997}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.12718}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.13262}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.133128}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.133443}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.133992}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1389189}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.13935}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1398242}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.140331}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1409678}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.141332}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.141649}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.142209}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.142433}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1428611}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.143156}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.143828}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.144159}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1445959}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.144922}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1452868}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.145453}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.146076}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1465988}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.147171}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.147543}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.147991}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.148155}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.148524}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1486988}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1493309}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1499588}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.150538}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.150879}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.151375}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1516612}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.15212}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.152626}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.153302}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.153961}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.154412}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.154578}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1553311}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.156201}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1591291}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.160574}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.160898}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1610591}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.161382}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1615748}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.161881}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.162051}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.162557}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.163263}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.163847}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.164073}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.164423}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.164783}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1651871}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1658711}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.166715}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.167536}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1679392}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.168125}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.168632}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.169319}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1701498}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.170604}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1708832}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.171585}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.172551}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1742249}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1762612}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.178715}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.181657}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.182005}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.18225}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1845949}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.184814}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.185013}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.185193}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1853518}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.185516}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1861172}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.18703}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.187449}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.187721}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.188092}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.188421}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.189873}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.190141}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.190898}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.191396}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.192481}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.193965}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.195022}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1958542}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.196356}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1970692}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1974971}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.198076}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.198563}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1986449}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.198723}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.1987998}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.199808}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.200085}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.200638}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2014878}, "macro.klaviyo_source.get_campaign_columns": {"unique_id": "macro.klaviyo_source.get_campaign_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_campaign_columns.sql", "original_file_path": "macros/get_campaign_columns.sql", "name": "get_campaign_columns", "macro_sql": "{% macro get_campaign_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email_template_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_segmented\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"send_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"sent_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status_label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.203381}, "macro.klaviyo_source.get_metric_columns": {"unique_id": "macro.klaviyo_source.get_metric_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_metric_columns.sql", "original_file_path": "macros/get_metric_columns.sql", "name": "get_metric_columns", "macro_sql": "{% macro get_metric_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"integration_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.204294}, "macro.klaviyo_source.get_flow_columns": {"unique_id": "macro.klaviyo_source.get_flow_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_flow_columns.sql", "original_file_path": "macros/get_flow_columns.sql", "name": "get_flow_columns", "macro_sql": "{% macro get_flow_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"trigger\", \"datatype\": dbt_utils.type_string(), \"quote\": True},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_filter\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.205426}, "macro.klaviyo_source.get_integration_columns": {"unique_id": "macro.klaviyo_source.get_integration_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_integration_columns.sql", "original_file_path": "macros/get_integration_columns.sql", "name": "get_integration_columns", "macro_sql": "{% macro get_integration_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.206135}, "macro.klaviyo_source.get_person_columns": {"unique_id": "macro.klaviyo_source.get_person_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_person_columns.sql", "original_file_path": "macros/get_person_columns.sql", "name": "get_person_columns", "macro_sql": "{% macro get_person_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"latitude\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"longitude\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"organization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"region\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"zip\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('klaviyo__person_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2084239}, "macro.klaviyo_source.get_event_columns": {"unique_id": "macro.klaviyo_source.get_event_columns", "package_name": "klaviyo_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/klaviyo_source", "path": "macros/get_event_columns.sql", "original_file_path": "macros/get_event_columns.sql", "name": "get_event_columns", "macro_sql": "{% macro get_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_variation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"datetime\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"flow_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"flow_message_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metric_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"person_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('klaviyo__event_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.210104}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.214804}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.215504}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.216375}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2171562}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.217877}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.218766}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.219004}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.219164}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.221855}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.22875}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.228941}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.229012}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.229606}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.231161}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.231494}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.231766}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.232037}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.232404}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2326028}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2328582}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.233296}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234198}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234356}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234516}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234676}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234815}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.234968}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.235438}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.236274}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.237317}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.237563}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.237807}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.238039}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.238268}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.238527}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.238786}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2391481}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2392461}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.239341}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.239438}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2398531}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.240463}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2411}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2415948}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2417228}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.241846}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.241975}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2421079}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.244826}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.244988}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.245141}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.245292}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2469609}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.247791}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.247927}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.248193}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.24847}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.248598}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.248718}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.248839}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.249349}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2499158}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.25044}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.250637}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.250858}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2511628}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.252075}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.255859}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.256213}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2566369}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.258143}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.25868}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.259259}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.259412}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.259562}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.259726}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.259874}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.260025}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.26073}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.261682}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.262378}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.262537}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.26269}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2628422}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2629938}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.263165}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.263461}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2636192}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2637172}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.264388}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2655842}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.267287}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.268695}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2690089}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.2691069}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.269207}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.269645}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665702404.270079}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "shopify_source._fivetran_synced": {"unique_id": "shopify_source._fivetran_synced", "package_name": "shopify_source", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests/dbt_packages/shopify_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "The time when a record was last updated by Fivetran."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"seed.shopify_holistic_reporting_integration_tests.flow_snowflake": [{"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "linkedin_integration_tests", "fqn": ["shopify_holistic_reporting_integration_tests", "flow_snowflake"], "unique_id": "seed.shopify_holistic_reporting_integration_tests.flow_snowflake", "package_name": "shopify_holistic_reporting_integration_tests", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/dbt_shopify_holistic_reporting/integration_tests", "path": "flow_snowflake.csv", "original_file_path": "seeds/flow_snowflake.csv", "name": "flow_snowflake", "alias": "flow_snowflake", "checksum": {"name": "sha256", "checksum": "6bdc1fd92ee1a5bd818f2c9dc35cb33e0b4549d4d0b325569e0518843ce02711"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}, "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1665702404.5314429, "config_call_dict": {}}]}, "parent_map": {"seed.shopify_holistic_reporting_integration_tests.shopify_order_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_refund_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data": [], "seed.shopify_holistic_reporting_integration_tests.flow": [], "seed.shopify_holistic_reporting_integration_tests.shopify_product_data": [], "seed.shopify_holistic_reporting_integration_tests.integration": [], "seed.shopify_holistic_reporting_integration_tests.metric": [], "seed.shopify_holistic_reporting_integration_tests.person": [], "seed.shopify_holistic_reporting_integration_tests.event": [], "seed.shopify_holistic_reporting_integration_tests.shopify_customer_data": [], "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data": [], "seed.shopify_holistic_reporting_integration_tests.campaign": [], "model.shopify_source.stg_shopify__order_line": ["model.shopify_source.stg_shopify__order_line_tmp", "model.shopify_source.stg_shopify__order_line_tmp"], "model.shopify_source.stg_shopify__refund": ["model.shopify_source.stg_shopify__refund_tmp", "model.shopify_source.stg_shopify__refund_tmp"], "model.shopify_source.stg_shopify__product": ["model.shopify_source.stg_shopify__product_tmp", "model.shopify_source.stg_shopify__product_tmp"], "model.shopify_source.stg_shopify__product_variant": ["model.shopify_source.stg_shopify__product_variant_tmp", "model.shopify_source.stg_shopify__product_variant_tmp"], "model.shopify_source.stg_shopify__order": ["model.shopify_source.stg_shopify__order_tmp", "model.shopify_source.stg_shopify__order_tmp"], "model.shopify_source.stg_shopify__transaction": ["model.shopify_source.stg_shopify__transaction_tmp", "model.shopify_source.stg_shopify__transaction_tmp"], "model.shopify_source.stg_shopify__order_adjustment": ["model.shopify_source.stg_shopify__order_adjustment_tmp", "model.shopify_source.stg_shopify__order_adjustment_tmp"], "model.shopify_source.stg_shopify__customer": ["model.shopify_source.stg_shopify__customer_tmp", "model.shopify_source.stg_shopify__customer_tmp"], "model.shopify_source.stg_shopify__order_line_refund": ["model.shopify_source.stg_shopify__order_line_refund_tmp", "model.shopify_source.stg_shopify__order_line_refund_tmp"], "model.shopify_source.stg_shopify__customer_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_customer_data"], "model.shopify_source.stg_shopify__order_line_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data"], "model.shopify_source.stg_shopify__refund_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_refund_data"], "model.shopify_source.stg_shopify__product_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_product_data"], "model.shopify_source.stg_shopify__order_adjustment_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data"], "model.shopify_source.stg_shopify__order_line_refund_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data"], "model.shopify_source.stg_shopify__transaction_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data"], "model.shopify_source.stg_shopify__product_variant_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data"], "model.shopify_source.stg_shopify__order_tmp": ["seed.shopify_holistic_reporting_integration_tests.shopify_order_data"], "model.klaviyo_source.stg_klaviyo__person": ["model.klaviyo_source.stg_klaviyo__person_tmp", "model.klaviyo_source.stg_klaviyo__person_tmp"], "model.klaviyo_source.stg_klaviyo__campaign": ["model.klaviyo_source.stg_klaviyo__campaign_tmp", "model.klaviyo_source.stg_klaviyo__campaign_tmp"], "model.klaviyo_source.stg_klaviyo__metric": ["model.klaviyo_source.stg_klaviyo__metric_tmp", "model.klaviyo_source.stg_klaviyo__metric_tmp"], "model.klaviyo_source.stg_klaviyo__integration": ["model.klaviyo_source.stg_klaviyo__integration_tmp", "model.klaviyo_source.stg_klaviyo__integration_tmp"], "model.klaviyo_source.stg_klaviyo__flow": ["model.klaviyo_source.stg_klaviyo__flow_tmp", "model.klaviyo_source.stg_klaviyo__flow_tmp"], "model.klaviyo_source.stg_klaviyo__event": ["model.klaviyo_source.stg_klaviyo__event_tmp", "model.klaviyo_source.stg_klaviyo__event_tmp"], "model.klaviyo_source.stg_klaviyo__event_tmp": ["seed.shopify_holistic_reporting_integration_tests.event"], "model.klaviyo_source.stg_klaviyo__metric_tmp": ["seed.shopify_holistic_reporting_integration_tests.metric"], "model.klaviyo_source.stg_klaviyo__campaign_tmp": ["seed.shopify_holistic_reporting_integration_tests.campaign"], "model.klaviyo_source.stg_klaviyo__integration_tmp": ["seed.shopify_holistic_reporting_integration_tests.integration"], "model.klaviyo_source.stg_klaviyo__flow_tmp": ["seed.shopify_holistic_reporting_integration_tests.flow"], "model.klaviyo_source.stg_klaviyo__person_tmp": ["seed.shopify_holistic_reporting_integration_tests.person"], "model.klaviyo.klaviyo__person_campaign_flow": ["model.klaviyo.klaviyo__events"], "model.klaviyo.klaviyo__persons": ["model.klaviyo.int_klaviyo__person_metrics", "model.klaviyo.int_klaviyo__person_metrics", "model.klaviyo_source.stg_klaviyo__person"], "model.klaviyo.klaviyo__flows": ["model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo_source.stg_klaviyo__flow"], "model.klaviyo.klaviyo__campaigns": ["model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo_source.stg_klaviyo__campaign"], "model.klaviyo.klaviyo__events": ["model.klaviyo.int_klaviyo__event_attribution", "model.klaviyo.int_klaviyo__event_attribution", "model.klaviyo_source.stg_klaviyo__campaign", "model.klaviyo_source.stg_klaviyo__flow", "model.klaviyo_source.stg_klaviyo__integration", "model.klaviyo_source.stg_klaviyo__metric", "model.klaviyo_source.stg_klaviyo__person"], "model.klaviyo.int_klaviyo__campaign_flow_metrics": ["model.klaviyo.klaviyo__person_campaign_flow", "model.klaviyo.klaviyo__person_campaign_flow"], "model.klaviyo.int_klaviyo__person_metrics": ["model.klaviyo.klaviyo__person_campaign_flow", "model.klaviyo.klaviyo__person_campaign_flow"], "model.klaviyo.int_klaviyo__event_attribution": ["model.klaviyo_source.stg_klaviyo__event"], "model.shopify.shopify__customer_cohorts": ["model.shopify.shopify__calendar", "model.shopify.shopify__customers", "model.shopify.shopify__orders"], "model.shopify.shopify__orders": ["model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__order_adjustment"], "model.shopify.shopify__products": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders", "model.shopify_source.stg_shopify__product"], "model.shopify.shopify__transactions": ["model.shopify_source.stg_shopify__transaction"], "model.shopify.shopify__customers": ["model.shopify.shopify__customers__order_aggregates", "model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer"], "model.shopify.shopify__order_lines": ["model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__product_variant"], "model.shopify.shopify__calendar": [], "model.shopify.shopify__orders__order_line_aggregates": ["model.shopify_source.stg_shopify__order_line"], "model.shopify.shopify__customers__order_aggregates": ["model.shopify.shopify__transactions", "model.shopify_source.stg_shopify__order"], "model.shopify.shopify__orders__order_refunds": ["model.shopify_source.stg_shopify__order_line_refund", "model.shopify_source.stg_shopify__refund"], "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced": ["model.shopify_holistic_reporting.int__klaviyo_person_rollup", "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "model.shopify_holistic_reporting.int__shopify_customer_rollup", "model.shopify_holistic_reporting.int__shopify_customer_rollup"], "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution": ["model.klaviyo.klaviyo__events", "model.shopify.shopify__orders", "model.shopify.shopify__orders"], "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics": ["model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "model.shopify_holistic_reporting.int__daily_shopify_customer_orders"], "model.shopify_holistic_reporting.int__daily_shopify_customer_orders": ["model.shopify.shopify__order_lines", "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution"], "model.shopify_holistic_reporting.int__shopify_customer_rollup": ["model.shopify.shopify__customers", "model.shopify.shopify__customers"], "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics": ["model.klaviyo.klaviyo__events"], "model.shopify_holistic_reporting.int__klaviyo_person_rollup": ["model.klaviyo.klaviyo__persons", "model.klaviyo.klaviyo__persons"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": ["model.shopify_source.stg_shopify__customer"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": ["model.shopify_source.stg_shopify__order_line_refund"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": ["model.shopify_source.stg_shopify__order_line"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": ["model.shopify_source.stg_shopify__order"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": ["model.shopify_source.stg_shopify__product"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": ["model.shopify_source.stg_shopify__product_variant"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": ["model.shopify_source.stg_shopify__transaction"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": ["model.shopify_source.stg_shopify__refund"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": ["model.shopify_source.stg_shopify__order_adjustment"], "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d": ["model.klaviyo_source.stg_klaviyo__campaign"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff": ["model.klaviyo_source.stg_klaviyo__campaign"], "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1": ["model.klaviyo_source.stg_klaviyo__event"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7": ["model.klaviyo_source.stg_klaviyo__event"], "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42": ["model.klaviyo_source.stg_klaviyo__flow"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481": ["model.klaviyo_source.stg_klaviyo__flow"], "test.klaviyo_source.not_null_stg_klaviyo__integration_integration_id.fe572c5f1b": ["model.klaviyo_source.stg_klaviyo__integration"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation.be6158ad21": ["model.klaviyo_source.stg_klaviyo__integration"], "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa": ["model.klaviyo_source.stg_klaviyo__person"], "test.klaviyo_source.unique_stg_klaviyo__person_email.dc3a98b014": ["model.klaviyo_source.stg_klaviyo__person"], "test.klaviyo_source.not_null_stg_klaviyo__person_email.c7094cfe27": ["model.klaviyo_source.stg_klaviyo__person"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24": ["model.klaviyo_source.stg_klaviyo__person"], "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078": ["model.klaviyo_source.stg_klaviyo__metric"], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5": ["model.klaviyo_source.stg_klaviyo__metric"], "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba": ["model.klaviyo.klaviyo__events"], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174": ["model.klaviyo.klaviyo__events"], "test.klaviyo.not_null_klaviyo__person_campaign_flow_person_id.e27d13b0f2": ["model.klaviyo.klaviyo__person_campaign_flow"], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079": ["model.klaviyo.klaviyo__person_campaign_flow"], "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc": ["model.klaviyo.klaviyo__campaigns"], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28": ["model.klaviyo.klaviyo__campaigns"], "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b": ["model.klaviyo.klaviyo__flows"], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc": ["model.klaviyo.klaviyo__flows"], "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a": ["model.klaviyo.klaviyo__persons"], "test.klaviyo.unique_klaviyo__persons_email.a330194dd6": ["model.klaviyo.klaviyo__persons"], "test.klaviyo.not_null_klaviyo__persons_email.072e38d07d": ["model.klaviyo.klaviyo__persons"], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3": ["model.klaviyo.klaviyo__persons"], "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4": ["model.klaviyo.int_klaviyo__event_attribution"], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c": ["model.klaviyo.int_klaviyo__event_attribution"], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81": ["model.klaviyo.int_klaviyo__campaign_flow_metrics"], "test.klaviyo.not_null_int_klaviyo__person_metrics_person_id.2c0f4e5a67": ["model.klaviyo.int_klaviyo__person_metrics"], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b": ["model.klaviyo.int_klaviyo__person_metrics"], "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": ["model.shopify.shopify__customer_cohorts"], "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": ["model.shopify.shopify__customer_cohorts"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d": ["model.shopify.shopify__orders"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": ["model.shopify.shopify__customers"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": ["model.shopify.shopify__products"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95": ["model.shopify.shopify__order_lines"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0": ["model.shopify.shopify__transactions"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": ["model.shopify.shopify__customers__order_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": ["model.shopify.shopify__orders__order_line_aggregates"], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109": ["model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced"], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd": ["model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics"], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb": ["model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution"], "source.shopify_source.shopify.order": [], "source.shopify_source.shopify.customer": [], "source.shopify_source.shopify.order_line": [], "source.shopify_source.shopify.order_line_refund": [], "source.shopify_source.shopify.product": [], "source.shopify_source.shopify.product_variant": [], "source.shopify_source.shopify.transaction": [], "source.shopify_source.shopify.refund": [], "source.shopify_source.shopify.order_adjustment": [], "source.klaviyo_source.klaviyo.campaign": [], "source.klaviyo_source.klaviyo.event": [], "source.klaviyo_source.klaviyo.flow": [], "source.klaviyo_source.klaviyo.integration": [], "source.klaviyo_source.klaviyo.person": [], "source.klaviyo_source.klaviyo.metric": []}, "child_map": {"seed.shopify_holistic_reporting_integration_tests.shopify_order_data": ["model.shopify_source.stg_shopify__order_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_refund_data": ["model.shopify_source.stg_shopify__order_line_refund_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_order_adjustment_data": ["model.shopify_source.stg_shopify__order_adjustment_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_product_variant_data": ["model.shopify_source.stg_shopify__product_variant_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_refund_data": ["model.shopify_source.stg_shopify__refund_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_transaction_data": ["model.shopify_source.stg_shopify__transaction_tmp"], "seed.shopify_holistic_reporting_integration_tests.flow": ["model.klaviyo_source.stg_klaviyo__flow_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_product_data": ["model.shopify_source.stg_shopify__product_tmp"], "seed.shopify_holistic_reporting_integration_tests.integration": ["model.klaviyo_source.stg_klaviyo__integration_tmp"], "seed.shopify_holistic_reporting_integration_tests.metric": ["model.klaviyo_source.stg_klaviyo__metric_tmp"], "seed.shopify_holistic_reporting_integration_tests.person": ["model.klaviyo_source.stg_klaviyo__person_tmp"], "seed.shopify_holistic_reporting_integration_tests.event": ["model.klaviyo_source.stg_klaviyo__event_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_customer_data": ["model.shopify_source.stg_shopify__customer_tmp"], "seed.shopify_holistic_reporting_integration_tests.shopify_order_line_data": ["model.shopify_source.stg_shopify__order_line_tmp"], "seed.shopify_holistic_reporting_integration_tests.campaign": ["model.klaviyo_source.stg_klaviyo__campaign_tmp"], "model.shopify_source.stg_shopify__order_line": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders__order_line_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c"], "model.shopify_source.stg_shopify__refund": ["model.shopify.shopify__orders__order_refunds", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35"], "model.shopify_source.stg_shopify__product": ["model.shopify.shopify__products", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2"], "model.shopify_source.stg_shopify__product_variant": ["model.shopify.shopify__order_lines", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0"], "model.shopify_source.stg_shopify__order": ["model.shopify.shopify__customers__order_aggregates", "model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1"], "model.shopify_source.stg_shopify__transaction": ["model.shopify.shopify__transactions", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a"], "model.shopify_source.stg_shopify__order_adjustment": ["model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0"], "model.shopify_source.stg_shopify__customer": ["model.shopify.shopify__customers", "model.shopify.shopify__customers", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25"], "model.shopify_source.stg_shopify__order_line_refund": ["model.shopify.shopify__orders__order_refunds", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29"], "model.shopify_source.stg_shopify__customer_tmp": ["model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer"], "model.shopify_source.stg_shopify__order_line_tmp": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__order_line"], "model.shopify_source.stg_shopify__refund_tmp": ["model.shopify_source.stg_shopify__refund", "model.shopify_source.stg_shopify__refund"], "model.shopify_source.stg_shopify__product_tmp": ["model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__product"], "model.shopify_source.stg_shopify__order_adjustment_tmp": ["model.shopify_source.stg_shopify__order_adjustment", "model.shopify_source.stg_shopify__order_adjustment"], "model.shopify_source.stg_shopify__order_line_refund_tmp": ["model.shopify_source.stg_shopify__order_line_refund", "model.shopify_source.stg_shopify__order_line_refund"], "model.shopify_source.stg_shopify__transaction_tmp": ["model.shopify_source.stg_shopify__transaction", "model.shopify_source.stg_shopify__transaction"], "model.shopify_source.stg_shopify__product_variant_tmp": ["model.shopify_source.stg_shopify__product_variant", "model.shopify_source.stg_shopify__product_variant"], "model.shopify_source.stg_shopify__order_tmp": ["model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__order"], "model.klaviyo_source.stg_klaviyo__person": ["model.klaviyo.klaviyo__events", "model.klaviyo.klaviyo__persons", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24", "test.klaviyo_source.not_null_stg_klaviyo__person_email.c7094cfe27", "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa", "test.klaviyo_source.unique_stg_klaviyo__person_email.dc3a98b014"], "model.klaviyo_source.stg_klaviyo__campaign": ["model.klaviyo.klaviyo__campaigns", "model.klaviyo.klaviyo__events", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff", "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d"], "model.klaviyo_source.stg_klaviyo__metric": ["model.klaviyo.klaviyo__events", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5", "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078"], "model.klaviyo_source.stg_klaviyo__integration": ["model.klaviyo.klaviyo__events", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation.be6158ad21", "test.klaviyo_source.not_null_stg_klaviyo__integration_integration_id.fe572c5f1b"], "model.klaviyo_source.stg_klaviyo__flow": ["model.klaviyo.klaviyo__events", "model.klaviyo.klaviyo__flows", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481", "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42"], "model.klaviyo_source.stg_klaviyo__event": ["model.klaviyo.int_klaviyo__event_attribution", "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7", "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1"], "model.klaviyo_source.stg_klaviyo__event_tmp": ["model.klaviyo_source.stg_klaviyo__event", "model.klaviyo_source.stg_klaviyo__event"], "model.klaviyo_source.stg_klaviyo__metric_tmp": ["model.klaviyo_source.stg_klaviyo__metric", "model.klaviyo_source.stg_klaviyo__metric"], "model.klaviyo_source.stg_klaviyo__campaign_tmp": ["model.klaviyo_source.stg_klaviyo__campaign", "model.klaviyo_source.stg_klaviyo__campaign"], "model.klaviyo_source.stg_klaviyo__integration_tmp": ["model.klaviyo_source.stg_klaviyo__integration", "model.klaviyo_source.stg_klaviyo__integration"], "model.klaviyo_source.stg_klaviyo__flow_tmp": ["model.klaviyo_source.stg_klaviyo__flow", "model.klaviyo_source.stg_klaviyo__flow"], "model.klaviyo_source.stg_klaviyo__person_tmp": ["model.klaviyo_source.stg_klaviyo__person", "model.klaviyo_source.stg_klaviyo__person"], "model.klaviyo.klaviyo__person_campaign_flow": ["model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__campaign_flow_metrics", "model.klaviyo.int_klaviyo__person_metrics", "model.klaviyo.int_klaviyo__person_metrics", "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079", "test.klaviyo.not_null_klaviyo__person_campaign_flow_person_id.e27d13b0f2"], "model.klaviyo.klaviyo__persons": ["model.shopify_holistic_reporting.int__klaviyo_person_rollup", "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3", "test.klaviyo.not_null_klaviyo__persons_email.072e38d07d", "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a", "test.klaviyo.unique_klaviyo__persons_email.a330194dd6"], "model.klaviyo.klaviyo__flows": ["test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc", "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b"], "model.klaviyo.klaviyo__campaigns": ["test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28", "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc"], "model.klaviyo.klaviyo__events": ["model.klaviyo.klaviyo__person_campaign_flow", "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174", "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba"], "model.klaviyo.int_klaviyo__campaign_flow_metrics": ["model.klaviyo.klaviyo__campaigns", "model.klaviyo.klaviyo__campaigns", "model.klaviyo.klaviyo__flows", "model.klaviyo.klaviyo__flows", "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81"], "model.klaviyo.int_klaviyo__person_metrics": ["model.klaviyo.klaviyo__persons", "model.klaviyo.klaviyo__persons", "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b", "test.klaviyo.not_null_int_klaviyo__person_metrics_person_id.2c0f4e5a67"], "model.klaviyo.int_klaviyo__event_attribution": ["model.klaviyo.klaviyo__events", "model.klaviyo.klaviyo__events", "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c", "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4"], "model.shopify.shopify__customer_cohorts": ["test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a"], "model.shopify.shopify__orders": ["model.shopify.shopify__customer_cohorts", "model.shopify.shopify__products", "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d"], "model.shopify.shopify__products": ["test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a"], "model.shopify.shopify__transactions": ["model.shopify.shopify__customers__order_aggregates", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0"], "model.shopify.shopify__customers": ["model.shopify.shopify__customer_cohorts", "model.shopify_holistic_reporting.int__shopify_customer_rollup", "model.shopify_holistic_reporting.int__shopify_customer_rollup", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469"], "model.shopify.shopify__order_lines": ["model.shopify.shopify__products", "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95"], "model.shopify.shopify__calendar": ["model.shopify.shopify__customer_cohorts"], "model.shopify.shopify__orders__order_line_aggregates": ["model.shopify.shopify__orders", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473"], "model.shopify.shopify__customers__order_aggregates": ["model.shopify.shopify__customers", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9"], "model.shopify.shopify__orders__order_refunds": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders"], "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced": ["test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109"], "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution": ["model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb"], "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics": ["test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd"], "model.shopify_holistic_reporting.int__daily_shopify_customer_orders": ["model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics", "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics"], "model.shopify_holistic_reporting.int__shopify_customer_rollup": ["model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced", "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced"], "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics": ["model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics", "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics"], "model.shopify_holistic_reporting.int__klaviyo_person_rollup": ["model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced", "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": [], "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff": [], "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7": [], "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481": [], "test.klaviyo_source.not_null_stg_klaviyo__integration_integration_id.fe572c5f1b": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__integration_integration_id__source_relation.be6158ad21": [], "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa": [], "test.klaviyo_source.unique_stg_klaviyo__person_email.dc3a98b014": [], "test.klaviyo_source.not_null_stg_klaviyo__person_email.c7094cfe27": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24": [], "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078": [], "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5": [], "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174": [], "test.klaviyo.not_null_klaviyo__person_campaign_flow_person_id.e27d13b0f2": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079": [], "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28": [], "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc": [], "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a": [], "test.klaviyo.unique_klaviyo__persons_email.a330194dd6": [], "test.klaviyo.not_null_klaviyo__persons_email.072e38d07d": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3": [], "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81": [], "test.klaviyo.not_null_int_klaviyo__person_metrics_person_id.2c0f4e5a67": [], "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b": [], "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": [], "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": [], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109": [], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd": [], "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb": [], "source.shopify_source.shopify.order": [], "source.shopify_source.shopify.customer": [], "source.shopify_source.shopify.order_line": [], "source.shopify_source.shopify.order_line_refund": [], "source.shopify_source.shopify.product": [], "source.shopify_source.shopify.product_variant": [], "source.shopify_source.shopify.transaction": [], "source.shopify_source.shopify.refund": [], "source.shopify_source.shopify.order_adjustment": [], "source.klaviyo_source.klaviyo.campaign": [], "source.klaviyo_source.klaviyo.event": [], "source.klaviyo_source.klaviyo.flow": [], "source.klaviyo_source.klaviyo.integration": [], "source.klaviyo_source.klaviyo.person": [], "source.klaviyo_source.klaviyo.metric": []}}